on: issue_comment
name: Issue Comments
jobs:
  handle_comments:
    name: Merge command handler
    if: |
      startsWith(github.event.comment.body, '/merge')
    runs-on: ubuntu-latest
    steps:

      - name: Print info about event
        id: info
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            console.log(context)
            console.log(`::set-output name=xxx::${context}`)

      - name: Print
        run: echo "The xxx was '${{ steps.info.outputs.xxx }}'"

      - name: Merge command handler
        id: command
        uses: xt0rted/slash-command-action@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          command: merge
          reaction: "true"
          reaction-type: "eyes"
          allow-edits: "false"
          permission-level: admin

      - name: Dry run merge message
        uses: actions/github-script@v3
        if: |
          steps.command.outputs.command-name == 'merge' &&
          steps.command.outputs.command-arguments == 'possible' &&
          (contains(github.event.pull_request.labels.*.name, 'authorized-changes')) &&
          (contains(github.event.pull_request.labels.*.name, 'deployment-ok')) &&
          (contains(github.event.pull_request.labels.*.name, 'ready')) &&
          (!contains(github.event.pull_request.labels.*.name, 'new-operator')) &&
          (!contains(github.event.pull_request.labels.*.name, 'do-not-merge/work-in-progress')) &&
          (!contains(github.event.pull_request.labels.*.name, 'do-not-merge/hold'))
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'Mainainer can merge it now'
            })

      - name: Merge message when not able to merge
        uses: actions/github-script@v3
        if: |
          steps.command.outputs.command-name == 'merge' &&
          steps.command.outputs.command-arguments == 'possible' && (
          (!contains(github.event.pull_request.labels.*.name, 'authorized-changes')) ||
          (!contains(github.event.pull_request.labels.*.name, 'deployment-ok')) ||
          (!contains(github.event.pull_request.labels.*.name, 'ready')))
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'Automatic merging labels (`authorized-changes`,`deployment-ok`,`ready`) are not set.'
            })

      - name: Merge message when not able to merge and inform user about authorized_changes
        uses: actions/github-script@v3
        if: |
          steps.command.outputs.command-name == 'merge' &&
          steps.command.outputs.command-arguments == 'possible' &&
          (!contains(github.event.pull_request.labels.*.name, 'authorized-changes')) &&
          (contains(github.event.pull_request.labels.*.name, 'deployment-ok')) &&
          (contains(github.event.pull_request.labels.*.name, 'ready')) &&
          (!contains(github.event.pull_request.labels.*.name, 'new-operator')) &&
          (!contains(github.event.pull_request.labels.*.name, 'do-not-merge/work-in-progress')) &&
          (!contains(github.event.pull_request.labels.*.name, 'do-not-merge/hold'))
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'Current PR can be merged automatically, but there is missing `authorized-changes` label. One can find out more info [here](https://operator-framework.github.io/community-operators/operator-ci-yaml/#reviewers).'
            })

      - name: Act on the command ('')
        if: steps.command.outputs.command-name == 'merge' && steps.command.outputs.command-arguments == ''
        run: echo "The command was '${{ steps.command.outputs.command-name }}' with arguments '${{ steps.command.outputs.command-arguments }}'"

      # - name: automerge
      #   if: steps.command.outputs.command-name == 'merge' && steps.command.outputs.command-arguments == ''
      #   uses: "pascalgn/automerge-action@v0.13.1"
      #   env:
      #     GITHUB_TOKEN: "${{ secrets.FRAMEWORK_MERGE }}"
      #     MERGE_LABELS: "authorized-changes,ready,deployment-ok,!new-operator,!do-not-merge/hold,!do-not-merge/work-in-progress"
      #     MERGE_REMOVE_LABELS: ""
      #     MERGE_METHOD: "merge"
      #     MERGE_COMMIT_MESSAGE: "pull-request-title"
      #     MERGE_FORKS: "true"
      #     MERGE_RETRIES: "6"
      #     MERGE_RETRY_SLEEP: "10000"
      #     UPDATE_LABELS: ""
      #     UPDATE_METHOD: "rebase"

