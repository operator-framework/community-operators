name: Operator CI
on:
 pull_request_target:
   types: [opened, synchronize, reopened, ready_for_review]

jobs:
  operator-ci:
    if: github.event.pull_request.draft == false || contains(github.event.pull_request.labels.*.name, 'allow/test-in-draft-mode')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/labeler@v2
        with:
          repo-token: "${{ secrets.GITHUB_TOKEN }}"

      - name: "Setting needs-ok-to-test label"
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: [ 'needs-ok-to-test' ]
            })
      - name: "Add Assignees"
        uses: actions/github-script@v3
        if: github.event.action == 'opened' || github.event.action == 'reopened'
        continue-on-error: true
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.issues.addAssignees({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              assignees: [ "J0zi", "mvalarh" ]
            });
      # - name: Assign pull requests to Community Operator Submissions project
      #   uses: srggrs/assign-one-project-github-action@1.2.1
      #   if: github.event.action == 'opened' || github.event.action == 'reopened'
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   continue-on-error: true
      #   with:
      #     project: 'https://github.com/operator-framework/community-operators/projects/1'
      # - name: "Request reviewer (test)"
      #   uses: actions/github-script@v3
      #   continue-on-error: true
      #   with:
      #     github-token: ${{secrets.GITHUB_TOKEN}}
      #     script: |
      #       github.pulls.requestReviewers({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         pull_number: context.issue.number,
      #         reviewers: [ "mvalahtv" ]
      #       });

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: python -m pip install --upgrade pip yq

      - name: Operator traffic light
        id: op-traffic-light
        env:
          OP_TEST_LABELS: "${{ join(github.event.pull_request.labels.*.name, ' ') }}"
          OPRT_REPO: "${{ github.event.pull_request.head.repo.full_name }}"
          OPRT_SHA: "${{ github.event.pull_request.head.sha }}"
          #OPRT_SRC_BRANCH: "support/action-01"
        run: |
          bash <(curl -sL https://raw.githubusercontent.com/operator-framework/operator-test-playbooks/master/upstream/test/oprt.sh)

      - name: Update title
        uses: actions/github-script@v3
        continue-on-error: true
        if: steps.op-traffic-light.outputs.op_test_pr_title != ''
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.issues.update({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: "${{ steps.op-traffic-light.outputs.op_test_pr_title }}"
            })

      - name: Handle new operator
        uses: actions/github-script@v3
        if: steps.op-traffic-light.outputs.op_test_is_new_operatror == '1'
        continue-on-error: true
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: [ 'new-operator' ]
            })
      - name: Verify operator modifications
        id: op-verify-modifications
        env:
          OP_TEST_ALLOW_SERIOUS_CHANGES: "${{ steps.op-traffic-light.outputs.op_test_allow_serious_changes }}"
          OP_TEST_MODIFIED_CSVS: "${{ steps.op-traffic-light.outputs.op_test_modified_csvs }}"
          OP_TEST_MODIFIED_CSVS_OTHERS: "${{ steps.op-traffic-light.outputs.op_test_modified_others }}"
        run: |
          echo "::set-output name=op_check_cosmetic::0"
          [[ $OP_TEST_ALLOW_SERIOUS_CHANGES -eq 1 ]] && { echo "Allowing serious changes. Exiting with '0' ..."; exit 0; } || true
          [ -n "$OP_TEST_MODIFIED_CSVS" ] && echo "::set-output name=op_check_cosmetic::1" || true
          [ -n "$OP_TEST_MODIFIED_CSVS_OTHERS" ] && { echo -e "Error:\n    Modifying exiting operator version !!!\n    Only cosmetic changes are allowed !!!\n    Files that cannot be changed : '$OP_TEST_MODIFIED_CSVS_OTHERS'"; exit 20; } || true

      - name: Operator cosmetic change check
        id: op-cosmetic-change-check
        if: steps.op-verify-modifications.outputs.op_check_cosmetic == '1'
        env:
          OP_TEST_MODIFIED_CSVS: "${{ steps.op-traffic-light.outputs.op_test_modified_csvs }}"
          OP_TEST_MODIFIED_REPO_BRANCH: "${{ steps.op-traffic-light.outputs.op_test_repo_branch }}"
          OP_TEST_ANSIBLE_PULL_REPO: "https://github.com/operator-framework/operator-test-playbooks"
          OP_TEST_ANSIBLE_PULL_BRANCH: "master"
          OP_TEST_STREAM: "${{ steps.op-traffic-light.outputs.op_test_stream }}"
        run: |
          echo "OP_TEST_MODIFIED_CSVS=$OP_TEST_MODIFIED_CSVS"
          echo "op_check_cosmetic: ${{ steps.op-verify-modifications.outputs.op_check_cosmetic }}"
          echo "op_test_set_label_operator_version_overwrite: ${{ steps.op-traffic-light.outputs.op_test_set_label_operator_version_overwrite }}"
          echo "op_test_set_label_operator_recreate: ${{ steps.op-traffic-light.outputs.op_test_set_label_operator_recreate }}"
          bash <(curl -sL https://raw.githubusercontent.com/operator-framework/operator-test-playbooks/master/upstream/test/oprt_cosmetics.sh)
          echo "DONE"

      - name: "Adding comment when changes failed"
        if: ${{ failure() }}
        uses: mshick/add-pr-comment@v1
        with:
          message: |
            /hold
                     
            Only minor (cosmetic) changes to already published operator version(s) are allowed. 
            Consider bumping your operator version. In exceptional cases, it could be overridden by setting `allow/serious-changes-to-existing` label set by maintainers and then confirmed action by running command `/hold cancel`.
            
            <details>

            More info about allowed changes can be found in [documetnation](https://operator-framework.github.io/community-operators/troubleshooting/#minor-changes).
            </details>
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          repo-token-user-login: 'github-actions[bot]' # The user.login for temporary GitHub tokens
          allow-repeats: true # This is the default

      - name: "Removing Operator recreate label when exists"
        uses: actions/github-script@v3
        if: steps.op-traffic-light.outputs.op_test_set_label_operator_version_overwrite == '1' && contains(github.event.pull_request.labels.*.name, 'allow/operator-recreate')
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.issues.removeLabel({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'allow/operator-recreate'
            })
      - name: "Setting Operator version overwrite label"
        uses: actions/github-script@v3
        if: steps.op-traffic-light.outputs.op_test_set_label_operator_version_overwrite == '1'
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: [ 'allow/operator-version-overwrite' ]
            })
      - name: "Removing Operator version overwrite label when existsss"
        uses: actions/github-script@v3
        if: steps.op-traffic-light.outputs.op_test_set_label_operator_recreate == '1' && contains(github.event.pull_request.labels.*.name, 'allow/operator-version-overwrite')
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.issues.removeLabel({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'allow/operator-version-overwrite'
            })
      - name: "Setting Operator recreate label"
        uses: actions/github-script@v3
        if: steps.op-traffic-light.outputs.op_test_set_label_operator_recreate == '1'
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: [ 'allow/operator-recreate' ]
            })
      - name: "Inform user that UpdateGraph is not present (semver mode)"
        uses: mshick/add-pr-comment@v1
        continue-on-error: true
        if: steps.op-traffic-light.outputs.op_test_update_graph == '0' 
        with:
          message: |
            Warning: Operator is going to run in `semver-mode` since 'updateGraph' is not present in 'ci.yaml' file.
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          repo-token-user-login: 'github-actions[bot]' # The user.login for temporary GitHub tokens
          allow-repeats: true # This is the default

      # - name: "Setting msg when minor changes are allowed"
      #   if:  steps.op-verify-modifications.outputs.op_check_cosmetic == '1' && ! contains(github.event.pull_request.labels.*.name, 'allow/operator-version-overwrite') && ! contains(github.event.pull_request.labels.*.name, 'allow/operator-recreate')
      #   uses: mshick/add-pr-comment@v1
      #   with:
      #     message: |
      #       /hold
            
      #       Minor (cosmetic) changes to already published operator version(s) were detected. 
      #       Please confirm by posting `/unhold` command or removing `do-not-merge/hold ` label.
      #       <details>
      #       One or multiple versions were modified with minor (cosmetic) changes.
      #       </details>
      #     repo-token: ${{ secrets.GITHUB_TOKEN }}
      #     repo-token-user-login: 'github-actions[bot]' # The user.login for temporary GitHub tokens
      #     allow-repeats: true # This is the default

    outputs:
      op_test_ready: "${{ steps.op-traffic-light.outputs.op_test_ready }}"
      op_release_ready: "${{ steps.op-traffic-light.outputs.op_release_ready }}"
      op_test_stream: "${{ steps.op-traffic-light.outputs.op_test_stream }}"
      op_test_name: "${{ steps.op-traffic-light.outputs.op_test_name }}"
      op_test_version: "${{ steps.op-traffic-light.outputs.op_test_version }}"
      op_test_ci_yaml_only: "${{ steps.op-traffic-light.outputs.op_test_ci_yaml_only }}"

  operator-ci-ok-to-test:
    needs: operator-ci
    runs-on: ubuntu-latest
    steps:
      - name: Sleep for 10 seconds
        run: |
          sleep 10

      - name: "Remove needs-ok-to-test"
        uses: actions/github-script@v3
        # if: contains(github.event.pull_request.labels.*.name, 'needs-ok-to-test')
        continue-on-error: true
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.issues.removeLabel({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'needs-ok-to-test'
            })
      - name: "Setting ok-to-test label"
        uses: actions/github-script@v3
        if: needs.operator-ci.outputs.op_test_stream == 'community-operators'
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: [ 'ok-to-test' ]
            })

      # - name: "Run ok-to-test in case of community operators"
      #   if:  needs.operator-ci.outputs.op_test_stream == 'community-operators' && contains(github.event.pull_request.labels.*.name, 'needs-ok-to-test')
      #   uses: mshick/add-pr-comment@v1
      #   with:
      #     message: |
      #       /ok-to-test
      #     repo-token: ${{ secrets.GITHUB_TOKEN }}
      #     repo-token-user-login: 'github-actions[bot]' # The user.login for temporary GitHub tokens
      #     allow-repeats: true # This is the default
