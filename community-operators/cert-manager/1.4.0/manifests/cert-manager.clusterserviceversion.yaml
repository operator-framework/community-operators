apiVersion: operators.coreos.com/v1alpha1
kind: ClusterServiceVersion
metadata:
  annotations:
    alm-examples: |
      [
        {
            "apiVersion": "cert-manager.io/v1",
            "kind": "Issuer",
            "metadata": {
                "name": "test-selfsigned",
                "namespace": "cert-manager-test"
            },
            "spec": {
                "selfSigned": {}
            }
        },
        {
            "apiVersion": "cert-manager.io/v1",
            "kind": "Certificate",
            "metadata": {
                "name": "selfsigned-cert",
                "namespace": "cert-manager-test"
            },
            "spec": {
                "dnsNames": [
                    "example.com"
                ],
                "issuerRef": {
                    "name": "test-selfsigned"
                },
                "secretName": "selfsigned-cert-tls"
            }
        }
      ]
    capabilities: Full Lifecycle
    categories: Security
    containerImage: quay.io/jetstack/cert-manager-controller:v1.4.0
    createdAt: '2021-06-21T15:47:59'
    operators.operatorframework.io/builder: operator-sdk-v1.7.1+git
    operators.operatorframework.io/project_layout: unknown
    repository: https://github.com/jetstack/cert-manager
    support: The cert-manager maintainers
  name: cert-manager.v1.4.0
  namespace: placeholder
spec:
  apiservicedefinitions: {}
  customresourcedefinitions:
    owned:
    - kind: CertificateRequest
      name: certificaterequests.cert-manager.io
      version: v1alpha2
    - kind: CertificateRequest
      name: certificaterequests.cert-manager.io
      version: v1alpha3
    - kind: CertificateRequest
      name: certificaterequests.cert-manager.io
      version: v1beta1
    - kind: CertificateRequest
      name: certificaterequests.cert-manager.io
      version: v1
    - kind: Certificate
      name: certificates.cert-manager.io
      version: v1alpha2
    - kind: Certificate
      name: certificates.cert-manager.io
      version: v1alpha3
    - kind: Certificate
      name: certificates.cert-manager.io
      version: v1beta1
    - kind: Certificate
      name: certificates.cert-manager.io
      version: v1
    - kind: Challenge
      name: challenges.acme.cert-manager.io
      version: v1alpha2
    - kind: Challenge
      name: challenges.acme.cert-manager.io
      version: v1alpha3
    - kind: Challenge
      name: challenges.acme.cert-manager.io
      version: v1beta1
    - kind: Challenge
      name: challenges.acme.cert-manager.io
      version: v1
    - kind: ClusterIssuer
      name: clusterissuers.cert-manager.io
      version: v1alpha2
    - kind: ClusterIssuer
      name: clusterissuers.cert-manager.io
      version: v1alpha3
    - kind: ClusterIssuer
      name: clusterissuers.cert-manager.io
      version: v1beta1
    - kind: ClusterIssuer
      name: clusterissuers.cert-manager.io
      version: v1
    - kind: Issuer
      name: issuers.cert-manager.io
      version: v1alpha2
    - kind: Issuer
      name: issuers.cert-manager.io
      version: v1alpha3
    - kind: Issuer
      name: issuers.cert-manager.io
      version: v1beta1
    - kind: Issuer
      name: issuers.cert-manager.io
      version: v1
    - kind: Order
      name: orders.acme.cert-manager.io
      version: v1alpha2
    - kind: Order
      name: orders.acme.cert-manager.io
      version: v1alpha3
    - kind: Order
      name: orders.acme.cert-manager.io
      version: v1beta1
    - kind: Order
      name: orders.acme.cert-manager.io
      version: v1
  description: |
    cert-manager is a Kubernetes add-on to automate the management and issuance of TLS certificates from various issuing sources.
    It will ensure certificates are valid and up to date periodically, and attempt to renew certificates at an appropriate time before expiry.

    cert-manager has the following [built in issuers][]:

    * ACME: sign certificates using Let's Encrypt (or any other [ACME][] compliant signer).
    * Vault: sign certificates using HashiCorp Vault.
    * Venafi: sign certificates using Venafi Cloud or Venafi Trust Protection Platform.
    * SelfSigned: the private key of the certificate will be used to sign the certificate.
    * CA: a private key stored as a Kubernetes Secret will be used to sign the certificate.

    [built in issuers]: https://cert-manager.io/docs/configuration/#supported-issuer-types
    [ACME]: https://datatracker.ietf.org/doc/html/rfc8555

    cert-manager also supports [external issuers][],
    which are out-of-tree components that provide support for other certificate authorities, such as:
    [Google Cloud Certificate Authority](https://github.com/jetstack/google-cas-issuer),
    [AWS Private Certificate Authority](https://github.com/jniebuhr/aws-pca-issuer), and
    [Cloudflare Origin CA](https://github.com/cloudflare/origin-ca-issuer)

    [external issuers]: https://cert-manager.io/docs/configuration/external/

    In order to configure cert-manager to issue certificates, you must first create an Issuer or ClusterIssuer.
    These resources represent a particular signing authority and tell cert-manager how to handle your certificate requests.
    The [Issuer Documentation][] has more detail.

    [configure cert-manager]: https://cert-manager.io/docs/configuration/
    [Issuer Documentation]: https://cert-manager.io/docs/concepts/issuer/

    Once an Issuer has been configured, you can create a Certificate resource,
    which is a definition of a certificate request that is to be honored by an issuer
    and which is to be kept up-to-date.
    This is the usual way that you will interact with cert-manager to request signed certificates.
    The [Certificate Documentation][] has more detail.

    [Certificate Documentation]: https://cert-manager.io/docs/usage/certificate/
  displayName: cert-manager
  icon:
  - base64data: 
    mediatype: image/png
  install:
    spec:
      clusterPermissions:
      - rules:
        - apiGroups:
          - cert-manager.io
          resourceNames:
          - issuers.cert-manager.io/*
          - clusterissuers.cert-manager.io/*
          resources:
          - signers
          verbs:
          - approve
        - apiGroups:
          - cert-manager.io
          resources:
          - certificates
          - certificates/status
          - certificaterequests
          - certificaterequests/status
          verbs:
          - update
        - apiGroups:
          - cert-manager.io
          resources:
          - certificates
          - certificaterequests
          - clusterissuers
          - issuers
          verbs:
          - get
          - list
          - watch
        - apiGroups:
          - cert-manager.io
          resources:
          - certificates/finalizers
          - certificaterequests/finalizers
          verbs:
          - update
        - apiGroups:
          - acme.cert-manager.io
          resources:
          - orders
          verbs:
          - create
          - delete
          - get
          - list
          - watch
        - apiGroups:
          - ''
          resources:
          - secrets
          verbs:
          - get
          - list
          - watch
          - create
          - update
          - delete
        - apiGroups:
          - ''
          resources:
          - events
          verbs:
          - create
          - patch
        - apiGroups:
          - certificates.k8s.io
          resources:
          - certificatesigningrequests
          verbs:
          - get
          - list
          - watch
          - update
        - apiGroups:
          - certificates.k8s.io
          resources:
          - certificatesigningrequests/status
          verbs:
          - update
        - apiGroups:
          - certificates.k8s.io
          resourceNames:
          - issuers.cert-manager.io/*
          - clusterissuers.cert-manager.io/*
          resources:
          - signers
          verbs:
          - sign
        - apiGroups:
          - authorization.k8s.io
          resources:
          - subjectaccessreviews
          verbs:
          - create
        - apiGroups:
          - acme.cert-manager.io
          resources:
          - challenges
          - challenges/status
          verbs:
          - update
        - apiGroups:
          - acme.cert-manager.io
          resources:
          - challenges
          verbs:
          - get
          - list
          - watch
        - apiGroups:
          - cert-manager.io
          resources:
          - issuers
          - clusterissuers
          verbs:
          - get
          - list
          - watch
        - apiGroups:
          - ''
          resources:
          - secrets
          verbs:
          - get
          - list
          - watch
        - apiGroups:
          - ''
          resources:
          - events
          verbs:
          - create
          - patch
        - apiGroups:
          - ''
          resources:
          - pods
          - services
          verbs:
          - get
          - list
          - watch
          - create
          - delete
        - apiGroups:
          - networking.k8s.io
          resources:
          - ingresses
          verbs:
          - get
          - list
          - watch
          - create
          - delete
          - update
        - apiGroups:
          - route.openshift.io
          resources:
          - routes/custom-host
          verbs:
          - create
        - apiGroups:
          - acme.cert-manager.io
          resources:
          - challenges/finalizers
          verbs:
          - update
        - apiGroups:
          - ''
          resources:
          - secrets
          verbs:
          - get
          - list
          - watch
        - apiGroups:
          - cert-manager.io
          resources:
          - clusterissuers
          - clusterissuers/status
          verbs:
          - update
        - apiGroups:
          - cert-manager.io
          resources:
          - clusterissuers
          verbs:
          - get
          - list
          - watch
        - apiGroups:
          - ''
          resources:
          - secrets
          verbs:
          - get
          - list
          - watch
          - create
          - update
          - delete
        - apiGroups:
          - ''
          resources:
          - events
          verbs:
          - create
          - patch
        - apiGroups:
          - cert-manager.io
          resources:
          - certificates
          - certificaterequests
          verbs:
          - create
          - update
          - delete
        - apiGroups:
          - cert-manager.io
          resources:
          - certificates
          - certificaterequests
          - issuers
          - clusterissuers
          verbs:
          - get
          - list
          - watch
        - apiGroups:
          - networking.k8s.io
          resources:
          - ingresses
          verbs:
          - get
          - list
          - watch
        - apiGroups:
          - networking.k8s.io
          resources:
          - ingresses/finalizers
          verbs:
          - update
        - apiGroups:
          - ''
          resources:
          - events
          verbs:
          - create
          - patch
        - apiGroups:
          - cert-manager.io
          resources:
          - issuers
          - issuers/status
          verbs:
          - update
        - apiGroups:
          - cert-manager.io
          resources:
          - issuers
          verbs:
          - get
          - list
          - watch
        - apiGroups:
          - ''
          resources:
          - secrets
          verbs:
          - get
          - list
          - watch
          - create
          - update
          - delete
        - apiGroups:
          - ''
          resources:
          - events
          verbs:
          - create
          - patch
        - apiGroups:
          - acme.cert-manager.io
          resources:
          - orders
          - orders/status
          verbs:
          - update
        - apiGroups:
          - acme.cert-manager.io
          resources:
          - orders
          - challenges
          verbs:
          - get
          - list
          - watch
        - apiGroups:
          - cert-manager.io
          resources:
          - clusterissuers
          - issuers
          verbs:
          - get
          - list
          - watch
        - apiGroups:
          - acme.cert-manager.io
          resources:
          - challenges
          verbs:
          - create
          - delete
        - apiGroups:
          - acme.cert-manager.io
          resources:
          - orders/finalizers
          verbs:
          - update
        - apiGroups:
          - ''
          resources:
          - secrets
          verbs:
          - get
          - list
          - watch
        - apiGroups:
          - ''
          resources:
          - events
          verbs:
          - create
          - patch
        serviceAccountName: cert-manager
      - rules:
        - apiGroups:
          - cert-manager.io
          resources:
          - certificates
          verbs:
          - get
          - list
          - watch
        - apiGroups:
          - ''
          resources:
          - secrets
          verbs:
          - get
          - list
          - watch
        - apiGroups:
          - ''
          resources:
          - events
          verbs:
          - get
          - create
          - update
          - patch
        - apiGroups:
          - admissionregistration.k8s.io
          resources:
          - validatingwebhookconfigurations
          - mutatingwebhookconfigurations
          verbs:
          - get
          - list
          - watch
          - update
        - apiGroups:
          - apiregistration.k8s.io
          resources:
          - apiservices
          verbs:
          - get
          - list
          - watch
          - update
        - apiGroups:
          - apiextensions.k8s.io
          resources:
          - customresourcedefinitions
          verbs:
          - get
          - list
          - watch
          - update
        - apiGroups:
          - auditregistration.k8s.io
          resources:
          - auditsinks
          verbs:
          - get
          - list
          - watch
          - update
        serviceAccountName: cert-manager-cainjector
      - rules:
        - apiGroups:
          - authorization.k8s.io
          resources:
          - subjectaccessreviews
          verbs:
          - create
        serviceAccountName: cert-manager-webhook
      deployments:
      - name: cert-manager
        spec:
          replicas: 1
          selector:
            matchLabels:
              app.kubernetes.io/component: controller
              app.kubernetes.io/instance: cert-manager
              app.kubernetes.io/name: cert-manager
          strategy: {}
          template:
            metadata:
              annotations:
                prometheus.io/path: /metrics
                prometheus.io/port: '9402'
                prometheus.io/scrape: 'true'
              labels:
                app: cert-manager
                app.kubernetes.io/component: controller
                app.kubernetes.io/instance: cert-manager
                app.kubernetes.io/managed-by: Helm
                app.kubernetes.io/name: cert-manager
                helm.sh/chart: cert-manager-v1.4.0
            spec:
              containers:
              - args:
                - --v=2
                - --cluster-resource-namespace=$(POD_NAMESPACE)
                - --leader-election-namespace=kube-system
                env:
                - name: POD_NAMESPACE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.namespace
                image: quay.io/jetstack/cert-manager-controller:v1.4.0
                imagePullPolicy: IfNotPresent
                name: cert-manager
                ports:
                - containerPort: 9402
                  protocol: TCP
                resources: {}
              securityContext:
                runAsNonRoot: true
              serviceAccountName: cert-manager
      - name: cert-manager-cainjector
        spec:
          replicas: 1
          selector:
            matchLabels:
              app.kubernetes.io/component: cainjector
              app.kubernetes.io/instance: cert-manager
              app.kubernetes.io/name: cainjector
          strategy: {}
          template:
            metadata:
              labels:
                app: cainjector
                app.kubernetes.io/component: cainjector
                app.kubernetes.io/instance: cert-manager
                app.kubernetes.io/managed-by: Helm
                app.kubernetes.io/name: cainjector
                helm.sh/chart: cert-manager-v1.4.0
            spec:
              containers:
              - args:
                - --v=2
                - --leader-election-namespace=kube-system
                env:
                - name: POD_NAMESPACE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.namespace
                image: quay.io/jetstack/cert-manager-cainjector:v1.4.0
                imagePullPolicy: IfNotPresent
                name: cert-manager
                resources: {}
              securityContext:
                runAsNonRoot: true
              serviceAccountName: cert-manager-cainjector
      - name: cert-manager-webhook
        spec:
          replicas: 1
          selector:
            matchLabels:
              app.kubernetes.io/component: webhook
              app.kubernetes.io/instance: cert-manager
              app.kubernetes.io/name: webhook
          strategy: {}
          template:
            metadata:
              labels:
                app: webhook
                app.kubernetes.io/component: webhook
                app.kubernetes.io/instance: cert-manager
                app.kubernetes.io/managed-by: Helm
                app.kubernetes.io/name: webhook
                helm.sh/chart: cert-manager-v1.4.0
            spec:
              containers:
              - args:
                - --v=2
                - --secure-port=10250
                - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
                - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
                - --dynamic-serving-dns-names=cert-manager-webhook-service.$(POD_NAMESPACE).svc
                - --tls-cert-file=/tmp/k8s-webhook-server/serving-certs/tls.crt
                - --tls-private-key-file=/tmp/k8s-webhook-server/serving-certs/tls.key
                env:
                - name: POD_NAMESPACE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.namespace
                image: quay.io/jetstack/cert-manager-webhook:v1.4.0
                imagePullPolicy: IfNotPresent
                livenessProbe:
                  failureThreshold: 3
                  httpGet:
                    path: /livez
                    port: 6080
                    scheme: HTTP
                  initialDelaySeconds: 60
                  periodSeconds: 10
                  successThreshold: 1
                  timeoutSeconds: 1
                name: cert-manager
                ports:
                - containerPort: 10250
                  name: https
                readinessProbe:
                  failureThreshold: 3
                  httpGet:
                    path: /healthz
                    port: 6080
                    scheme: HTTP
                  initialDelaySeconds: 5
                  periodSeconds: 5
                  successThreshold: 1
                  timeoutSeconds: 1
                resources: {}
              securityContext:
                runAsNonRoot: true
              serviceAccountName: cert-manager-webhook
      permissions:
      - rules:
        - apiGroups:
          - ''
          resourceNames:
          - cert-manager-controller
          resources:
          - configmaps
          verbs:
          - get
          - update
          - patch
        - apiGroups:
          - ''
          resources:
          - configmaps
          verbs:
          - create
        - apiGroups:
          - coordination.k8s.io
          resourceNames:
          - cert-manager-controller
          resources:
          - leases
          verbs:
          - get
          - update
          - patch
        - apiGroups:
          - coordination.k8s.io
          resources:
          - leases
          verbs:
          - create
        serviceAccountName: cert-manager
      - rules:
        - apiGroups:
          - ''
          resourceNames:
          - cert-manager-cainjector-leader-election
          - cert-manager-cainjector-leader-election-core
          resources:
          - configmaps
          verbs:
          - get
          - update
          - patch
        - apiGroups:
          - ''
          resources:
          - configmaps
          verbs:
          - create
        - apiGroups:
          - coordination.k8s.io
          resourceNames:
          - cert-manager-cainjector-leader-election
          - cert-manager-cainjector-leader-election-core
          resources:
          - leases
          verbs:
          - get
          - update
          - patch
        - apiGroups:
          - coordination.k8s.io
          resources:
          - leases
          verbs:
          - create
        serviceAccountName: cert-manager-cainjector
      - rules:
        - apiGroups:
          - ''
          resourceNames:
          - cert-manager-webhook-ca
          resources:
          - secrets
          verbs:
          - get
          - list
          - watch
          - update
        - apiGroups:
          - ''
          resources:
          - secrets
          verbs:
          - create
        serviceAccountName: cert-manager-webhook
    strategy: deployment
  installModes:
  - supported: false
    type: OwnNamespace
  - supported: false
    type: SingleNamespace
  - supported: false
    type: MultiNamespace
  - supported: true
    type: AllNamespaces
  keywords:
  - TLS
  - secrets
  - security
  - certificates
  links:
  - name: Documentation
    url: https://cert-manager.io/
  - name: Release Notes
    url: https://cert-manager.io/docs/release-notes
  maintainers:
  - email: cert-manager-maintainers@googlegroups.com
    name: The cert-manager maintainers
  maturity: stable
  minKubeVersion: 1.16.0
  provider:
    name: The cert-manager maintainers
    url: https://cert-manager.io/
  version: 1.4.0
  webhookdefinitions:
  - admissionReviewVersions:
    - v1
    - v1beta1
    containerPort: 443
    deploymentName: cert-manager-webhook
    failurePolicy: Fail
    generateName: validate.webhooks.cert-manager.io
    rules:
    - apiGroups:
      - cert-manager.io
      - acme.cert-manager.io
      apiVersions:
      - '*'
      operations:
      - CREATE
      - UPDATE
      resources:
      - '*/*'
    sideEffects: None
    targetPort: 10250
    timeoutSeconds: 10
    type: ValidatingAdmissionWebhook
    webhookPath: /validate
  - admissionReviewVersions:
    - v1
    - v1beta1
    containerPort: 443
    deploymentName: cert-manager-webhook
    failurePolicy: Fail
    generateName: mutate.webhooks.cert-manager.io
    rules:
    - apiGroups:
      - cert-manager.io
      - acme.cert-manager.io
      apiVersions:
      - '*'
      operations:
      - CREATE
      - UPDATE
      resources:
      - '*/*'
    sideEffects: None
    targetPort: 10250
    timeoutSeconds: 10
    type: MutatingAdmissionWebhook
    webhookPath: /mutate
  - admissionReviewVersions:
    - v1
    - v1beta1
    containerPort: 443
    conversionCRDs:
    - certificaterequests.cert-manager.io
    - certificates.cert-manager.io
    - challenges.acme.cert-manager.io
    - clusterissuers.cert-manager.io
    - issuers.cert-manager.io
    - orders.acme.cert-manager.io
    deploymentName: cert-manager-webhook
    generateName: convert.webhooks.cert-manager.io
    sideEffects: None
    targetPort: 10250
    type: ConversionWebhook
    webhookPath: /convert
