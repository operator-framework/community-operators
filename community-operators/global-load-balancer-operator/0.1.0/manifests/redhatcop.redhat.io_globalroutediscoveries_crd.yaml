apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: globalroutediscoveries.redhatcop.redhat.io
spec:
  group: redhatcop.redhat.io
  names:
    kind: GlobalRouteDiscovery
    listKind: GlobalRouteDiscoveryList
    plural: globalroutediscoveries
    singular: globalroutediscovery
  scope: Namespaced
  subresources:
    status: {}
  validation:
    openAPIV3Schema:
      description: GlobalRouteDiscovery is the Schema for the globalroutediscoveries
        API
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          type: object
        spec:
          description: GlobalRouteDiscoverySpec defines the desired state of GlobalRouteDiscovery
          properties:
            clusters:
              description: Cluster is an arrays with the list of clusters in which
                global routes will be discovered
              items:
                description: ClusterReference contains the infomation necessary to
                  connect to a cluster
                properties:
                  clusterCredentialRef:
                    description: CredentialsSecretRef is a reference to a secret containing
                      the credentials to access the cluster a key called "kubeconfig"
                      containing a valid kubeconfig file for connecting to the cluster
                      must exist in this secret.
                    properties:
                      name:
                        type: string
                      namespace:
                        type: string
                    required:
                    - name
                    - namespace
                    type: object
                  clusterName:
                    description: ClusterName name of the cluster to connect to.
                    type: string
                required:
                - clusterCredentialRef
                - clusterName
                type: object
              type: array
              x-kubernetes-list-map-keys:
              - clusterName
              x-kubernetes-list-type: map
            defaultLoadBalancingPolicy:
              description: DefaultLoadBalancingPolicy defines the load balancing policy
                to be used by default. This can be overridden with a route annotation
                TODO which? -kubebuilder:default:="Multivalue"
              enum:
              - Weighted
              - Multivalue
              - Geolocation
              - Geoproximity
              - Latency
              - Failover
              type: string
            defaultTTL:
              description: Dfeault TTL is the TTL for this dns record -kubebuilder:default:60
              type: integer
            globalZoneRef:
              description: GlobalZoneRef represents the global zone that will be used
                to host this record
              properties:
                name:
                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                    TODO: Add other useful fields. apiVersion, kind, uid?'
                  type: string
              type: object
            routeSelector:
              description: RouteSelector is the selector that selects the global routes,
                this allows you to define also local routes.
              properties:
                matchExpressions:
                  description: matchExpressions is a list of label selector requirements.
                    The requirements are ANDed.
                  items:
                    description: A label selector requirement is a selector that contains
                      values, a key, and an operator that relates the key and values.
                    properties:
                      key:
                        description: key is the label key that the selector applies
                          to.
                        type: string
                      operator:
                        description: operator represents a key's relationship to a
                          set of values. Valid operators are In, NotIn, Exists and
                          DoesNotExist.
                        type: string
                      values:
                        description: values is an array of string values. If the operator
                          is In or NotIn, the values array must be non-empty. If the
                          operator is Exists or DoesNotExist, the values array must
                          be empty. This array is replaced during a strategic merge
                          patch.
                        items:
                          type: string
                        type: array
                    required:
                    - key
                    - operator
                    type: object
                  type: array
                matchLabels:
                  additionalProperties:
                    type: string
                  description: matchLabels is a map of {key,value} pairs. A single
                    {key,value} in the matchLabels map is equivalent to an element
                    of matchExpressions, whose key field is "key", the operator is
                    "In", and the values array contains only "value". The requirements
                    are ANDed.
                  type: object
              type: object
          required:
          - globalZoneRef
          type: object
        status:
          description: GlobalRouteDiscoveryStatus defines the observed state of GlobalRouteDiscovery
          properties:
            clusterReferenceStatuses:
              additionalProperties:
                description: Conditions is a set of Condition instances.
                items:
                  description: "Condition represents an observation of an object's
                    state. Conditions are an extension mechanism intended to be used
                    when the details of an observation are not a priori known or would
                    not apply to all instances of a given Kind. \n Conditions should
                    be added to explicitly convey properties that users and components
                    care about rather than requiring those properties to be inferred
                    from other observations. Once defined, the meaning of a Condition
                    can not be changed arbitrarily - it becomes part of the API, and
                    has the same backwards- and forwards-compatibility concerns of
                    any other part of the API."
                  properties:
                    lastTransitionTime:
                      format: date-time
                      type: string
                    message:
                      type: string
                    reason:
                      description: ConditionReason is intended to be a one-word, CamelCase
                        representation of the category of cause of the current status.
                        It is intended to be used in concise output, such as one-line
                        kubectl get output, and in summarizing occurrences of causes.
                      type: string
                    status:
                      type: string
                    type:
                      description: "ConditionType is the type of the condition and
                        is typically a CamelCased word or short phrase. \n Condition
                        types should indicate state in the \"abnormal-true\" polarity.
                        For example, if the condition indicates when a policy is invalid,
                        the \"is valid\" case is probably the norm, so the condition
                        should be called \"Invalid\"."
                      type: string
                  required:
                  - status
                  - type
                  type: object
                type: array
              description: ClusterReferenceStatuses contains the status of the cluster
                refence connections and their latest reconcile.
              type: object
              x-kubernetes-map-type: granular
            conditions:
              description: ReconcileStatus this is the general status of the main
                reconciler
              items:
                description: "Condition represents an observation of an object's state.
                  Conditions are an extension mechanism intended to be used when the
                  details of an observation are not a priori known or would not apply
                  to all instances of a given Kind. \n Conditions should be added
                  to explicitly convey properties that users and components care about
                  rather than requiring those properties to be inferred from other
                  observations. Once defined, the meaning of a Condition can not be
                  changed arbitrarily - it becomes part of the API, and has the same
                  backwards- and forwards-compatibility concerns of any other part
                  of the API."
                properties:
                  lastTransitionTime:
                    format: date-time
                    type: string
                  message:
                    type: string
                  reason:
                    description: ConditionReason is intended to be a one-word, CamelCase
                      representation of the category of cause of the current status.
                      It is intended to be used in concise output, such as one-line
                      kubectl get output, and in summarizing occurrences of causes.
                    type: string
                  status:
                    type: string
                  type:
                    description: "ConditionType is the type of the condition and is
                      typically a CamelCased word or short phrase. \n Condition types
                      should indicate state in the \"abnormal-true\" polarity. For
                      example, if the condition indicates when a policy is invalid,
                      the \"is valid\" case is probably the norm, so the condition
                      should be called \"Invalid\"."
                    type: string
                required:
                - status
                - type
                type: object
              type: array
          type: object
      type: object
  version: v1alpha1
  versions:
  - name: v1alpha1
    served: true
    storage: true
