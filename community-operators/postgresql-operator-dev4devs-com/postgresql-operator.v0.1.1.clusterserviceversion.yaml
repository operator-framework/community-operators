apiVersion: operators.coreos.com/v1alpha1
kind: ClusterServiceVersion
metadata:
  annotations:
    alm-examples: |-
      [
        {
          "apiVersion": "postgresql.dev4devs.com/v1alpha1",
          "kind": "Database",
          "metadata": {
            "name": "database"
          },
          "spec": {
            "databaseCpu": "30m",
            "databaseCpuLimit": "60m",
            "databaseMemoryLimit": "512Mi",
            "databaseMemoryRequest": "128Mi",
            "databaseName": "example",
            "databaseNameKeyEnvVar": "POSTGRESQL_DATABASE",
            "databasePassword": "postgres",
            "databasePasswordKeyEnvVar": "POSTGRESQL_PASSWORD",
            "databaseStorageRequest": "1Gi",
            "databaseUser": "postgres",
            "databaseUserKeyEnvVar": "POSTGRESQL_USER",
            "image": "centos/postgresql-96-centos7",
            "size": 1
          }
        },
        {
          "apiVersion": "postgresql.dev4devs.com/v1alpha1",
          "kind": "Backup",
          "metadata": {
            "name": "backup"
          },
          "spec": {
            "awsAccessKeyId": "example-awsAccessKeyId",
            "awsS3BucketName": "example-awsS3BucketName",
            "awsSecretAccessKey": "example-awsSecretAccessKey",
            "schedule": "0 0 * * *"
          }
        }
      ]
    capabilities: Full Lifecycle
    categories: Database
    certified: "false"
    containerImage: quay.io/dev4devs-com/postgresql-operator:0.1.1
    createdAt: "2019-09-08T08:00:00Z"
    description: Operator in Go developed using the Operator Framework to package,
      install, configure and manage a PostgreSQL database. This project includes backup
      feature.
    repository: https://github.com/dev4devs-com/postgresql-operator
    support: Dev4Devs, Inc
  name: postgresql-operator.v0.1.1
  namespace: placeholder
spec:
  apiservicedefinitions: {}
  customresourcedefinitions:
    owned:
    - description: Backup is the Schema for the backups API
      displayName: Database Backup
      kind: Backup
      name: backups.postgresql.dev4devs.com
      resources:
      - kind: CronJob
        name: A Kubernetes Deployment
        version: v1beta1
      - kind: PersistentVolumeClaim
        name: A Kubernetes PersistentVolumeClaim
        version: v1
      - kind: Service
        name: A Kubernetes Service
        version: v1
      specDescriptors:
      - description: 'Key ID of AWS S3 storage. Default Value: nil Required to create
          the Secret with the data to allow send the backup files to AWS S3 storage.'
        displayName: AWS S3 accessKey/token ID
        path: awsAccessKeyId
      - description: 'Name of AWS S3 storage. Default Value: nil Required to create
          the Secret with the AWS data to allow send the backup files to AWS S3 storage.'
        displayName: AWS S3 Bucket name
        path: awsS3BucketName
      - description: 'Secret/Token of AWS S3 storage. Default Value: nil Required
          to create the Secret with the data to allow send the backup files to AWS
          S3 storage.'
        displayName: AWS S3 accessKey/token
        path: awsSecretAccessKey
      - description: 'Name of the secret with the AWS data credentials pre-existing
          in the cluster Default Value: nil See here the template: https://github.com/integr8ly/backup-container-image/blob/master/templates/openshift/sample-config/s3-secret.yaml'
        displayName: 'AWS Secret name:'
        path: awsSecretName
      - description: 'Namespace of the secret with the AWS data credentials pre-existing
          in the cluster Default Value: nil NOTE: If the namespace be not informed
          then the operator will try to find it in the same namespace where it is
          applied'
        displayName: 'AWS Secret namespace:'
        path: awsSecretNamespace
      - description: 'Name of the configMap key where the operator should looking
          for the value for the database name for its env var Default value: nil'
        displayName: ConfigMap Database Key
        path: configMapDatabaseNameKey
      - description: 'Name of the configMap key where the operator should looking
          for the value for the database user for its env var Default value: nil'
        displayName: ConfigMap Password Key
        path: configMapDatabasePasswordKey
      - description: 'Name of the configMap key where the operator should looking
          for the value for the database password for its env var Default value: nil'
        displayName: ConfigMap User Key
        path: configMapDatabaseUserKey
      - description: 'Name of the ConfigMap where the operator should looking for
          the EnvVars keys and/or values only Default value: nil'
        displayName: ConfigMap name
        path: configMapName
      - description: 'Policy definition to pull the Database Image More info: https://kubernetes.io/docs/concepts/containers/images/
          Default value:'
        displayName: Container Image Pull Policy
        path: containerImagePullPolicy
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:imagePullPolicy
      - description: 'Name of the Database CR applied which this backup will work
          with Default Value: "database"'
        displayName: Name of Database CR
        path: databaseCRName
      - description: 'CPU resource request which will be available for the database
          container Default value: 10Mi'
        displayName: Database CPU
        path: databaseCpu
      - description: 'Limit of CPU request which will be available for the database
          container Default value: 20Mi'
        displayName: Database CPU Limit
        path: databaseCpuLimit
      - description: 'Limit of Memory which will be available for the database container
          Default value: 512Mi'
        displayName: Database Memory Limit
        path: databaseMemoryLimit
      - description: 'Limit of Memory Request which will be available for the database
          container Default value: 128Mi'
        displayName: Database Memory Request
        path: databaseMemoryRequest
      - description: 'Value for the Database Environment Variable (spec.databaseNameKeyEnvVar).
          Default value: example'
        displayName: Database Name
        path: databaseName
      - description: 'Key Value for the Database Environment Variable in order to
          inform the database mame Note that each database version/image can expected
          a different value for it. Default value: nil'
        displayName: EnvVar Key (Database Name)
        path: databaseNameKeyEnvVar
      - description: 'Value for the Database Environment Variable (spec.databasePasswordKeyEnvVar).
          Default value: postgres'
        displayName: Database Password
        path: databasePassword
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:password
      - description: 'Key Value for the Database Environment Variable in order to
          inform the database password Note that each database version/image can expected
          a different value for it. Default value: nil'
        displayName: EnvVar Key (Database Password)
        path: databasePasswordKeyEnvVar
      - description: 'Limit of Storage Request which will be available for the database
          container Default value: 1Gi'
        displayName: Database Storage Request
        path: databaseStorageRequest
      - description: 'Value for the Database Environment Variable (spec.databaseUserKeyEnvVar).
          Default value: postgres'
        displayName: Database User
        path: databaseUser
      - description: 'Key Value for the Database Environment Variable in order to
          inform the database user Note that each database version/image can expected
          a different value for it. Default value: nil'
        displayName: EnvVar Key (Database User)
        path: databaseUserKeyEnvVar
      - description: 'Database version. (E.g 9.6). Default Value: <9.6> IMPORTANT:
          Just the first 2 digits should be used.'
        displayName: Databaseversion
        path: databaseVersion
      - description: 'Name of the secret with the Encrypt data pre-existing in the
          cluster Default Value: nil See here the template: https://github.com/integr8ly/backup-container-image/blob/master/templates/openshift/sample-config/gpg-secret.yaml'
        displayName: 'EncryptKey Secret name:'
        path: encryptKeySecretName
      - description: 'Namespace of the secret with the Encrypt data pre-existing in
          the cluster Default Value: nil NOTE: If the namespace be not informed then
          the operator will try to find it in the same namespace where it is applied'
        displayName: 'EncryptKey Secret namespace:'
        path: encryptKeySecretNamespace
      - description: 'GPG email to create the EncryptionKeySecret with this data Default
          Value: nil See here how to create this key : https://help.github.com/en/articles/generating-a-new-gpg-key'
        displayName: 'Gpg public email:'
        path: gpgEmail
      - description: 'GPG public key to create the EncryptionKeySecret with this data
          Default Value: nil See here how to create this key : https://help.github.com/en/articles/generating-a-new-gpg-key'
        displayName: 'Gpg public key:'
        path: gpgPublicKey
      - description: 'GPG trust model to create the EncryptionKeySecret with this
          data. the default value is true when it is empty. Default Value: nil See
          here how to create this key : https://help.github.com/en/articles/generating-a-new-gpg-key'
        displayName: 'Gpg trust model:'
        path: gpgTrustModel
      - description: 'Database image:tag Default value: centos/postgresql-96-centos7'
        displayName: Image:tag
        path: image
      - description: 'Image:tag used to do the backup. Default Value: <quay.io/integreatly/backup-container:1.0.8>
          More Info: https://github.com/integr8ly/backup-container-image'
        displayName: Image:tag
        path: image
      - description: 'Used to create the directory where the files will be stored
          Default Value: <postgresql>'
        displayName: AWS tag name
        path: productName
      - description: 'Schedule period for the CronJob. Default Value: <0 0 * * *>
          daily at 00:00'
        displayName: Schedule
        path: schedule
      - description: 'Quantity of instances Default value: 1'
        displayName: Size
        path: size
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:podCount
      statusDescriptors:
      - description: Namespace  of the secret object with the Aws data to allow send
          the backup files to the AWS storage
        displayName: AWS Secret Namespace
        path: awsCredentialsSecretNamespace
      - description: Name  of the secret object with the Aws data to allow send the
          backup files to the AWS storage
        displayName: AWS Secret Name
        path: awsSecretName
      - description: Will be as "OK when all objects are created successfully
        displayName: Backup Status
        path: backupStatus
      - description: Name of the CronJob object created and managed by it to schedule
          the backup job
        displayName: CronJob Name
        path: cronJobName
      - description: Status of the CronJob object
        displayName: v1beta1.CronJobStatus
        path: cronJobStatus
      - description: It will be as "OK when all objects are created successfully
        displayName: Database Status
        path: databaseStatus
      - description: Name of the secret object created with the database data to allow
          the backup image connect to the database
        displayName: Database Secret Name
        path: dbSecretName
      - description: Status of the Database Deployment created and managed by it
        displayName: appsv1.DeploymentStatus
        path: deploymentStatus
      - description: Name  of the secret object with the Encryption GPG Key
        displayName: Encryption GPG Secret Name
        path: encryptKeySecretName
      - description: Namespace of the secret object with the Encryption GPG Key
        displayName: Encryption GPG Secret Namespace
        path: encryptKeySecretNamespace
      - description: Boolean value which has true when it has an EncryptionKey to
          be used to send the backup files
        displayName: Is Encryption GPG Key configure?
        path: hasEncryptKey
      - description: Boolean value which has true when the Database Pod was found
          in order to create the secret with the database data to allow the backup
          image connect into it.
        displayName: Is the Database Pod found?
        path: isDatabasePodFound
      - description: Boolean value which has true when the Service Database Pod was
          found in order to create the secret with the database data to allow the
          backup image connect into it.
        displayName: Is the Database Service found?
        path: isDatabaseServiceFound
      - description: Name of the PersistentVolumeClaim created and managed by it
        displayName: v1.PersistentVolumeClaimStatus
        path: pvcStatus
      - description: Status of the Database Service created and managed by it
        displayName: v1.ServiceStatus
        path: serviceStatus
      version: v1alpha1
    - description: Database is the Schema for the the Database Database API
      displayName: Database Database
      kind: Database
      name: databases.postgresql.dev4devs.com
      resources:
      - kind: Deployment
        name: A Kubernetes Deployment
        version: v1
      - kind: PersistentVolumeClaim
        name: A Kubernetes PersistentVolumeClaim
        version: v1
      - kind: Service
        name: A Kubernetes Service
        version: v1
      specDescriptors:
      - description: 'Key ID of AWS S3 storage. Default Value: nil Required to create
          the Secret with the data to allow send the backup files to AWS S3 storage.'
        displayName: AWS S3 accessKey/token ID
        path: awsAccessKeyId
      - description: 'Name of AWS S3 storage. Default Value: nil Required to create
          the Secret with the AWS data to allow send the backup files to AWS S3 storage.'
        displayName: AWS S3 Bucket name
        path: awsS3BucketName
      - description: 'Secret/Token of AWS S3 storage. Default Value: nil Required
          to create the Secret with the data to allow send the backup files to AWS
          S3 storage.'
        displayName: AWS S3 accessKey/token
        path: awsSecretAccessKey
      - description: 'Name of the secret with the AWS data credentials pre-existing
          in the cluster Default Value: nil See here the template: https://github.com/integr8ly/backup-container-image/blob/master/templates/openshift/sample-config/s3-secret.yaml'
        displayName: 'AWS Secret name:'
        path: awsSecretName
      - description: 'Namespace of the secret with the AWS data credentials pre-existing
          in the cluster Default Value: nil NOTE: If the namespace be not informed
          then the operator will try to find it in the same namespace where it is
          applied'
        displayName: 'AWS Secret namespace:'
        path: awsSecretNamespace
      - description: 'Name of the configMap key where the operator should looking
          for the value for the database name for its env var Default value: nil'
        displayName: ConfigMap Database Key
        path: configMapDatabaseNameKey
      - description: 'Name of the configMap key where the operator should looking
          for the value for the database user for its env var Default value: nil'
        displayName: ConfigMap Password Key
        path: configMapDatabasePasswordKey
      - description: 'Name of the configMap key where the operator should looking
          for the value for the database password for its env var Default value: nil'
        displayName: ConfigMap User Key
        path: configMapDatabaseUserKey
      - description: 'Name of the ConfigMap where the operator should looking for
          the EnvVars keys and/or values only Default value: nil'
        displayName: ConfigMap name
        path: configMapName
      - description: 'Policy definition to pull the Database Image More info: https://kubernetes.io/docs/concepts/containers/images/
          Default value:'
        displayName: Container Image Pull Policy
        path: containerImagePullPolicy
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:imagePullPolicy
      - description: 'Name of the Database CR applied which this backup will work
          with Default Value: "database"'
        displayName: Name of Database CR
        path: databaseCRName
      - description: 'CPU resource request which will be available for the database
          container Default value: 10Mi'
        displayName: Database CPU
        path: databaseCpu
      - description: 'Limit of CPU request which will be available for the database
          container Default value: 20Mi'
        displayName: Database CPU Limit
        path: databaseCpuLimit
      - description: 'Limit of Memory which will be available for the database container
          Default value: 512Mi'
        displayName: Database Memory Limit
        path: databaseMemoryLimit
      - description: 'Limit of Memory Request which will be available for the database
          container Default value: 128Mi'
        displayName: Database Memory Request
        path: databaseMemoryRequest
      - description: 'Value for the Database Environment Variable (spec.databaseNameKeyEnvVar).
          Default value: example'
        displayName: Database Name
        path: databaseName
      - description: 'Key Value for the Database Environment Variable in order to
          inform the database mame Note that each database version/image can expected
          a different value for it. Default value: nil'
        displayName: EnvVar Key (Database Name)
        path: databaseNameKeyEnvVar
      - description: 'Value for the Database Environment Variable (spec.databasePasswordKeyEnvVar).
          Default value: postgres'
        displayName: Database Password
        path: databasePassword
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:password
      - description: 'Key Value for the Database Environment Variable in order to
          inform the database password Note that each database version/image can expected
          a different value for it. Default value: nil'
        displayName: EnvVar Key (Database Password)
        path: databasePasswordKeyEnvVar
      - description: 'Limit of Storage Request which will be available for the database
          container Default value: 1Gi'
        displayName: Database Storage Request
        path: databaseStorageRequest
      - description: 'Value for the Database Environment Variable (spec.databaseUserKeyEnvVar).
          Default value: postgres'
        displayName: Database User
        path: databaseUser
      - description: 'Key Value for the Database Environment Variable in order to
          inform the database user Note that each database version/image can expected
          a different value for it. Default value: nil'
        displayName: EnvVar Key (Database User)
        path: databaseUserKeyEnvVar
      - description: 'Database version. (E.g 9.6). Default Value: <9.6> IMPORTANT:
          Just the first 2 digits should be used.'
        displayName: Databaseversion
        path: databaseVersion
      - description: 'Name of the secret with the Encrypt data pre-existing in the
          cluster Default Value: nil See here the template: https://github.com/integr8ly/backup-container-image/blob/master/templates/openshift/sample-config/gpg-secret.yaml'
        displayName: 'EncryptKey Secret name:'
        path: encryptKeySecretName
      - description: 'Namespace of the secret with the Encrypt data pre-existing in
          the cluster Default Value: nil NOTE: If the namespace be not informed then
          the operator will try to find it in the same namespace where it is applied'
        displayName: 'EncryptKey Secret namespace:'
        path: encryptKeySecretNamespace
      - description: 'GPG email to create the EncryptionKeySecret with this data Default
          Value: nil See here how to create this key : https://help.github.com/en/articles/generating-a-new-gpg-key'
        displayName: 'Gpg public email:'
        path: gpgEmail
      - description: 'GPG public key to create the EncryptionKeySecret with this data
          Default Value: nil See here how to create this key : https://help.github.com/en/articles/generating-a-new-gpg-key'
        displayName: 'Gpg public key:'
        path: gpgPublicKey
      - description: 'GPG trust model to create the EncryptionKeySecret with this
          data. the default value is true when it is empty. Default Value: nil See
          here how to create this key : https://help.github.com/en/articles/generating-a-new-gpg-key'
        displayName: 'Gpg trust model:'
        path: gpgTrustModel
      - description: 'Database image:tag Default value: centos/postgresql-96-centos7'
        displayName: Image:tag
        path: image
      - description: 'Image:tag used to do the backup. Default Value: <quay.io/integreatly/backup-container:1.0.8>
          More Info: https://github.com/integr8ly/backup-container-image'
        displayName: Image:tag
        path: image
      - description: 'Used to create the directory where the files will be stored
          Default Value: <postgresql>'
        displayName: AWS tag name
        path: productName
      - description: 'Schedule period for the CronJob. Default Value: <0 0 * * *>
          daily at 00:00'
        displayName: Schedule
        path: schedule
      - description: 'Quantity of instances Default value: 1'
        displayName: Size
        path: size
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:podCount
      statusDescriptors:
      - description: Namespace  of the secret object with the Aws data to allow send
          the backup files to the AWS storage
        displayName: AWS Secret Namespace
        path: awsCredentialsSecretNamespace
      - description: Name  of the secret object with the Aws data to allow send the
          backup files to the AWS storage
        displayName: AWS Secret Name
        path: awsSecretName
      - description: Will be as "OK when all objects are created successfully
        displayName: Backup Status
        path: backupStatus
      - description: Name of the CronJob object created and managed by it to schedule
          the backup job
        displayName: CronJob Name
        path: cronJobName
      - description: Status of the CronJob object
        displayName: v1beta1.CronJobStatus
        path: cronJobStatus
      - description: It will be as "OK when all objects are created successfully
        displayName: Database Status
        path: databaseStatus
      - description: Name of the secret object created with the database data to allow
          the backup image connect to the database
        displayName: Database Secret Name
        path: dbSecretName
      - description: Status of the Database Deployment created and managed by it
        displayName: appsv1.DeploymentStatus
        path: deploymentStatus
      - description: Name  of the secret object with the Encryption GPG Key
        displayName: Encryption GPG Secret Name
        path: encryptKeySecretName
      - description: Namespace of the secret object with the Encryption GPG Key
        displayName: Encryption GPG Secret Namespace
        path: encryptKeySecretNamespace
      - description: Boolean value which has true when it has an EncryptionKey to
          be used to send the backup files
        displayName: Is Encryption GPG Key configure?
        path: hasEncryptKey
      - description: Boolean value which has true when the Database Pod was found
          in order to create the secret with the database data to allow the backup
          image connect into it.
        displayName: Is the Database Pod found?
        path: isDatabasePodFound
      - description: Boolean value which has true when the Service Database Pod was
          found in order to create the secret with the database data to allow the
          backup image connect into it.
        displayName: Is the Database Service found?
        path: isDatabaseServiceFound
      - description: Name of the PersistentVolumeClaim created and managed by it
        displayName: v1.PersistentVolumeClaimStatus
        path: pvcStatus
      - description: Status of the Database Service created and managed by it
        displayName: v1.ServiceStatus
        path: serviceStatus
      version: v1alpha1
  description: |-
    A very flexible and customizable Operator in Go developed using the Operator Framework to package, install, configure and manage a PostgreSQL database. Also, the usage of this operator offers:
    * Backup your data and sent it to a AWS Storage
    * Usage of encryption to send the data
    * Customization of the image and version of your PostgreSQL
    * Customization of the enviroment variables keys and values which should be used with
    * Allow you setup the operator to get the values required for its enviroment variables (user, password and database name) in an ConfigMap applied in the cluster already.
    *NOTE: It is very useful to centralize and share this information accross the cluster for your solutions. Also, you are able to configure each configMap keys that contains each EnvVar* required for the PostgreSQL database image.
    * To configure AWS Storage to sent the Backup data you are able to inform the data required or inform the secret which has this information and is applied in the cluster already
    * To configure encryption feature in the Backup you are able to inform the data required or inform the secret which has this information and is applied in the cluster already
    * Allow you customize the resources and their limmits (Memory, CPU and Storage)
  displayName: PostgreSQL Operator by Dev4Ddevs.com
  icon:
  - base64data: 
    mediatype: image/png
  install:
    spec:
      clusterPermissions:
      - rules:
        - apiGroups:
          - '*'
          resources:
          - '*'
          verbs:
          - get
          - list
        - apiGroups:
          - ""
          resources:
          - pods/exec
          verbs:
          - create
        - apiGroups:
          - ""
          resources:
          - deployments
          - daemonsets
          - replicasets
          - statefulsets
          - serviceaccounts
          - rolebindings
          - pods
          - services
          - service/finalizers
          - endpoints
          - persistentvolumeclaims
          - events
          - configmaps
          - secrets
          verbs:
          - '*'
        - apiGroups:
          - batch
          resources:
          - cronjobs
          verbs:
          - get
          - list
          - watch
          - create
          - update
          - patch
          - delete
        - apiGroups:
          - apps
          resources:
          - deployments
          - daemonsets
          - replicasets
          - statefulsets
          verbs:
          - '*'
        - apiGroups:
          - monitoring.coreos.com
          resources:
          - servicemonitors
          verbs:
          - get
          - create
        - apiGroups:
          - apps
          resourceNames:
          - postgresql-operator
          - postgresql
          - backup
          resources:
          - deployments/finalizers
          verbs:
          - update
        - apiGroups:
          - ""
          resources:
          - pods
          verbs:
          - get
        - apiGroups:
          - apps
          resources:
          - replicasets
          verbs:
          - get
        - apiGroups:
          - postgresql-operator.dev4devs.com
          resources:
          - '*'
          - backups
          verbs:
          - '*'
        - apiGroups:
          - postgresql.dev4devs.com
          resources:
          - '*'
          - backups
          verbs:
          - '*'
        serviceAccountName: postgresql-operator
      deployments:
      - name: postgresql-operator
        spec:
          replicas: 1
          selector:
            matchLabels:
              name: postgresql-operator
          strategy: {}
          template:
            metadata:
              labels:
                name: postgresql-operator
            spec:
              containers:
              - command:
                - postgresql-operator
                env:
                - name: WATCH_NAMESPACE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.annotations['olm.targetNamespaces']
                - name: POD_NAME
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.name
                - name: OPERATOR_NAME
                  value: postgresql-operator
                image: quay.io/dev4devs-com/postgresql-operator:0.1.1
                imagePullPolicy: Always
                name: postgresql-operator
                resources:
                  limits:
                    cpu: 60m
                    memory: 128Mi
                  requests:
                    cpu: 30m
                    memory: 64Mi
              serviceAccountName: postgresql-operator
    strategy: deployment
  installModes:
  - supported: true
    type: OwnNamespace
  - supported: true
    type: SingleNamespace
  - supported: false
    type: MultiNamespace
  - supported: false
    type: AllNamespaces
  keywords:
  - postgresql
  - postgre
  - database
  - backup
  - PostgreSQL
  - dev4Devs-com
  - backup
  labels:
    operated-by: postgresql-operator
  links:
  - name: Documentation
    url: https://github.com/dev4devs-com/postgresql-operator/blob/master/README.adoc
  - name: Source
    url: https://github.com/dev4devs-com/postgresql-operator
  - name: https://www.dev4devs.com/
    url: https://www.dev4devs.com/
  maintainers:
  - email: dev4devs.com@gmail.com
    name: Dev4Devs.com
  maturity: alpha
  minKubeVersion: 1.11.3
  provider:
    name: Dev4Devs.com
  version: 0.1.1
