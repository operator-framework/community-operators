
apiVersion: console.openshift.io/v1
kind: ConsoleQuickStart
metadata:
  name: rhosak-devsandbox-getting-started-quickstart
spec:
  displayName: Getting Started with Red Hat OpenShift Streams for Apache Kafka
  tags:
    - streams
    - kafka
  durationMinutes: 10
  description: Learn how to set up your first Apache Kafka instance in Red Hat OpenShift Streams for Apache Kafka.
  prerequisites:
    - A Red Hat identity
    - You're logged in to the Application Services web console at https://cloud.redhat.com/beta/application-services.
  introduction: >-
    Welcome to the Red Hat OpenShift Streams for Apache Kafka Getting Started quick start. 
    In this quick start, you'll learn how to create and inspect a Kafka instance, create a service account to connect an application or service to the instance, and create a topic in the instance.
  tasks:
    - title: Inspecting a Kafka instance in Streams for Apache Kafka
      description: >-
        Use the [Streams for Apache Kafka web console](https://cloud.redhat.com/beta/application-services/streams) to create and configure a Kafka instance for your applications or services.


        To access Streams for Apache Kafka, you need to be logged in with a Red Hat identity. If you do not have a Red Hat identity, you can create one by following the link on the login screen.


        A Kafka instance in Streams for Apache Kafka includes a Kafka cluster, bootstrap server, and the configurations needed to connect to producer and consumer services.

        1. In the [web console of Application Services](https://cloud.redhat.com/beta/application-services), select **Kafka Instances** in the **Streams for Apache kafka** menu. Click *Create Kafka instance*.

        1. Enter a unique *Instance name*, such as `my-first-kafka-instance`. For this release of Streams for Apache Kafka, all other fields are preconfigured.

        1. Click *Create instance* to start the creation process for your Kafka instance.


        The new Kafka instance is listed in the instances table. When the instance *Status* is *Ready*, you can start using the Kafka instance. You can use the options icon (three vertical dots) to view, connect to, or delete the instance as needed.


        NOTE: Although you can see Kafka instances created by other users in your organization, you can't manage or connect to those instances. Only the user who creates an instance can edit or delete the instance, access the associated service account and topics, or connect to the instance.

      review:
        instructions: |-
          Is the new Kafka instance listed in the instances table?

          Is the state of the new Kafka instance shown as **Ready**?
        failedTaskHelp: This task isn’t verified yet. Try the task again.
      summary:
        success: >-
          You have completed this task!
        failed: Try the steps again.
    - title: Creating a service account to connect to a Kafka instance in Streams for Apache Kafka
      description: >-
        To connect your applications or services to a Kafka instance in the Streams for Apache Kafka web console, 
        you need to create a service account, copy and save the generated credentials, and copy and save the bootstrap server endpoint. 
        You’ll use the service account information later when you configure your application.

        1. In the **Kafka Instances** page of the web console, for the relevant Kafka instance that you want to connect to, 
        select the options icon (three vertical dots) and click **View connection information**.

        1. In the **Connection** page, copy the **Bootstrap server** endpoint to a secure location. 
        This is the bootstrap server endpoint that you'll need for connecting to this Kafka instance.

        1. Click **Create service account** to generate the credentials that you'll use to connect to this Kafka instance. 
        Provide a name, for example `my-service-account`. You can leave the description field empty. Click **Create**.

        1. Copy the generated **Client ID** and **Client Secret** to a secure location.

            IMPORTANT: The generated credentials are displayed only one time, 
            so ensure that you have successfully and securely saved the copied credentials before closing the credentials window.

        1. After you save the generated credentials to a secure location, select the confirmation check box in the credentials window and close the window.

            You'll use the boostrap server and service account information that you saved to configure your application to connect to your Kafka instances when you're ready. 
            For example, if you plan to use [Kafkacat](https://github.com/edenhill/kafkacat) to interact with your Kafka instance, 
            you'll use this information to set your bootstrap server and client environment variables.
      review:
        instructions: |-
          Did you save the bootstrap server endpoint to a secure location?

          Did you save the client credentials to a secure location?
        failedTaskHelp: This task isn’t verified yet. Try the task again.
      summary:
        success: >-
          You have completed this task!
        failed: Try the steps again.
    - title: Creating a Kafka topic in Streams for Apache Kafka
      description: >-
        When you have a Kafka instance available, you can create Kafka topics to start producing and consuming messages in your services.

        1. In the **Kafka Instances** page of the web console, click on the name of the Kafka instance that you want to add a topic to.

        1. Click **Create topic** and follow the guided steps to define the topic details. 
        Click **Next** to complete each step and click **Finish** to complete the setup.

            **Topic name**: Enter a unique topic name, such as ```my-first-kafka-topic```.

            **Partitions**: Set the number of partitions for this topic. This example sets the partition to ```1``` for a single partition. 
            Partitions are distinct lists of messages within a topic and enable parts of a topic to be distributed over multiple brokers in the cluster. 
            A topic can contain one or more partitions, enabling producer and consumer loads to be scaled.

            NOTE: You can increase the number of partitions later, but you cannot decrease them.

            **Message retention**: Set the message retention time to the relevant value and increment. 
            This example sets the retention to ```1 day```. 
            Keep the **Retention size** set to ```Unlimited``` (the default).
            Message retention time is the amount of time that messages are retained in a topic before they are deleted or compacted, depending on the cleanup policy.


            **Replicas**: Set the number of partition replicas for the topic and the minimum number of follower replicas that must be in sync with a partition leader. 
            In the current version of Streams for Apache Kafka the values are fixed and set to ```3``` for the number of replicas and ```2``` for the in-sync replicas. 
            Replicas are copies of partitions in a topic. 
            Partition replicas are distributed over multiple brokers in the cluster to ensure topic availability if a broker fails. 
            When a follower replica is in sync with a partition leader, the follower replica can become the new partition leader if needed.

        After you complete the topic setup, the new Kafka topic is listed in the topics table. 
        You can now start producing and consuming messages to and from this topic using services that you connect to this instance.
      review:
        instructions: |-
          Is the new Kafka topic listed in the topics table?
        failedTaskHelp: This task isn’t verified yet. Try the task again.
      summary:
        success: >-
          You have completed this task!
        failed: Try the steps again.
  conclusion: >-
    Congratulations! You successfully completed the Red Hat OpenShift Streams for Apache Kafka Getting Started quick start, 
    and are now ready to use the service.
  nextQuickStart:
    - rhosak-devsandbox-kafkacat-toolscontainer-quickstart