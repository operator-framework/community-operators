apiVersion: operators.coreos.com/v1alpha1
kind: ClusterServiceVersion
metadata:
  annotations:
    alm-examples: |-
      [{
        "apiVersion": "yaks.citrusframework.org/v1alpha1",
        "kind": "Test",
        "metadata": {
          "name": "example"
        },
        "spec": {
          "source": {
            "name":"example.feature",
            "content": "Feature: hello world\n  Scenario: print slogan\n    Given YAKS does Cloud-Native BDD testing\n    Then YAKS rocks!\n"
          }
        }
      }]
    capabilities: Full Lifecycle
    categories: Integration & Delivery
    certified: "false"
    containerImage: docker.io/citrusframework/yaks:0.1.0
    createdAt: "2020-09-25T02:45:00Z"
    description: YAKS is a platform to enable Cloud Native BDD testing on Kubernetes.
    repository: https://github.com/citrusframework/yaks
    support: Citrus Framework
  name: yaks-operator.v0.1.0
  namespace: placeholder
spec:
  apiservicedefinitions: {}
  customresourcedefinitions:
    owned:
    - description: A YAKS test
      displayName: Test
      kind: Test
      name: tests.yaks.citrusframework.org
      specDescriptors:
      - description: The test source
        displayName: Source
        path: source
      - description: The name of the test source
        displayName: Name
        path: source.name
      - description: The language of the test source
        displayName: Language
        path: source.language
      - description: The content of the test source
        displayName: Content
        path: source.content
      statusDescriptors:
      - description: The phase that the test is currently in
        displayName: Phase
        path: phase
      - description: The test results
        displayName: Test Results
        path: results
      - description: The unique ID of the test
        displayName: Test ID
        path: testID
      - description: The version of YAKS which ran the test
        displayName: Version
        path: version
      version: v1alpha1
  description: |
    YAKS
    ====

    YAKS is a platform to enable Cloud Native BDD testing on Kubernetes.

    ## Running a YAKS test

    With the YAKS operator installed, you can run tests by creating a `Test` custom resource on the cluster.

    Tests are defined using [Gherkin](https://cucumber.io/docs/gherkin/) syntax. YAKS provides a set of predefined steps which
    help to connect with different messaging transports (Http REST, JMS, Kafka, Knative eventing) and verify responses with
    assertions on message header and body content.

    The example below defines a simple test resource.

    ```
    apiVersion: yaks.citrusframework.org/v1alpha1
    kind: Test
    metadata:
      name: example
    spec:
      source:
        name: example.feature
        content: |-
          Feature: hello world

            Scenario: print slogan
              Given YAKS does Cloud-Native BDD testing
              Then YAKS rocks!
    ```

    Refer to the [YAKS repository](https://github.com/citrusframework/yaks) for more complex examples.
  displayName: YAKS Operator
  icon:
  - base64data: PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+CjwhLS0gQ3JlYXRlZCB3aXRoIElua3NjYXBlIChodHRwOi8vd3d3Lmlua3NjYXBlLm9yZy8pIC0tPgoKPHN2ZwogICB4bWxuczpkYz0iaHR0cDovL3B1cmwub3JnL2RjL2VsZW1lbnRzLzEuMS8iCiAgIHhtbG5zOmNjPSJodHRwOi8vY3JlYXRpdmVjb21tb25zLm9yZy9ucyMiCiAgIHhtbG5zOnJkZj0iaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zIyIKICAgeG1sbnM6c3ZnPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIKICAgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIgogICB4bWxuczpzb2RpcG9kaT0iaHR0cDovL3NvZGlwb2RpLnNvdXJjZWZvcmdlLm5ldC9EVEQvc29kaXBvZGktMC5kdGQiCiAgIHhtbG5zOmlua3NjYXBlPSJodHRwOi8vd3d3Lmlua3NjYXBlLm9yZy9uYW1lc3BhY2VzL2lua3NjYXBlIgogICB3aWR0aD0iNDkuMDcwNDkybW0iCiAgIGhlaWdodD0iNDcuNTEyNDYzbW0iCiAgIHZpZXdCb3g9IjAgMCA0OS4wNzA0OTIgNDcuNTEyNDYzIgogICB2ZXJzaW9uPSIxLjEiCiAgIGlkPSJzdmc4IgogICBpbmtzY2FwZTp2ZXJzaW9uPSIwLjkyLjIgNWMzZTgwZCwgMjAxNy0wOC0wNiIKICAgc29kaXBvZGk6ZG9jbmFtZT0ibG9nby5zdmciCiAgIGlua3NjYXBlOmV4cG9ydC14ZHBpPSIzNjguNjMiCiAgIGlua3NjYXBlOmV4cG9ydC15ZHBpPSIzNjguNjMiPgogIDxkZWZzCiAgICAgaWQ9ImRlZnMyIiAvPgogIDxzb2RpcG9kaTpuYW1lZHZpZXcKICAgICBpZD0iYmFzZSIKICAgICBwYWdlY29sb3I9IiNmZmZmZmYiCiAgICAgYm9yZGVyY29sb3I9IiM2NjY2NjYiCiAgICAgYm9yZGVyb3BhY2l0eT0iMS4wIgogICAgIGlua3NjYXBlOnBhZ2VvcGFjaXR5PSIwLjAiCiAgICAgaW5rc2NhcGU6cGFnZXNoYWRvdz0iMiIKICAgICBpbmtzY2FwZTp6b29tPSI0LjQxMDQyMTYiCiAgICAgaW5rc2NhcGU6Y3g9IjkyLjczMTY0MSIKICAgICBpbmtzY2FwZTpjeT0iODkuNzg3MzI4IgogICAgIGlua3NjYXBlOmRvY3VtZW50LXVuaXRzPSJtbSIKICAgICBpbmtzY2FwZTpjdXJyZW50LWxheWVyPSJnODc0IgogICAgIHNob3dncmlkPSJmYWxzZSIKICAgICBpbmtzY2FwZTp3aW5kb3ctd2lkdGg9IjE2ODAiCiAgICAgaW5rc2NhcGU6d2luZG93LWhlaWdodD0iMTAwNSIKICAgICBpbmtzY2FwZTp3aW5kb3cteD0iMjU2MCIKICAgICBpbmtzY2FwZTp3aW5kb3cteT0iMTk0IgogICAgIGlua3NjYXBlOndpbmRvdy1tYXhpbWl6ZWQ9IjEiIC8+CiAgPG1ldGFkYXRhCiAgICAgaWQ9Im1ldGFkYXRhNSI+CiAgICA8cmRmOlJERj4KICAgICAgPGNjOldvcmsKICAgICAgICAgcmRmOmFib3V0PSIiPgogICAgICAgIDxkYzpmb3JtYXQ+aW1hZ2Uvc3ZnK3htbDwvZGM6Zm9ybWF0PgogICAgICAgIDxkYzp0eXBlCiAgICAgICAgICAgcmRmOnJlc291cmNlPSJodHRwOi8vcHVybC5vcmcvZGMvZGNtaXR5cGUvU3RpbGxJbWFnZSIgLz4KICAgICAgICA8ZGM6dGl0bGUgLz4KICAgICAgPC9jYzpXb3JrPgogICAgPC9yZGY6UkRGPgogIDwvbWV0YWRhdGE+CiAgPGcKICAgICBpbmtzY2FwZTpsYWJlbD0iTGF5ZXIgMSIKICAgICBpbmtzY2FwZTpncm91cG1vZGU9ImxheWVyIgogICAgIGlkPSJsYXllcjEiCiAgICAgdHJhbnNmb3JtPSJ0cmFuc2xhdGUoLTM3LjIzMDI1NCwtOTcuNjQwODEzKSI+CiAgICA8ZwogICAgICAgaWQ9Imc4NzQiCiAgICAgICB0cmFuc2Zvcm09Im1hdHJpeCgwLjUzNDQ2OTMsMCwwLDAuNTM0NDY5MywzOS4zMzE2MzcsOTguMjczNjY4KSI+CiAgICAgIDxwYXRoCiAgICAgICAgIHN0eWxlPSJmaWxsOiMwMDkxMDA7ZmlsbC1vcGFjaXR5OjE7c3Ryb2tlOiM4Y2Q0OTA7c3Ryb2tlLXdpZHRoOjQuMzY2OTQ4NjtzdHJva2UtbWl0ZXJsaW1pdDo0O3N0cm9rZS1kYXNoYXJyYXk6bm9uZTtzdHJva2Utb3BhY2l0eToxIgogICAgICAgICBpZD0icGF0aDEwMzQ5IgogICAgICAgICBkPSJtIDc4LjA0NzIwOCwxOS44MDAxMzEgYyAtMC41LC0xLjYgLTEuNywtMi45IC0zLjIsLTMuNyBsIC0zMC41LC0xNC42MDAwMDA1IGMgLTAuOCwtMC40IC0xLjcsLTAuNSAtMi41LC0wLjUgLTAuOCwwIC0xLjcsMCAtMi41LDAuMiBMIDguODQ3MjA3NiwxNS45MDAxMzEgYyAtMS41MDAwMDAyLDAuNyAtMi42MDAwMDAyLDIgLTMuMDAwMDAwMiwzLjcgbCAtNy41LDMyLjkgYyAtMC4zLDEuNyAwLjEsMy40IDEuMSw0LjggbCAyMS4xMDAwMDA2LDI2LjEgYyAxLjIsMS4yIDIuOSwyIDQuNiwyLjEgaCAzMy42IGMgMS44LDAuMiAzLjUsLTAuNiA0LjYsLTIuMSBsIDIxLjEsLTI2LjEgYyAxLC0xLjQgMS40LC0zLjEgMS4yLC00LjggeiIKICAgICAgICAgaW5rc2NhcGU6Y29ubmVjdG9yLWN1cnZhdHVyZT0iMCIgLz4KICAgICAgPHBhdGgKICAgICAgICAgc3R5bGU9ImZpbGw6IzkyZmE5MTtmaWxsLW9wYWNpdHk6MTtzdHJva2U6IzMwYjAzOTtzdHJva2Utd2lkdGg6MC41NjEzMDQ0NTtzdHJva2UtbGluZWNhcDpidXR0O3N0cm9rZS1saW5lam9pbjptaXRlcjtzdHJva2UtbWl0ZXJsaW1pdDo0O3N0cm9rZS1kYXNoYXJyYXk6bm9uZTtzdHJva2Utb3BhY2l0eToxIgogICAgICAgICBkPSJtIDMyLjc5Nzk2LDExLjk5MzQ4NCBjIDEuMjgwMzM1LDYuNTAzMTc2IDguOTA1NTQ2LDI0LjAyMDE5NiA4LjgzNjEzNCwyOC4yMjQ3MjkgNC4yMDY4NTUsLTkuNjMzNTY2IDUuNjYyOTUzLC0xOS43MzExMDcgNS40MTI5NzksLTI4LjMzOTMzOCBDIDQxLjcwMDE3Nyw3Ljc5OTg2OTcgMzYuMDUzODU1LDguNzg1MDU2NyAzMi43OTc5NiwxMS45OTM0ODQgWiIKICAgICAgICAgaWQ9InBhdGg4OTUiCiAgICAgICAgIGlua3NjYXBlOmNvbm5lY3Rvci1jdXJ2YXR1cmU9IjAiCiAgICAgICAgIHNvZGlwb2RpOm5vZGV0eXBlcz0iY2NjYyIgLz4KICAgICAgPHBhdGgKICAgICAgICAgc3R5bGU9ImZpbGw6IzkyZmE5MTtmaWxsLW9wYWNpdHk6MTtzdHJva2U6IzMwYjAzOTtzdHJva2Utd2lkdGg6MC41NjEzMDQ0NTtzdHJva2UtbGluZWNhcDpidXR0O3N0cm9rZS1saW5lam9pbjptaXRlcjtzdHJva2UtbWl0ZXJsaW1pdDo0O3N0cm9rZS1kYXNoYXJyYXk6bm9uZTtzdHJva2Utb3BhY2l0eToxIgogICAgICAgICBkPSJtIDguODgyMjE0LDQxLjk0OTQ0IGMgNC45NTY5NTIsMS42NDI0NCAxNy43Njg4LDAuNTg0NjMyIDI3LjA5MzAyNCwyLjIzMDA4MyBDIDMxLjEyMzExNSwzNy4wODE1ODMgMjMuMjg2MzUyLDMxLjY3MzE2MSAxMi4yMTk3ODYsMjYuMjEzNzM1IDcuMDQyMjIyLDI4Ljg4NDE1NiA2Ljk0ODg3MjcsMzYuODgzMjk4IDguODgyMjE0LDQxLjk0OTQ0IFoiCiAgICAgICAgIGlkPSJwYXRoODk1LTMiCiAgICAgICAgIGlua3NjYXBlOmNvbm5lY3Rvci1jdXJ2YXR1cmU9IjAiCiAgICAgICAgIHNvZGlwb2RpOm5vZGV0eXBlcz0iY2NjYyIKICAgICAgICAgaW5rc2NhcGU6dHJhbnNmb3JtLWNlbnRlci14PSIwLjg5NjEzOTQyIgogICAgICAgICBpbmtzY2FwZTp0cmFuc2Zvcm0tY2VudGVyLXk9Ii0wLjY4NjM0NzUzIiAvPgogICAgICA8cGF0aAogICAgICAgICBzdHlsZT0iZmlsbDojOTJmYTkxO2ZpbGwtb3BhY2l0eToxO3N0cm9rZTojMzBiMDM5O3N0cm9rZS13aWR0aDowLjU2MTMwNDQ1O3N0cm9rZS1saW5lY2FwOmJ1dHQ7c3Ryb2tlLWxpbmVqb2luOm1pdGVyO3N0cm9rZS1taXRlcmxpbWl0OjQ7c3Ryb2tlLWRhc2hhcnJheTpub25lO3N0cm9rZS1vcGFjaXR5OjEiCiAgICAgICAgIGQ9Ik0gMTQuNjQ1MjQyLDYzLjgwNDAzMiBDIDM1LjE3NTAyOCw1MS4zMjY0ODQgMzYuNTc2Njk4LDQ3LjI0MTA3NyAzNi41NzY2OTgsNDcuMjQxMDc3IDI4LjY2MzAzMiw0OS4xMzQzMjQgOC44ODIyMTQsNDEuOTQ5NDQgNS43NDU1NjE2LDQ5Ljk2NDYyMyA2LjEyMjY2NzMsNTMuOTU5NDU2IDguMzY1NTk0Myw2Mi4yNDI4MzEgMTQuNjQ1MjQyLDYzLjgwNDAzMiBaIgogICAgICAgICBpZD0icGF0aDg5NS0zLTYiCiAgICAgICAgIGlua3NjYXBlOmNvbm5lY3Rvci1jdXJ2YXR1cmU9IjAiCiAgICAgICAgIHNvZGlwb2RpOm5vZGV0eXBlcz0iY2NjYyIKICAgICAgICAgaW5rc2NhcGU6dHJhbnNmb3JtLWNlbnRlci14PSIwLjk0MTE4MTU2IgogICAgICAgICBpbmtzY2FwZTp0cmFuc2Zvcm0tY2VudGVyLXk9IjIuMDU1MDM4OCIgLz4KICAgICAgPHBhdGgKICAgICAgICAgc3R5bGU9ImZpbGw6IzkyZmE5MTtmaWxsLW9wYWNpdHk6MTtzdHJva2U6IzMwYjAzOTtzdHJva2Utd2lkdGg6MC41NjEzMDQ0NTtzdHJva2UtbGluZWNhcDpidXR0O3N0cm9rZS1saW5lam9pbjptaXRlcjtzdHJva2UtbWl0ZXJsaW1pdDo0O3N0cm9rZS1kYXNoYXJyYXk6bm9uZTtzdHJva2Utb3BhY2l0eToxIgogICAgICAgICBkPSJtIDMxLjk0NDU2Myw3OC4xMjIxOSBjIDYuMzI3NiwtMjMuMTc1OTExIDYuODgwNDMsLTI4LjQ5MzI0NiA2Ljg4MDQzLC0yOC40OTMyNDYgLTQuMzQyNDMyLDguNTcyMjQ4IC0xOS4zOTEzMDksMTEuNjgxMzQgLTIwLjIwOTIwMywyMC41NjkxMzggMy4wMjA1NzUsNC4xNDE1OTIgOC4wOTcyNDcsOS4zNTA1NDQgMTMuMzI4NzczLDcuOTI0MTA4IHoiCiAgICAgICAgIGlkPSJwYXRoODk1LTMtNi03IgogICAgICAgICBpbmtzY2FwZTpjb25uZWN0b3ItY3VydmF0dXJlPSIwIgogICAgICAgICBzb2RpcG9kaTpub2RldHlwZXM9ImNjY2MiCiAgICAgICAgIGlua3NjYXBlOnRyYW5zZm9ybS1jZW50ZXIteD0iMS4yMjM5MDE0IgogICAgICAgICBpbmtzY2FwZTp0cmFuc2Zvcm0tY2VudGVyLXk9IjEuMzc0MDI2OCIgLz4KICAgICAgPHBhdGgKICAgICAgICAgc3R5bGU9ImZpbGw6IzkyZmE5MTtmaWxsLW9wYWNpdHk6MTtzdHJva2U6IzMwYjAzOTtzdHJva2Utd2lkdGg6MC41NjEzMDQ0NTtzdHJva2UtbGluZWNhcDpidXR0O3N0cm9rZS1saW5lam9pbjptaXRlcjtzdHJva2UtbWl0ZXJsaW1pdDo0O3N0cm9rZS1kYXNoYXJyYXk6bm9uZTtzdHJva2Utb3BhY2l0eToxIgogICAgICAgICBkPSJNIDU2LjcyMzQ3NCw3Ni45MDg2ODEgQyA1Ny41NzI2OTEsNzAuNzc2MDUxIDQ3Ljk2NTg2OCw1Ny40NjY4MzkgNDIuMDk5MDQ3LDUwLjM0NDg5IDQwLjU3NTIwNCw2MC45NDA5NTUgMzcuMDYwNzk0LDcxLjcyMzgzNiA0My44MTYzMDMsNzguNzEwOTMyIDQ3Ljc5NDE2NCw3OC4xODQxNTcgNTUuMDkzNDM1LDgwLjUzMDc0IDU2LjcyMzQ3NCw3Ni45MDg2ODEgWiIKICAgICAgICAgaWQ9InBhdGg4OTUtMy02LTctNSIKICAgICAgICAgaW5rc2NhcGU6Y29ubmVjdG9yLWN1cnZhdHVyZT0iMCIKICAgICAgICAgc29kaXBvZGk6bm9kZXR5cGVzPSJjY2NjIgogICAgICAgICBpbmtzY2FwZTp0cmFuc2Zvcm0tY2VudGVyLXg9Ii0yLjA0MjI4NTEiCiAgICAgICAgIGlua3NjYXBlOnRyYW5zZm9ybS1jZW50ZXIteT0iMC45NzIxMDMxNyIgLz4KICAgICAgPHBhdGgKICAgICAgICAgc3R5bGU9ImZpbGw6IzkyZmE5MTtmaWxsLW9wYWNpdHk6MTtzdHJva2U6IzMwYjAzOTtzdHJva2Utd2lkdGg6MC41NjEzMDQ0NTtzdHJva2UtbGluZWNhcDpidXR0O3N0cm9rZS1saW5lam9pbjptaXRlcjtzdHJva2UtbWl0ZXJsaW1pdDo0O3N0cm9rZS1kYXNoYXJyYXk6bm9uZTtzdHJva2Utb3BhY2l0eToxIgogICAgICAgICBkPSJNIDczLjM3MTE1Miw1OC41MTI1OTkgQyA3MS4yNzMzODYsNTQuNDUyOTgzIDQ0LjgxNzA3NSw0OC4yNTI5OTQgNDQuODE3MDc1LDQ4LjI1Mjk5NCBjIDQuMTk3Mzc3LDUuMzU2OTg3IDEzLjQ0NzQzLDIwLjgyOTgwNyAxOS45ODAyNjQsMjMuNTE2MDE4IDIuOTU0MTk0LC0yLjcxNTQ0IDkuNDMwNjgxLC03LjkwMjAzNiA4LjU3MzgxMywtMTMuMjU2NDEzIHoiCiAgICAgICAgIGlkPSJwYXRoODk1LTMtNi03LTUtMyIKICAgICAgICAgaW5rc2NhcGU6Y29ubmVjdG9yLWN1cnZhdHVyZT0iMCIKICAgICAgICAgc29kaXBvZGk6bm9kZXR5cGVzPSJjY2NjIgogICAgICAgICBpbmtzY2FwZTp0cmFuc2Zvcm0tY2VudGVyLXg9Ii0xLjQ4Nzc2ODIiCiAgICAgICAgIGlua3NjYXBlOnRyYW5zZm9ybS1jZW50ZXIteT0iMS4yNDgwMzM3IiAvPgogICAgICA8cGF0aAogICAgICAgICBzdHlsZT0iZmlsbDojOTJmYTkxO2ZpbGwtb3BhY2l0eToxO3N0cm9rZTojMzBiMDM5O3N0cm9rZS13aWR0aDowLjU2MTMwNDQ1O3N0cm9rZS1saW5lY2FwOmJ1dHQ7c3Ryb2tlLWxpbmVqb2luOm1pdGVyO3N0cm9rZS1taXRlcmxpbWl0OjQ7c3Ryb2tlLWRhc2hhcnJheTpub25lO3N0cm9rZS1vcGFjaXR5OjEiCiAgICAgICAgIGQ9Im0gNzIuMTEzNzc0LDM2LjcyOTA0IGMgLTExLjk0NDU5OSwxLjg3NjU2MSAtMjUuODIwOTc3LDguODM3MDgxIC0yNS44MjA5NzcsOC44MzcwODEgNy41NTk3NzYsMS4wMTk3MDcgMjEuNzc4ODI2LDkuMDEyMTA1IDI5LjgzNTAxMiw2LjczODE0NCAwLjQ3MjA5OCwtMy45ODQ3MiAwLjExOTMwNSwtMTIuMDY1Mzc3IC00LjAxNDAzNSwtMTUuNTc1MjI1IHoiCiAgICAgICAgIGlkPSJwYXRoODk1LTMtNi03LTUtMy01IgogICAgICAgICBpbmtzY2FwZTpjb25uZWN0b3ItY3VydmF0dXJlPSIwIgogICAgICAgICBzb2RpcG9kaTpub2RldHlwZXM9ImNjY2MiCiAgICAgICAgIGlua3NjYXBlOnRyYW5zZm9ybS1jZW50ZXIteD0iLTAuOTA2MzE3MzciCiAgICAgICAgIGlua3NjYXBlOnRyYW5zZm9ybS1jZW50ZXIteT0iLTEuNjg4NTU4NyIgLz4KICAgICAgPHBhdGgKICAgICAgICAgc3R5bGU9ImZpbGw6IzkyZmE5MTtmaWxsLW9wYWNpdHk6MTtzdHJva2U6IzMwYjAzOTtzdHJva2Utd2lkdGg6MC41NjEzMDQ0NTtzdHJva2UtbGluZWNhcDpidXR0O3N0cm9rZS1saW5lam9pbjptaXRlcjtzdHJva2UtbWl0ZXJsaW1pdDo0O3N0cm9rZS1kYXNoYXJyYXk6bm9uZTtzdHJva2Utb3BhY2l0eToxIgogICAgICAgICBkPSJtIDE2Ljg0Njg5NywyMy4wMjM4MjEgYyAzLjQ5Njc0Miw1LjUyMDc2NyAxNS4wMzY1NDcsMTAuNTU3ODE0IDIyLjI2MjUzMiwxOC4zMzk2NDQgLTAuODIyMDQ3LC04LjU4MDMxOSAtNy4xNTcyMDcsLTIwLjk0NDI4NiAtMTIuNzE4ODcyLC0yNy41MTkzOTMgLTMuODEyNzM1LDEuMjUwNTgxIC04LjYwMTkwNyw0LjIwMjQ3MiAtOS41NDM2Niw5LjE3OTc0OSB6IgogICAgICAgICBpZD0icGF0aDg5NS02IgogICAgICAgICBpbmtzY2FwZTpjb25uZWN0b3ItY3VydmF0dXJlPSIwIgogICAgICAgICBzb2RpcG9kaTpub2RldHlwZXM9ImNjY2MiIC8+CiAgICA8L2c+CiAgPC9nPgo8L3N2Zz4K
    mediatype: image/svg+xml
  install:
    spec:
      clusterPermissions:
      - rules:
        - apiGroups:
          - console.openshift.io
          resources:
          - consoleclidownloads
          verbs:
          - create
          - delete
          - deletecollection
          - get
          - list
          - patch
          - update
          - watch
        - apiGroups:
          - camel.apache.org
          resources:
          - '*'
          verbs:
          - '*'
        serviceAccountName: yaks-operator
      deployments:
      - name: yaks-operator
        spec:
          replicas: 1
          selector:
            matchLabels:
              name: yaks-operator
          strategy:
            type: Recreate
          template:
            metadata:
              labels:
                app: yaks
                yaks.citrusframework.org/component: operator
                name: yaks-operator
            spec:
              containers:
              - command:
                - yaks
                - operator
                env:
                - name: WATCH_NAMESPACE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.annotations['olm.targetNamespaces']
                - name: OPERATOR_NAME
                  value: yaks
                - name: POD_NAME
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.name
                - name: NAMESPACE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.namespace
                image: docker.io/citrusframework/yaks:0.1.0
                imagePullPolicy: IfNotPresent
                name: yaks-operator
                resources: {}
              serviceAccountName: yaks-operator
      permissions:
      - rules:
        - apiGroups:
          - yaks.citrusframework.org
          resources:
          - "*"
          verbs:
          - "*"
        - apiGroups:
          - ""
          resources:
          - pods
          - services
          - endpoints
          - persistentvolumeclaims
          - configmaps
          - secrets
          - serviceaccounts
          verbs:
          - create
          - delete
          - deletecollection
          - get
          - list
          - patch
          - update
          - watch
        - apiGroups:
          - rbac.authorization.k8s.io
          resources:
          - roles
          - rolebindings
          verbs:
          - create
          - delete
          - deletecollection
          - get
          - list
          - patch
          - update
          - watch
        - apiGroups:
          - ""
          resources:
          - events
          verbs:
          - create
          - patch
          - get
          - list
          - watch
        - apiGroups:
          - apps
          resources:
          - deployments
          - replicasets
          - statefulsets
          verbs:
          - create
          - delete
          - deletecollection
          - get
          - list
          - patch
          - update
          - watch
        - apiGroups:
          - apps
          attributeRestrictions: null
          resources:
          - daemonsets
          verbs:
          - get
          - list
          - watch
        - apiGroups:
          - extensions
          resources:
          - ingresses
          verbs:
          - create
          - delete
          - deletecollection
          - get
          - list
          - patch
          - update
          - watch
        - apiGroups:
          - monitoring.coreos.com
          resources:
          - servicemonitors
          verbs:
          - create
          - delete
          - deletecollection
          - get
          - list
          - patch
          - update
          - watch
        serviceAccountName: yaks-operator
    strategy: deployment
  installModes:
  - supported: true
    type: OwnNamespace
  - supported: true
    type: SingleNamespace
  - supported: false
    type: MultiNamespace
  - supported: true
    type: AllNamespaces
  keywords:
  - yaks
  - testing
  - microservices
  - knative
  - camel-k
  labels:
    name: yaks-operator
  links:
    - name: Project page
      url: https://citrusframework.org/
    - name: YAKS source code repository
      url: https://github.com/citrusframework/yaks
  maintainers:
    - email: cdeppisch@redhat.com
      name: Christoph Deppisch
    - email: nferraro@redhat.com
      name: Nicola Ferraro
  maturity: alpha
  minKubeVersion: 1.11.0
  provider:
    name: Citrus Framework
  selector:
    matchLabels:
      name: yaks-operator
  version: 0.1.0
