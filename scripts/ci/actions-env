#!/bin/bash
set -e
export INPUT_ENV_SCRIPT="/tmp/op-env-vars"
OP_TEST_ALLOW_CI_CHANGES=${OP_TEST_ALLOW_CI_CHANGES-0}

echo "OP_TEST_MODIFIED_FILES=$OP_TEST_MODIFIED_FILES"
echo "OP_TEST_REMOVED_FILES=$OP_TEST_REMOVED_FILES"
echo "OP_TEST_LABELS=$OP_TEST_LABELS"


for l in $(echo $OP_TEST_LABELS);do
  echo "Checking label '$l' ..."
  [[ "$l" = "allow/ci-changes" ]] && export OP_TEST_ALLOW_CI_CHANGES=1
done

OP_TEST_CHNAGES_OPERATOR=
OP_TEST_CHNAGES_OPERATOR_VERSIONS_MODIFIED=
OP_TEST_CHNAGES_OPERATOR_VERSIONS_REMOVED=


# Handle removed files
if [ -n "$OP_TEST_REMOVED_FILES" ];then

  # Some files are removed
  # TODO : OP_TEST_CHNAGES_OPERATOR_VERSIONS_REMOVED

  # Handle removed only files
  if [ -z $OP_TEST_MODIFIED_FILES ];then
    # check if only ci.yaml was removed

    #

    echo "Files removed, but nothing to test"
    exit 0
  fi
fi

# Only MODIFIED_FILES here
# No files were removed.
#OP_TEST_STREAM
OP_TEST_CHNAGES_GITHUB=0
OP_TEST_CHNAGES_CI=0
OP_TEST_CHNAGES_DOCS=0
OP_TEST_CHNAGES_STREAM_COMMUNITY=0
OP_TEST_CHNAGES_STREAM_UPSTREAM=0


FILES=
for sf in ${OP_TEST_MODIFIED_FILES}; do
  echo $sf
  # Check if .github/ dir is modified
  [[ $sf == .github* ]] && OP_TEST_CHNAGES_GITHUB=1 && continue
  [[ $sf == scripts* ]] && OP_TEST_CHNAGES_CI=1 && continue
  [[ $sf == docs* ]] && OP_TEST_CHNAGES_DOCS=1 && continue

  [[ $sf == community-operators* ]] && OP_TEST_CHNAGES_STREAM_COMMUNITY=1
  [[ $sf == upstream-community-operators* ]] && OP_TEST_CHNAGES_STREAM_UPSTREAM=1

  [[ $OP_TEST_CHNAGES_STREAM_COMMUNITY -eq 0 ]] && [[ $OP_TEST_CHNAGES_STREAM_UPSTREAM -eq 0 ]] && { echo "No changes 'community-operators' or 'upstream-community-operators' !!! Exiting ..."; exit 1; }

  FILES="$FILES $(echo $sf | cut -d '/' -f 1-3)"

  # Check if outdside of "community-operators" and "upstream-community-operators"
done

echo "OP_TEST_CHNAGES_GITHUB=$OP_TEST_CHNAGES_GITHUB"
echo "OP_TEST_CHNAGES_CI=$OP_TEST_CHNAGES_CI"
echo "OP_TEST_CHNAGES_DOC=$OP_TEST_CHNAGES_DOCS"
echo "OP_TEST_CHNAGES_STREAM_COMMUNITY=$OP_TEST_CHNAGES_STREAM_COMMUNITY"
echo "OP_TEST_CHNAGES_STREAM_UPSTREAM=$OP_TEST_CHNAGES_STREAM_UPSTREAM"

[[ $OP_TEST_CHNAGES_STREAM_COMMUNITY -eq 1 ]] && [[ $OP_TEST_CHNAGES_STREAM_UPSTREAM -eq 1 ]] && { echo "Changes in both 'community-operators' and 'upstream-community-operators' dirs !!! Exiting ..."; exit 1; }

[[ $OP_TEST_CHNAGES_GITHUB -eq 1 ]] && [[ $OP_TEST_ALLOW_CI_CHANGES -eq 0 ]] && { echo "Changes in '.github' dir, but 'allow/ci-changes' labed is not set !!!"; exit 1; }
[[ $OP_TEST_CHNAGES_CI -eq 1 ]] && [[ $OP_TEST_CHNAGES_CI -eq 0 ]] && { echo "Changes in ci, but 'allow/ci-changes' labed is not set !!!"; exit 1; }
[[ $OP_TEST_CHNAGES_DOC -eq 1 ]] && [[ $OP_TEST_CHNAGES_DOC -eq 0 ]] && { echo "Changes in docs, but 'allow/ci-changes' labed is not set !!!"; exit 1; }

[[ $OP_TEST_CHNAGES_STREAM_COMMUNITY -eq 1 ]] && OP_TEST_STREAM_NAME="community-operators"
[[ $OP_TEST_CHNAGES_STREAM_UPSTREAM -eq 1 ]] && OP_TEST_STREAM_NAME="upstream-community-operators"


VERSIONS=$(echo -e "${FILES// /\\n}" | uniq | sort -r)
LATEST="$(echo -e $VERSIONS | cut -d ' ' -f 1)"
OP_TEST_OPERATOR_NAME=$(echo $LATEST | cut -d '/' -f 2)
OP_TEST_OPERATOR_VERSION=$(echo $LATEST | cut -d '/' -f 3)

OP_TEST_OPERATOR_VERSIONS=
for v in $VERSIONS;do
  TMP_OP_NAME=$(echo $v | cut -d '/' -f 2)
  OP_TEST_OPERATOR_VERSIONS="$(echo $v| cut -d '/' -f 3) $OP_TEST_OPERATOR_VERSIONS"
  [ "$OP_TEST_OPERATOR_NAME" = "$TMP_OP_NAME" ] || { echo "Error: Multiple operators are changed !!! Detected:'$OP_TEST_OPERATOR_NAME' and '$TMP_OP_NAME' !!! Exiting ..."; exit 1; }
done
# remove trailing space
OP_TEST_OPERATOR_VERSIONS=$(echo $OP_TEST_OPERATOR_VERSIONS | sed 's/ *$//g')

echo "Latest : $LATEST"
echo "OP_TEST_OPERATOR_VERSIONS : $OP_TEST_OPERATOR_VERSIONS"


echo "::set-output name=op_test_changes_github::${OP_TEST_CHNAGES_GITHUB}"

cat <<EOF > $INPUT_ENV_SCRIPT
export OP_TEST_CHNAGES_GITHUB=$OP_TEST_CHNAGES_GITHUB
export OP_TEST_CHNAGES_CI=$OP_TEST_CHNAGES_CI
export OP_TEST_CHNAGES_DOC=$OP_TEST_CHNAGES_DOCS
export OP_TEST_CHNAGES_STREAM_COMMUNITY=$OP_TEST_CHNAGES_STREAM_COMMUNITY
export OP_TEST_CHNAGES_STREAM_UPSTREAM=$OP_TEST_CHNAGES_STREAM_UPSTREAM
export OP_TEST_STREAM_NAME=$OP_TEST_STREAM_NAME
export OP_TEST_OPERATOR_NAME=$OP_TEST_OPERATOR_NAME
export OP_TEST_OPERATOR_VERSION=$OP_TEST_OPERATOR_VERSION
export OP_TEST_OPERATOR_VERSIONS="$OP_TEST_OPERATOR_VERSIONS"
EOF

if [ ! -f $INPUT_ENV_SCRIPT ]; then
  echo "Error: Build system has problem to prepare environment from git information !!!"
  echo "  The file '$INPUT_ENV_SCRIPT' does not exist."
  exit 1
fi



exit 0
# unset OP_PATH
# unset OP_VER
# export COMMUNITY_SPECIAL=""
# export OP_CI_YAML_ONLY_CHANGED="false"

# function setName {
#       if [ $(echo $sf| awk -F'/' '{print NF}') -ge 3 ]; then OP_NAME="$(echo "$sf" | awk -F'/' '{ print $2 }')"; fi
#       if [ $(echo $sf| awk -F'/' '{print NF}') -ge 4 ]; then OP_VER="$(echo "$sf" | awk -F'/' '{ print $3 }')"; fi
#       if [ $(echo $sf| awk -F'/' '{print NF}') -ge 3 ]; then OP_PATH="$(echo "$sf" | awk -F'/' '{ print $1"/"$2 }')"; fi
#            }

# export MODE_CHANGE=0 # targeting ci.yaml
# export OP_VER_OVERWRITE=0
# export OP_RECREATE=0
# export OP_FORCE_DEPLOY_ON_K8S=0
# export OP_DEBUG=0
# # export OP_PR_NUMBER=${TRAVIS_PULL_REQUEST-false}

# # [[ "$OP_PR_NUMBER" == "false" ]] && export OP_PR_NUMBER=$(git --no-pager log --oneline | head -n 1 | cut -d '(' -f 2 | cut -d '#' -f 2 | cut -d ')' -f 1)
# # echo $OP_PR_NUMBER

# # if [[ -n "$OP_PR_NUMBER" ]]; then
# #   set +e
# #   OP_PR_LABELS=$(curl -s https://api.github.com/repos/operator-framework/community-operators/pulls/$OP_PR_NUMBER | jq '.labels[].name ' -r)
# #   if [[ $? -eq 0 ]];then
# #     echo "$OP_PR_LABELS"
# #     for l in $(echo $OP_PR_LABELS);do
# #       echo "Checking label '$l' ..."
# #       [[ "$l" = "allow/operator-version-overwrite" ]] && export OP_VER_OVERWRITE=1
# #       [[ "$l" = "allow/operator-recreate" ]] && export OP_RECREATE=1
# #       [[ "$l" = "test/force-deploy-on-kubernetes" ]] && export OP_FORCE_DEPLOY_ON_K8S=1
# #       [[ "$l" = "verbosity/high" ]] && export OP_DEBUG=1
# #       [[ "$l" = "verbosity/debug" ]] && export OP_DEBUG=2
# #     done
# #   else
# #     echo "Failed to query labels from PR=$OP_PR_NUMBER !!!"
# #     echo "    Tried command 'curl -s https://api.github.com/repos/operator-framework/community-operators/pulls/$OP_PR_NUMBER | jq '.labels[].name ' -r'"
# #   fi
# #   set -e
# # fi
# # echo "Label check done"

# # declare -A CHANGED_FILES


# # CHANGED_FILES=$(git --no-pager log -m -1 --name-only --first-parent $OP_PR_COMMIT|awk 'NR > 6 { print }'|grep '/' 2>&1)
# # CHANGED_FILES=$(git --no-pager log -m -1 --name-only --oneline --first-parent $OP_PR_COMMIT | tail -n +2 2>&1)
# echo "CHANGED_FILES:"
# echo ${CHANGED_FILES}
# echo

# UPSTREAM_SET=0
# COMMUNITY_SET=0

# echo "processing files:"
# for sf in ${CHANGED_FILES}; do
#   echo $sf

#   if [[ $sf == "upstream"* ]]; then
#       if [ "$COMMUNITY_SET" -gt "0"  ]; then echo "You are allowed to edit only one stream - upstream-community-operators or community-operators"; exit 1; fi
#       export RUN_UPSTREAM=true
#       #for run-index-test
#       export STREAM_NAME=upstream-community-operators
#       UPSTREAM_SET=1
#       setName

#   elif [[ $sf == "community"* ]]; then
#       if [ "$UPSTREAM_SET" -gt "0"  ]; then echo "You are allowed to edit only one stream - upstream-community-operators or community-operators"; exit 1; fi
#       export STREAM_NAME=community-operators
#       export COMMUNITY_SPECIAL='-e use_cluster_filter=true'
#       COMMUNITY_SET=1
#       setName

#   else
#       echo "Edited files outside upstream-community-operators/community-operators !!! "
#   fi
# done
# echo
# echo
# if [[ $UPSTREAM_SET -eq 0 ]]; then
#    if [[ $COMMUNITY_SET -eq 0 ]]; then
#      echo "No operator modified, exiting, no need to test/release."; echo; echo;

#      cat <<EOF > $INPUT_ENV_SCRIPT
# export NO_OPERATOR=1
# export OP_PR_COMMIT=$OP_PR_COMMIT #for traffic light
# EOF
#      exit 0;
#    fi
# fi

# echo

# # [[ $OP_VER_OVERWRITE -eq 1 ]] && [[ $OP_RECREATE -eq 1 ]] && { echo "Labels 'allow/operator-version-overwrite' and 'allow/operator-recreate' cannot be set simultaneously !!!"; exit 1; }

# #only ci.yaml was changed:
# # CI_YML_CHECK=$(echo ${CHANGED_FILES[0]}|rev|awk -F'/' '{print $1}'|rev)
# # echo "CI_YML_CHECK=$CI_YML_CHECK"
# # [[ -z "$OP_VER" ]] && [[ -z ${CHANGED_FILES[1]} ]] && [[ "$CI_YML_CHECK" == "ci.yaml" ]] && { export OP_CI_YAML_ONLY_CHANGED="true"; }


