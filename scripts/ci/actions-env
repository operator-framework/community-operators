#!/bin/bash
set -e
export INPUT_ENV_SCRIPT="/tmp/op-env-vars"
OP_TEST_ALLOW_CI_CHANGES=${OP_TEST_ALLOW_CI_CHANGES-0}
OP_TEST_READY=${OP_TEST_READY-1}
OP_RELEASE_READY=${OP_RELEASE_READY-0}
OP_TEST_OP_DELETE=${OP_TEST_OP_DELETE-0}
DELETE_APPREG=${DELETE_APPREG-0}
OPRT=${OPRT-0}

OP_TEST_CHANGES_GITHUB=0
OP_TEST_CHANGES_CI=0
OP_TEST_CHANGES_DOCS=0
OP_TEST_CHANGES_STREAM_COMMUNITY=0
OP_TEST_CHANGES_STREAM_UPSTREAM=0
OP_TEST_CI_YAML_CHANGED=0
OP_TEST_CI_YAML_ONLY=0
OP_TEST_CI_YAML_MODIFIED=0
OP_TEST_ALLOW_SERIOUS_CHANGES=0
OP_TEST_IS_OPERATOR=0
OP_TEST_IS_NEW_OPERATOR=0
OP_TEST_PR_TITLE=

OP_TEST_VER_OVERWRITE=${OP_TEST_VER_OVERWRITE-0}
OP_TEST_RECREATE=${OP_TEST_RECREATE-0}

OP_TEST_SET_LABEL_OPERATOR_VERSION_OVERWRITE=0
OP_TEST_SET_LABEL_OPERATOR_RECREATE=0
OP_TEST_IS_MODIFIED=0
OP_TEST_MODIFIED_CSVS=
OP_TEST_UPDATEGRAPH=1

echo "OP_TEST_ADDED_MODIFIED_FILES=$OP_TEST_ADDED_MODIFIED_FILES"
echo "OP_TEST_MODIFIED_FILES=$OP_TEST_MODIFIED_FILES"
echo "OP_TEST_RENAMED_FILES=$OP_TEST_RENAMED_FILES"
echo "OP_TEST_REMOVED_FILES=$OP_TEST_REMOVED_FILES"
echo "OP_TEST_LABELS=$OP_TEST_LABELS"

for l in $(echo $OP_TEST_LABELS);do
  echo "Checking label '$l' ..."
  [[ "$l" = "allow/ci-changes" ]] && export OP_TEST_ALLOW_CI_CHANGES=1
  [[ "$l" = "allow/operator-version-overwrite" ]] && export OP_TEST_VER_OVERWRITE=1
  [[ "$l" = "allow/operator-recreate" ]] && export OP_TEST_OP_DELETE=1 && export OP_TEST_RECREATE=1
  [[ "$l" = "allow/serious-changes-to-existing" ]] && export OP_TEST_ALLOW_SERIOUS_CHANGES=1
  
done

[[ $OP_TEST_VER_OVERWRITE -eq 1 ]] && [[ $OP_TEST_RECREATE -eq 1 ]] && { echo "Labels 'allow/operator-version-overwrite' and 'allow/operator-recreate' is set. Only one label can be set !!! Exiting ..."; exit 1; }

OP_TEST_CHANGES_OPERATOR=
OP_TEST_CHANGES_OPERATOR_VERSIONS_MODIFIED=
OP_TEST_CHANGES_OPERATOR_VERSIONS_REMOVED=


echo "::set-output name=op_test_set_label_operator_version_overwrite::$OP_TEST_SET_LABEL_OPERATOR_VERSION_OVERWRITE"
echo "::set-output name=op_test_set_label_operator_recreate::$OP_TEST_SET_LABEL_OPERATOR_RECREATE"
echo "::set-output name=op_test_is_modified::$OP_TEST_IS_MODIFIED"
echo "::set-output name=op_test_modified_csvs::$OP_TEST_MODIFIED_CSVS"
echo "::set-output name=op_test_allow_serious_changes::$OP_TEST_ALLOW_SERIOUS_CHANGES"
echo "::set-output name=op_test_is_new_operatror::${OP_TEST_IS_NEW_OPERATOR}"
echo "::set-output name=op_test_pr_title::${OP_TEST_PR_TITLE}"
echo "::set-output name=op_test_update_graph::${OP_TEST_UPDATEGRAPH}"

# Handle removed files
if [ -n "$OP_TEST_REMOVED_FILES" ];then

  # Some files are removed
  # TODO : OP_TEST_CHANGES_OPERATOR_VERSIONS_REMOVED
  FILES=
  for sf in ${OP_TEST_REMOVED_FILES}; do
    echo $sf
    # Check if .github/ dir is modified
    [[ $sf == .github* ]] && OP_TEST_CHANGES_GITHUB=1 && continue
    [[ $sf == scripts* ]] && OP_TEST_CHANGES_CI=1 && continue
    [[ $sf == docs* ]] && OP_TEST_CHANGES_DOCS=1 && continue
    [[ $sf == community-operators* ]] && OP_TEST_CHANGES_STREAM_COMMUNITY=1
    [[ $sf == upstream-community-operators* ]] && OP_TEST_CHANGES_STREAM_UPSTREAM=1
    [[ $sf == *package.yaml ]] && continue
    [[ $sf == *ci.yaml ]] && { OP_TEST_CI_YAML_CHANGED=1; continue; }
    [[ $OP_TEST_CHANGES_STREAM_COMMUNITY -eq 0 ]] && [[ $OP_TEST_CHANGES_STREAM_UPSTREAM -eq 0 ]] && { echo "No changes 'community-operators' or 'upstream-community-operators' !!! Exiting ..."; OP_RELEASE_READY=0; }
    FILES="$FILES $(echo $sf | cut -d '/' -f 1-3)"
    # Check if outdside of "community-operators" and "upstream-community-operators"
  done

  [ -n "$FILES" ] && OP_TEST_IS_OPERATOR=1

  # Handle removed only files
  if [ ! -n "$OP_TEST_ADDED_MODIFIED_FILES" ];then
    # check if only ci.yaml was removed
    OP_RELEASE_READY=1


    [[ $OP_TEST_CHANGES_STREAM_COMMUNITY -eq 1 ]] && OP_TEST_STREAM_NAME="community-operators"
    [[ $OP_TEST_CHANGES_STREAM_UPSTREAM -eq 1 ]] && OP_TEST_STREAM_NAME="upstream-community-operators"

    VERSIONS=$(echo -e "${FILES// /\\n}" | uniq | sort -r)
    LATEST="$(echo -e $VERSIONS | cut -d ' ' -f 1)"
    OP_TEST_OPERATOR_NAME=$(echo $LATEST | cut -d '/' -f 2)
    OP_TEST_OPERATOR_VERSION=$(echo $LATEST | cut -d '/' -f 3)

    OP_TEST_READY=0

    [[ $OP_TEST_CHANGES_STREAM_COMMUNITY -eq 1 ]] && [[ $OP_TEST_CHANGES_STREAM_UPSTREAM -eq 1 ]] && { echo "Changes in both 'community-operators' and 'upstream-community-operators' dirs !!! Exiting ..."; exit 1; }

    echo "::set-output name=op_test_ready::${OP_TEST_READY}"
    echo "::set-output name=op_release_ready::${OP_RELEASE_READY}"
    echo "::set-output name=op_test_stream::${OP_TEST_STREAM_NAME}"
    echo "::set-output name=op_test_name::${OP_TEST_OPERATOR_NAME}"
    echo "::set-output name=op_test_version::${OP_TEST_OPERATOR_VERSION}"
    echo "::set-output name=op_test_changed_ci_yaml::${OP_TEST_CI_YAML_CHANGED}"
    echo "::set-output name=op_test_ver_overwrite::${OP_TEST_VER_OVERWRITE}"
    echo "::set-output name=op_test_update_graph::${OP_TEST_UPDATEGRAPH}"
    
    echo "Files removed only."
    if [ ! -d ${OP_TEST_STREAM_NAME}/${OP_TEST_OPERATOR_NAME} ];then
      OP_TEST_OP_DELETE=1
      DELETE_APPREG=1
      echo "op_release_delete_appreg=${DELETE_APPREG}"
      echo "::set-output name=op_release_delete_appreg::${DELETE_APPREG}"
      echo "op_test_ready=${OP_TEST_READY}"
      echo "op_release_ready=${OP_RELEASE_READY}"
      echo "op_test_op_delete=$OP_TEST_OP_DELETE"
      echo "op_test_ver_overwrite=$OP_TEST_VER_OVERWRITE"
      echo "::set-output name=op_test_op_delete::${OP_TEST_OP_DELETE}"
      echo "::set-output name=op_test_is_modified::$OP_TEST_IS_MODIFIED"
      echo "Directory '${OP_TEST_STREAM_NAME}/${OP_TEST_OPERATOR_NAME}' is removed. This is OK."

      exit 0
    else
      echo "Directory '${OP_TEST_STREAM_NAME}/${OP_TEST_OPERATOR_NAME}' is NOT removed. Searching for remaining versions"
      for f in $(find ${OP_TEST_STREAM_NAME}/${OP_TEST_OPERATOR_NAME} -type f);do
        OP_TEST_ADDED_MODIFIED_FILES="$OP_TEST_ADDED_MODIFIED_FILES $f"
      done
      echo "Final modified files are :"
      echo "$OP_TEST_ADDED_MODIFIED_FILES"
    fi

  else
    REMOVED_VERSIONS=$(echo -e "${FILES// /\\n}" | uniq | sort -r)
    FILES=
  fi
fi

# Only MODIFIED_FILES here
OP_TEST_ADDED_MODIFIED_FILES="$OP_TEST_ADDED_MODIFIED_FILES $OP_TEST_RENAMED_FILES"

FILES=
for sf in ${OP_TEST_ADDED_MODIFIED_FILES}; do
  echo "$sf"
  # Check if .github/ dir is modified
  [[ $sf == .github* ]] && OP_TEST_CHANGES_GITHUB=1 && continue
  [[ $sf == scripts* ]] && OP_TEST_CHANGES_CI=1 && continue
  [[ $sf == docs* ]] && OP_TEST_CHANGES_DOCS=1 && continue

  [[ $sf == community-operators* ]] && OP_TEST_CHANGES_STREAM_COMMUNITY=1
  [[ $sf == upstream-community-operators* ]] && OP_TEST_CHANGES_STREAM_UPSTREAM=1

  [[ $sf == *package.yaml ]] && continue
  [[ $sf == *ci.yaml ]] && OP_TEST_CI_YAML_CHANGED=1 && continue
  [[ $sf == *mkdocs.yml ]] && continue

  [[ $OP_TEST_CHANGES_STREAM_COMMUNITY -eq 0 ]] && [[ $OP_TEST_CHANGES_STREAM_UPSTREAM -eq 0 ]] && { echo "No changes 'community-operators' or 'upstream-community-operators' Skipping test ..."; OP_TEST_READY=0; }

  OPERATOR_PATH=$(echo $sf | cut -d '/' -f 1-3)
  [ -f $OPERATOR_PATH ] && { echo "Operator path '$OPERATOR_PATH' is file and it should be directory !!!"; exit 1; }
  FILES="$FILES $OPERATOR_PATH"

  # Check if outdside of "community-operators" and "upstream-community-operators"
done

for sf in ${OP_TEST_MODIFIED_FILES}; do
  echo "modified only: $sf"
  
  [[ $sf == *package.yaml ]] && continue
  [[ $sf == *ci.yaml ]] && OP_TEST_CI_YAML_MODIFIED=1 && continue

  if [[ $sf == *.clusterserviceversion.yaml ]];then
    OP_TEST_MODIFIED_CSVS="$sf $OP_TEST_MODIFIED_CSVS"
  else
    OP_TEST_MODIFIED_OTHERS="$sf $OP_TEST_MODIFIED_OTHERS"
  fi
  OP_TEST_IS_MODIFIED=1
done
echo "OP_TEST_MODIFIED_CSVS=$OP_TEST_MODIFIED_CSVS"
echo "OP_TEST_MODIFIED_OTHERS=$OP_TEST_MODIFIED_OTHERS"

[[ $OP_TEST_CHANGES_STREAM_COMMUNITY -eq 0 ]] && [[ $OP_TEST_CHANGES_STREAM_UPSTREAM -eq 0 ]] && [[ $OP_TEST_CI_YAML_CHANGED -eq 0 ]] && { echo "No changes 'community-operators' or 'upstream-community-operators' !!! Skipping test ..."; OP_TEST_READY=0; }

[[ $OP_TEST_CHANGES_STREAM_COMMUNITY -eq 1 ]] && [[ $OP_TEST_CHANGES_STREAM_UPSTREAM -eq 1 ]] && { echo "Changes in both 'community-operators' and 'upstream-community-operators' dirs !!! Exiting ..."; exit 1; }

[[ $OP_TEST_CHANGES_GITHUB -eq 1 ]] && [[ $OP_TEST_ALLOW_CI_CHANGES -eq 0 ]] && { echo "Changes in '.github' dir, but 'allow/ci-changes' label is not set !!!"; OP_TEST_READY=0; exit 1; }
[[ $OP_TEST_CHANGES_CI -eq 1 ]] && [[ $OP_TEST_ALLOW_CI_CHANGES -eq 0 ]] && { echo "Changes in ci, but 'allow/ci-changes' label is not set !!!"; OP_TEST_READY=0; exit 1; }
[[ $OP_TEST_CHANGES_DOCS -eq 1 ]] && [[ $OP_TEST_ALLOW_CI_CHANGES -eq 0 ]] && { echo "Changes in docs, but 'allow/ci-changes' label is not set !!!"; OP_TEST_READY=0; exit 1; }
[[ $OP_TEST_CHANGES_STREAM_COMMUNITY -eq 1 || $OP_TEST_CHANGES_STREAM_COMMUNITY -eq 1 ]] && [[ $OP_TEST_READY -eq 0 ]] && { echo "Error: Operator changes detected with ci changes and 'allow/ci-changes' is not set !!! Exiting ..."; exit 1; }
[[ $OP_TEST_CHANGES_STREAM_COMMUNITY -eq 0 && $OP_TEST_CHANGES_STREAM_COMMUNITY -eq 0 ]] && [[ $OP_TEST_READY -eq 0 ]] && { echo "Nothing to test"; exit 0; }

[[ $OP_TEST_CHANGES_STREAM_COMMUNITY -eq 1 ]] && OP_TEST_STREAM_NAME="community-operators"
[[ $OP_TEST_CHANGES_STREAM_UPSTREAM -eq 1 ]] && OP_TEST_STREAM_NAME="upstream-community-operators"

if [[ $OP_TEST_CHANGES_STREAM_COMMUNITY -eq 1 ]] || [[ $OP_TEST_CHANGES_STREAM_UPSTREAM -eq 1 ]];then
  [[ $OP_TEST_CI_YAML_CHANGED -eq 1 ]] && [ ! -n "$FILES" ] && OP_TEST_CI_YAML_ONLY=1 && FILES=${OP_TEST_ADDED_MODIFIED_FILES}
fi

echo "FILES: $FILES"

VERSIONS=$(echo -e "${FILES// /\\n}" | uniq | sort -r)

LATEST="$(echo -e $VERSIONS | cut -d ' ' -f 1)"
OP_TEST_OPERATOR_NAME=$(echo $LATEST | cut -d '/' -f 2)
OP_TEST_OPERATOR_VERSION=$(echo $LATEST | cut -d '/' -f 3)
OP_TEST_OPERATOR_VERSIONS_ALL="$(find $OP_TEST_STREAM_NAME/$OP_TEST_OPERATOR_NAME -type f -name "*.clusterserviceversion.yaml" | sort --version-sort | cut -d '/' -f 3 | tr '\n' ' ')"
OP_TEST_OPERATOR_VERSIONS_ALL_LATEST="$(find $OP_TEST_STREAM_NAME/$OP_TEST_OPERATOR_NAME -type f -name "*.clusterserviceversion.yaml" | sort --version-sort | tail -n 1 | cut -d '/' -f 3)"

OP_TEST_OPERATOR_VERSIONS=
for v in $VERSIONS;do
  TMP_OP_NAME=$(echo $v | cut -d '/' -f 2)
  OP_TEST_OPERATOR_VERSIONS="$(echo $v| cut -d '/' -f 3) $OP_TEST_OPERATOR_VERSIONS"
  [ "$OP_TEST_OPERATOR_NAME" = "$TMP_OP_NAME" ] || { echo "Error: Multiple operators are changed !!! Detected:'$OP_TEST_OPERATOR_NAME' and '$TMP_OP_NAME' !!! Exiting ..."; OP_TEST_READY=0; exit 1;  }
done
# remove trailing space
OP_TEST_OPERATOR_VERSIONS=$(echo $OP_TEST_OPERATOR_VERSIONS | sed 's/ *$//g')

OP_TEST_OPERATOR_VERSIONS_REMOVED=
for v in $REMOVED_VERSIONS;do
  OP_TEST_OPERATOR_VERSIONS_REMOVED="$(echo $v| cut -d '/' -f 3) $OP_TEST_OPERATOR_VERSIONS_REMOVED"  
done
# remove trailing space
OP_TEST_OPERATOR_VERSIONS_REMOVED=$(echo $OP_TEST_OPERATOR_VERSIONS_REMOVED | sed 's/ *$//g')

[[ $OP_TEST_PROD -ge 1 ]] && OP_RELEASE_READY=1

if [[ $OP_TEST_CI_YAML_ONLY -eq 1 ]];then
  if [[ $OP_TEST_PROD -ge 1 ]];then
    OP_TEST_OPERATOR_VERSION="sync"
    OP_TEST_OPERATOR_VERSIONS="$OP_TEST_OPERATOR_VERSION"
  else
    OP_TEST_OPERATOR_VERSION="$(find $OP_TEST_STREAM_NAME/$OP_TEST_OPERATOR_NAME -type f -name "*.clusterserviceversion.yaml" | sort --version-sort | tail -n 1 | cut -d '/' -f 3)"
    OP_TEST_OPERATOR_VERSIONS="$OP_TEST_OPERATOR_VERSION"
  fi
fi

OP_TEST_OPERATOR_VERSIONS_COUNT=0

[ -z $OP_TEST_OPERATOR_VERSIONS ] || OP_TEST_OPERATOR_VERSIONS_COUNT=$(echo $OP_TEST_OPERATOR_VERSIONS | tr ' ' '\n' | wc -l)

OP_TEST_OPERATOR_VERSIONS_ALL_COUNT=0
[ -n "$OP_TEST_OPERATOR_VERSIONS_ALL" ] && OP_TEST_OPERATOR_VERSIONS_ALL_COUNT=$(echo $OP_TEST_OPERATOR_VERSIONS_ALL | tr ' ' '\n' | wc -l)

[ -n "$OP_TEST_OPERATOR_VERSIONS_REMOVED" ] && [[ ! $OP_TEST_RECREATE -eq 1 ]] && [ "$OP_TEST_OPERATOR_VERSIONS_REMOVED" != "$OP_TEST_OPERATOR_VERSIONS_ALL_LATEST" ] && { echo "Error: Old versions [$OP_TEST_OPERATOR_VERSIONS_REMOVED] were removed and 'allow/operator-recreate' is NOT set !!! Please set it first !!! Exiting ..."; exit 1;  }

# echo "::set-output name=op_test_set_label_operator_version_overwrite::0"
# echo "::set-output name=op_test_set_label_operator_recreate::0"

[[ $OPRT -eq 0 ]] && [[ $OP_TEST_OPERATOR_VERSIONS_COUNT -gt 1 ]] && [[ ! $OP_TEST_RECREATE -eq 1 ]] && { echo "Error: Multiple versions [$OP_TEST_OPERATOR_VERSIONS] were modified and 'allow/operator-recreate' is NOT set !!! Please set it first !!! Exiting ..."; exit 1;  }

[[ $OPRT -eq 1 ]] && [[ $OP_TEST_OPERATOR_VERSIONS_COUNT -eq 1 ]] && [[ $OP_TEST_IS_MODIFIED -eq 1 ]] && OP_TEST_SET_LABEL_OPERATOR_VERSION_OVERWRITE=1
[[ $OPRT -eq 1 ]] && [[ $OP_TEST_OPERATOR_VERSIONS_COUNT -gt 1 ]] && OP_TEST_SET_LABEL_OPERATOR_RECREATE=1 && OP_TEST_VER_OVERWRITE=1 && OP_TEST_RECREATE=0
[[ $OPRT -eq 1 ]] && [[ $OP_TEST_OPERATOR_VERSIONS_ALL_COUNT -eq 1 ]] && OP_TEST_IS_NEW_OPERATOR=1 && OP_TEST_RECREATE=1 && OP_TEST_VER_OVERWRITE=0

[[ $OP_TEST_VER_OVERWRITE -eq 1 ]] && [[ $OP_TEST_RECREATE -eq 1 ]] && { echo "Labels 'allow/operator-version-overwrite' and 'allow/operator-recreate' is set. Only one label can be set !!! Exiting ..."; exit 1; }

[[ $OP_TEST_CI_YAML_MODIFIED -eq 1 ]] && [[ $OP_TEST_CI_YAML_ONLY -eq 0 ]] && { echo "We support only a single file modification in case of 'ci.yaml' file. If you want to update it, please make an extra PR with 'ci.yaml' file modification only !!! More info : https://operator-framework.github.io/community-operators/operator-ci-yaml/."; exit 1; }

if [[ $OP_TEST_READY -eq 1 ]];then
  [ ! -f $OP_TEST_STREAM_NAME/$OP_TEST_OPERATOR_NAME/ci.yaml ] && { echo "We require that file '$OP_TEST_STREAM_NAME/$OP_TEST_OPERATOR_NAME/ci.yaml' is present !!! More info : https://operator-framework.github.io/community-operators/operator-ci-yaml/. !!!"; exit 1; }
  yq --version || { echo "Command 'yq' could not be found !!!"; exit 1; } 
  TEST_REVIEWERS=$(cat $OP_TEST_STREAM_NAME/$OP_TEST_OPERATOR_NAME/ci.yaml | yq '.reviewers')
  [[ $OP_TEST_READY -eq 1 ]] && [ $TEST_REVIEWERS == "null" ] &&  { echo "We require that file '$OP_TEST_STREAM_NAME/$OP_TEST_OPERATOR_NAME/ci.yaml' contains 'reviewers' field !!! More info : https://operator-framework.github.io/community-operators/operator-ci-yaml/ !!!"; }
  TEST_REVIEWERS=$(cat $OP_TEST_STREAM_NAME/$OP_TEST_OPERATOR_NAME/ci.yaml | yq '.addReviewers')
  [[ $OP_TEST_READY -eq 1 ]] && [ $TEST_REVIEWERS == "null" ] &&  { echo "We require that file '$OP_TEST_STREAM_NAME/$OP_TEST_OPERATOR_NAME/ci.yaml' contains 'addReviewers' field ('addReviewers: true') !!! More info : https://operator-framework.github.io/community-operators/operator-ci-yaml/ !!!"; }

  TEST_UPDATE_GRAPH=$(cat $OP_TEST_STREAM_NAME/$OP_TEST_OPERATOR_NAME/ci.yaml | yq '.updateGraph')
  [ $TEST_UPDATE_GRAPH == "null" ] && OP_TEST_UPDATEGRAPH=0
  echo "OP_TEST_UPDATEGRAPH=$OP_TEST_UPDATEGRAPH"
fi

OP_TEST_PR_TITLE="$OP_TEST_STREAM_NAME"
[[ $OPRT -eq 1 ]] && [[ $OP_TEST_VER_OVERWRITE -eq 1 ]] && OP_TEST_PR_TITLE="$OP_TEST_PR_TITLE [O]"
[[ $OPRT -eq 1 ]] && [[ $OP_TEST_RECREATE -eq 1 ]] && OP_TEST_PR_TITLE="$OP_TEST_PR_TITLE [R]"
OP_TEST_PR_TITLE="$OP_TEST_PR_TITLE $OP_TEST_OPERATOR_NAME ($OP_TEST_OPERATOR_VERSIONS)"

echo "Latest : $LATEST"
echo "OP_TEST_OPERATOR_VERSION: $OP_TEST_OPERATOR_VERSION"
echo "OP_TEST_OPERATOR_VERSIONS : $OP_TEST_OPERATOR_VERSIONS"
echo "OP_TEST_OPERATOR_VERSIONS_ALL : $OP_TEST_OPERATOR_VERSIONS_ALL"
echo "OP_TEST_OPERATOR_VERSIONS_ALL_LATEST : $OP_TEST_OPERATOR_VERSIONS_ALL_LATEST"
echo "OP_TEST_OPERATOR_VERSIONS_REMOVED : $OP_TEST_OPERATOR_VERSIONS_REMOVED"
echo "OP_TEST_CHANGES_GITHUB=$OP_TEST_CHANGES_GITHUB"
echo "OP_TEST_CHANGES_CI=$OP_TEST_CHANGES_CI"
echo "OP_TEST_CHANGES_DOC=$OP_TEST_CHANGES_DOCS"
echo "OP_TEST_CHANGES_STREAM_COMMUNITY=$OP_TEST_CHANGES_STREAM_COMMUNITY"
echo "OP_TEST_CHANGES_STREAM_UPSTREAM=$OP_TEST_CHANGES_STREAM_UPSTREAM"


echo "op_test_ready=${OP_TEST_READY}"
echo "op_release_ready=${OP_RELEASE_READY}"
echo "op_test_stream=${OP_TEST_STREAM_NAME}"
echo "op_test_name=${OP_TEST_OPERATOR_NAME}"
echo "op_test_version=${OP_TEST_OPERATOR_VERSION}"
echo "op_test_versions=${OP_TEST_OPERATOR_VERSIONS}"
echo "op_test_is_new_operatror=${OP_TEST_IS_NEW_OPERATOR}"
echo "op_test_pr_title=${OP_TEST_PR_TITLE}"

echo "op_test_ci_yaml_only=$OP_TEST_CI_YAML_ONLY"
echo "op_test_op_delete=$OP_TEST_OP_DELETE"
echo "op_test_ver_overwrite=$OP_TEST_VER_OVERWRITE"

echo "::set-output name=op_test_ready::${OP_TEST_READY}"
echo "::set-output name=op_release_ready::${OP_RELEASE_READY}"

echo "::set-output name=op_test_stream::${OP_TEST_STREAM_NAME}"
echo "::set-output name=op_test_name::${OP_TEST_OPERATOR_NAME}"
echo "::set-output name=op_test_version::${OP_TEST_OPERATOR_VERSION}"
echo "::set-output name=op_test_versions::${OP_TEST_OPERATOR_VERSIONS}"
echo "::set-output name=op_test_is_new_operatror::${OP_TEST_IS_NEW_OPERATOR}"
echo "::set-output name=op_test_pr_title::${OP_TEST_PR_TITLE}"


echo "::set-output name=op_test_ci_yaml_only::${OP_TEST_CI_YAML_ONLY}"
echo "::set-output name=op_test_op_delete::${OP_TEST_OP_DELETE}"
echo "::set-output name=op_test_ver_overwrite::${OP_TEST_VER_OVERWRITE}"
echo "::set-output name=op_test_update_graph::${OP_TEST_UPDATEGRAPH}"

echo "::set-output name=op_test_set_label_operator_version_overwrite::$OP_TEST_SET_LABEL_OPERATOR_VERSION_OVERWRITE"
echo "::set-output name=op_test_set_label_operator_recreate::$OP_TEST_SET_LABEL_OPERATOR_RECREATE"
echo "::set-output name=op_test_is_modified::$OP_TEST_IS_MODIFIED"
echo "::set-output name=op_test_modified_csvs::$OP_TEST_MODIFIED_CSVS"
echo "::set-output name=op_test_modified_others::$OP_TEST_MODIFIED_OTHERS"

echo "All done"
exit 0