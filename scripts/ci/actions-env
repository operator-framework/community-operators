#!/bin/bash
set -e
export INPUT_ENV_SCRIPT="/tmp/op-env-vars"
OP_TEST_ALLOW_CI_CHANGES=${OP_TEST_ALLOW_CI_CHANGES-0}
OP_TEST_READY=${OP_TEST_READY-1}
OP_RELEASE_READY=${OP_RELEASE_READY-0}
OP_TEST_OP_DELETE=${OP_TEST_OP_DELETE-0}

OP_TEST_CHNAGES_GITHUB=0
OP_TEST_CHNAGES_CI=0
OP_TEST_CHNAGES_DOCS=0
OP_TEST_CHNAGES_STREAM_COMMUNITY=0
OP_TEST_CHNAGES_STREAM_UPSTREAM=0
OP_TEST_CHNAGES_CI_YAML=0
OP_TEST_CI_YAML_ONLY=0

OP_TEST_VER_OVERWRITE=${OP_TEST_VER_OVERWRITE-0}
OP_TEST_RECREATE=${OP_TEST_RECREATE-0}

echo "OP_TEST_MODIFIED_FILES=$OP_TEST_MODIFIED_FILES"
echo "OP_TEST_REMOVED_FILES=$OP_TEST_REMOVED_FILES"
echo "OP_TEST_LABELS=$OP_TEST_LABELS"


for l in $(echo $OP_TEST_LABELS);do
  echo "Checking label '$l' ..."
  [[ "$l" = "allow/ci-changes" ]] && export OP_TEST_ALLOW_CI_CHANGES=1
  [[ "$l" = "allow/operator-version-overwrite" ]] && export OP_TEST_VER_OVERWRITE=1
  [[ "$l" = "allow/operator-recreate" ]] && export OP_TEST_OP_DELETE=1 && export OP_TEST_RECREATE=1
done

[[ $OP_TEST_VER_OVERWRITE -eq 1 ]] && [[ $OP_TEST_RECREATE -eq 1 ]] && { echo "Labels 'allow/operator-version-overwrite' and 'allow/operator-recreate' is set. Only one label can be set !!! Exiting ..."; exit 1; }

OP_TEST_CHNAGES_OPERATOR=
OP_TEST_CHNAGES_OPERATOR_VERSIONS_MODIFIED=
OP_TEST_CHNAGES_OPERATOR_VERSIONS_REMOVED=


# Handle removed files
if [ -n "$OP_TEST_REMOVED_FILES" ];then

  # Some files are removed
  # TODO : OP_TEST_CHNAGES_OPERATOR_VERSIONS_REMOVED
  FILES=
  for sf in ${OP_TEST_REMOVED_FILES}; do
    echo $sf
    # Check if .github/ dir is modified
    [[ $sf == .github* ]] && OP_TEST_CHNAGES_GITHUB=1 && continue
    [[ $sf == scripts* ]] && OP_TEST_CHNAGES_CI=1 && continue
    [[ $sf == docs* ]] && OP_TEST_CHNAGES_DOCS=1 && continue
    [[ $sf == community-operators* ]] && OP_TEST_CHNAGES_STREAM_COMMUNITY=1
    [[ $sf == upstream-community-operators* ]] && OP_TEST_CHNAGES_STREAM_UPSTREAM=1
    [[ $sf == *package.yaml ]] && continue
    [[ $sf == *ci.yaml ]] && { OP_TEST_CHNAGES_CI_YAML=1; continue; }
    [[ $OP_TEST_CHNAGES_STREAM_COMMUNITY -eq 0 ]] && [[ $OP_TEST_CHNAGES_STREAM_UPSTREAM -eq 0 ]] && { echo "No changes 'community-operators' or 'upstream-community-operators' !!! Exiting ..."; OP_RELEASE_READY=0; }
    FILES="$FILES $(echo $sf | cut -d '/' -f 1-3)"
    # Check if outdside of "community-operators" and "upstream-community-operators"
  done
  # Handle removed only files
  if [ ! -n "$OP_TEST_MODIFIED_FILES" ];then
    # check if only ci.yaml was removed
    OP_RELEASE_READY=1


    [[ $OP_TEST_CHNAGES_STREAM_COMMUNITY -eq 1 ]] && OP_TEST_STREAM_NAME="community-operators"
    [[ $OP_TEST_CHNAGES_STREAM_UPSTREAM -eq 1 ]] && OP_TEST_STREAM_NAME="upstream-community-operators"

    VERSIONS=$(echo -e "${FILES// /\\n}" | uniq | sort -r)
    LATEST="$(echo -e $VERSIONS | cut -d ' ' -f 1)"
    OP_TEST_OPERATOR_NAME=$(echo $LATEST | cut -d '/' -f 2)
    OP_TEST_OPERATOR_VERSION=$(echo $LATEST | cut -d '/' -f 3)

    OP_TEST_READY=0

    [[ $OP_TEST_CHNAGES_STREAM_COMMUNITY -eq 1 ]] && [[ $OP_TEST_CHNAGES_STREAM_UPSTREAM -eq 1 ]] && { echo "Changes in both 'community-operators' and 'upstream-community-operators' dirs !!! Exiting ..."; exit 1; }

    echo "::set-output name=op_test_ready::${OP_TEST_READY}"
    echo "::set-output name=op_release_ready::${OP_RELEASE_READY}"
    echo "::set-output name=op_test_stream::${OP_TEST_STREAM_NAME}"
    echo "::set-output name=op_test_name::${OP_TEST_OPERATOR_NAME}"
    echo "::set-output name=op_test_version::${OP_TEST_OPERATOR_VERSION}"
    echo "::set-output name=op_test_changed_ci_yaml::${OP_TEST_CHNAGES_CI_YAML}"
    echo "::set-output name=op_test_ver_overwrite::${OP_TEST_VER_OVERWRITE}"
    
    echo "Files removed only."
    if [ ! -d ${OP_TEST_STREAM_NAME}/${OP_TEST_OPERATOR_NAME} ];then
      OP_TEST_OP_DELETE=1
      echo "op_test_ready=${OP_TEST_READY}"
      echo "op_release_ready=${OP_RELEASE_READY}"
      echo "op_test_op_delete=$OP_TEST_OP_DELETE"
      echo "op_test_ver_overwrite=$OP_TEST_VER_OVERWRITE"
      echo "::set-output name=op_test_op_delete::${OP_TEST_OP_DELETE}"
      echo "Directory '${OP_TEST_STREAM_NAME}/${OP_TEST_OPERATOR_NAME}' is removed. This is OK."

      exit 0
    else
      echo "Directory '${OP_TEST_STREAM_NAME}/${OP_TEST_OPERATOR_NAME}' is NOT removed. Searching for remaining versions"
      for f in $(find ${OP_TEST_STREAM_NAME}/${OP_TEST_OPERATOR_NAME} -type f);do
        OP_TEST_MODIFIED_FILES="$OP_TEST_MODIFIED_FILES $f"
      done
      echo "Final modified files are :"
      echo "$OP_TEST_MODIFIED_FILES"
    fi

  else
    REMOVED_VERSIONS=$(echo -e "${FILES// /\\n}" | uniq | sort -r)
    FILES=
  fi
fi

# Only MODIFIED_FILES here

FILES=
for sf in ${OP_TEST_MODIFIED_FILES}; do
  echo "$sf"
  # Check if .github/ dir is modified
  [[ $sf == .github* ]] && OP_TEST_CHNAGES_GITHUB=1 && continue
  [[ $sf == scripts* ]] && OP_TEST_CHNAGES_CI=1 && continue
  [[ $sf == docs* ]] && OP_TEST_CHNAGES_DOCS=1 && continue

  [[ $sf == community-operators* ]] && OP_TEST_CHNAGES_STREAM_COMMUNITY=1
  [[ $sf == upstream-community-operators* ]] && OP_TEST_CHNAGES_STREAM_UPSTREAM=1

  [[ $sf == *package.yaml ]] && continue
  [[ $sf == *ci.yaml ]] && OP_TEST_CHNAGES_CI_YAML=1 && continue
  [[ $sf == *mkdocs.yml ]] && continue

  [[ $OP_TEST_CHNAGES_STREAM_COMMUNITY -eq 0 ]] && [[ $OP_TEST_CHNAGES_STREAM_UPSTREAM -eq 0 ]] && { echo "No changes 'community-operators' or 'upstream-community-operators' Skipping test ..."; OP_TEST_READY=0; }

  OPERATOR_PATH=$(echo $sf | cut -d '/' -f 1-3)
  [ -f $OPERATOR_PATH ] && { echo "Operator path '$OPERATOR_PATH' is file and it should be directory !!!"; exit 1; }
  FILES="$FILES $OPERATOR_PATH"

  # Check if outdside of "community-operators" and "upstream-community-operators"
done

[[ $OP_TEST_CHNAGES_STREAM_COMMUNITY -eq 0 ]] && [[ $OP_TEST_CHNAGES_STREAM_UPSTREAM -eq 0 ]] && [[ $OP_TEST_CHNAGES_CI_YAML -eq 0 ]] && { echo "No changes 'community-operators' or 'upstream-community-operators' !!! Skipping test ..."; OP_TEST_READY=0; }

[[ $OP_TEST_CHNAGES_STREAM_COMMUNITY -eq 1 ]] && [[ $OP_TEST_CHNAGES_STREAM_UPSTREAM -eq 1 ]] && { echo "Changes in both 'community-operators' and 'upstream-community-operators' dirs !!! Exiting ..."; exit 1; }

[[ $OP_TEST_CHNAGES_GITHUB -eq 1 ]] && [[ $OP_TEST_ALLOW_CI_CHANGES -eq 0 ]] && { echo "Changes in '.github' dir, but 'allow/ci-changes' labed is not set !!!"; OP_TEST_READY=0; exit 1; }
[[ $OP_TEST_CHNAGES_CI -eq 1 ]] && [[ $OP_TEST_ALLOW_CI_CHANGES -eq 0 ]] && { echo "Changes in ci, but 'allow/ci-changes' labed is not set !!!"; OP_TEST_READY=0; exit 1; }
[[ $OP_TEST_CHNAGES_DOC -eq 1 ]] && [[ $OP_TEST_ALLOW_CI_CHANGES -eq 0 ]] && { echo "Changes in docs, but 'allow/ci-changes' labed is not set !!!"; OP_TEST_READY=0; exit 1; }

[[ $OP_TEST_CHNAGES_STREAM_COMMUNITY -eq 1 || $OP_TEST_CHNAGES_STREAM_COMMUNITY -eq 1 ]] && [[ $OP_TEST_READY -eq 0 ]] && { echo "Error: Operator changes detected with ci changes and 'allow/ci-changes' is not set !!! Exiting ..."; exit 1; }
[[ $OP_TEST_CHNAGES_STREAM_COMMUNITY -eq 0 && $OP_TEST_CHNAGES_STREAM_COMMUNITY -eq 0 ]] && [[ $OP_TEST_READY -eq 0 ]] && { echo "Nothing to test"; exit 0; }

[[ $OP_TEST_CHNAGES_STREAM_COMMUNITY -eq 1 ]] && OP_TEST_STREAM_NAME="community-operators"
[[ $OP_TEST_CHNAGES_STREAM_UPSTREAM -eq 1 ]] && OP_TEST_STREAM_NAME="upstream-community-operators"

if [[ $OP_TEST_CHNAGES_STREAM_COMMUNITY -eq 1 ]] || [[ $OP_TEST_CHNAGES_STREAM_UPSTREAM -eq 1 ]];then
  [[ $OP_TEST_CHNAGES_CI_YAML -eq 1 ]] && [ ! -n "$FILES" ] && OP_TEST_CI_YAML_ONLY=1 && FILES=${OP_TEST_MODIFIED_FILES}
fi



echo "FILES: $FILES"

VERSIONS=$(echo -e "${FILES// /\\n}" | uniq | sort -r)

LATEST="$(echo -e $VERSIONS | cut -d ' ' -f 1)"
OP_TEST_OPERATOR_NAME=$(echo $LATEST | cut -d '/' -f 2)
OP_TEST_OPERATOR_VERSION=$(echo $LATEST | cut -d '/' -f 3)
OP_TEST_OPERATOR_VERSIONS_ALL="$(find $OP_TEST_STREAM_NAME/$OP_TEST_OPERATOR_NAME -type f -name "*.clusterserviceversion.yaml" | sort --version-sort | cut -d '/' -f 3 | tr '\n' ' ')"
OP_TEST_OPERATOR_VERSIONS_ALL_LATEST="$(find $OP_TEST_STREAM_NAME/$OP_TEST_OPERATOR_NAME -type f -name "*.clusterserviceversion.yaml" | sort --version-sort | tail -n 1 | cut -d '/' -f 3)"

OP_TEST_OPERATOR_VERSIONS=
for v in $VERSIONS;do
  TMP_OP_NAME=$(echo $v | cut -d '/' -f 2)
  OP_TEST_OPERATOR_VERSIONS="$(echo $v| cut -d '/' -f 3) $OP_TEST_OPERATOR_VERSIONS"
  [ "$OP_TEST_OPERATOR_NAME" = "$TMP_OP_NAME" ] || { echo "Error: Multiple operators are changed !!! Detected:'$OP_TEST_OPERATOR_NAME' and '$TMP_OP_NAME' !!! Exiting ..."; OP_TEST_READY=0; exit 1;  }
done
# remove trailing space
OP_TEST_OPERATOR_VERSIONS=$(echo $OP_TEST_OPERATOR_VERSIONS | sed 's/ *$//g')

OP_TEST_OPERATOR_VERSIONS_REMOVED=
for v in $REMOVED_VERSIONS;do
  OP_TEST_OPERATOR_VERSIONS_REMOVED="$(echo $v| cut -d '/' -f 3) $OP_TEST_OPERATOR_VERSIONS_REMOVED"  
done
# remove trailing space
OP_TEST_OPERATOR_VERSIONS_REMOVED=$(echo $OP_TEST_OPERATOR_VERSIONS_REMOVED | sed 's/ *$//g')

[[ $OP_TEST_PROD -ge 1 ]] && OP_RELEASE_READY=1

if [[ $OP_TEST_CI_YAML_ONLY -eq 1 ]];then
  if [[ $OP_TEST_PROD -ge 1 ]];then
    OP_TEST_OPERATOR_VERSION="sync"
    OP_TEST_OPERATOR_VERSIONS="$OP_TEST_OPERATOR_VERSION"
  else
    OP_TEST_OPERATOR_VERSION="$(find $OP_TEST_STREAM_NAME/$OP_TEST_OPERATOR_NAME -type f -name "*.clusterserviceversion.yaml" | sort --version-sort | tail -n 1 | cut -d '/' -f 3)"
    OP_TEST_OPERATOR_VERSIONS="$OP_TEST_OPERATOR_VERSION"
  fi
fi
[ -n "$OP_TEST_OPERATOR_VERSIONS_REMOVED" ] && [[ ! $OP_TEST_RECREATE -eq 1 ]] && [ "$OP_TEST_OPERATOR_VERSIONS_REMOVED" != "$OP_TEST_OPERATOR_VERSIONS_ALL_LATEST" ] && { echo "Error: Old versions [$OP_TEST_OPERATOR_VERSIONS_REMOVED] were removed and 'allow/operator-recreate' is NOT set !!! Please set it first !!! Exiting ..."; exit 1;  }

echo "Latest : $LATEST"
echo "OP_TEST_OPERATOR_VERSION: $OP_TEST_OPERATOR_VERSION"
echo "OP_TEST_OPERATOR_VERSIONS : $OP_TEST_OPERATOR_VERSIONS"
echo "OP_TEST_OPERATOR_VERSIONS_ALL : $OP_TEST_OPERATOR_VERSIONS_ALL"
echo "OP_TEST_OPERATOR_VERSIONS_ALL_LATEST : $OP_TEST_OPERATOR_VERSIONS_ALL_LATEST"
echo "OP_TEST_OPERATOR_VERSIONS_REMOVED : $OP_TEST_OPERATOR_VERSIONS_REMOVED"
echo "OP_TEST_CHNAGES_GITHUB=$OP_TEST_CHNAGES_GITHUB"
echo "OP_TEST_CHNAGES_CI=$OP_TEST_CHNAGES_CI"
echo "OP_TEST_CHNAGES_DOC=$OP_TEST_CHNAGES_DOCS"
echo "OP_TEST_CHNAGES_STREAM_COMMUNITY=$OP_TEST_CHNAGES_STREAM_COMMUNITY"
echo "OP_TEST_CHNAGES_STREAM_UPSTREAM=$OP_TEST_CHNAGES_STREAM_UPSTREAM"


echo "op_test_ready=${OP_TEST_READY}"
echo "op_release_ready=${OP_RELEASE_READY}"
echo "op_test_stream=${OP_TEST_STREAM_NAME}"
echo "op_test_name=${OP_TEST_OPERATOR_NAME}"
echo "op_test_version=${OP_TEST_OPERATOR_VERSION}"
echo "op_test_ci_yaml_only=$OP_TEST_CI_YAML_ONLY"
echo "op_test_op_delete=$OP_TEST_OP_DELETE"
echo "op_test_ver_overwrite=$OP_TEST_VER_OVERWRITE"

echo "::set-output name=op_test_ready::${OP_TEST_READY}"
echo "::set-output name=op_release_ready::${OP_RELEASE_READY}"

echo "::set-output name=op_test_stream::${OP_TEST_STREAM_NAME}"
echo "::set-output name=op_test_name::${OP_TEST_OPERATOR_NAME}"
echo "::set-output name=op_test_version::${OP_TEST_OPERATOR_VERSION}"

echo "::set-output name=op_test_ci_yaml_only::${OP_TEST_CI_YAML_ONLY}"
echo "::set-output name=op_test_op_delete::${OP_TEST_OP_DELETE}"
echo "::set-output name=op_test_ver_overwrite::${OP_TEST_VER_OVERWRITE}"
