#!/usr/bin/env bash

for f in "$(cd "$(dirname ${BASH_SOURCE[0]})/.." && pwd)"/lib/*; do
  . "$f"
done

export_color



if [[ -f $KUBECONFIG  ]]; then
    printf "Find kube config %s\t[ ${OK} ${KUBECONFIG} ${NC} ]\n"  | expand  -t 50 ;

    CURRENT_CONTEXT="$(kubectl config current-context)"

    if [[  "${CURRENT_CONTEXT}" != "" ]]; then
      printf "Find kube context %s\t[ ${OK} ${CURRENT_CONTEXT}  ${NC} ]\n"  | expand  -t 50 ;

      CLUSTER="$(kubectl config view -o jsonpath="{.contexts[?(@.name=='$CURRENT_CONTEXT')].context.cluster}")"

      if [[  "${CLUSTER}" != "" ]]; then

        CLUSTER_URL="$(kubectl config view -o jsonpath="{.clusters[?(@.name=='$CLUSTER')].cluster.server}")"

        echo ${CLUSTER_URL#*//} | sed -e "s/:/ /" | while read ip port
        do
          {
            printf "Try kube master %s\t[ ${WARN} Trying $ip:$port ${NC} ]\n"  | expand  -t 50
            set -e
            nc -zvw3 $ip $port 2> /dev/null
          } || {
            printf "Try kube master %s\t[ ${ERR} Not responding on $ip:$port ${NC} ]\n"  | expand  -t 50 >&2
            exit 1
          }
          if kubectl cluster-info | grep -q 'run
          ning'; then
            printf "Try kube master %s\t[ ${OK} $ip:$port ${NC} ]\n"  | expand  -t 50 ;
          else
            printf "Try kube master %s\t[ ${ERR} Not running on $ip:$port ${NC} ]\n"  | expand  -t 50 >&2
            exit 1
          fi
        done

      else
        printf "Find kube cluster %s\t[ ${WARN} Not found ${NC} ]\n"  | expand  -t 50; make minikube.start;
      fi
    else
      printf "Find kube context %s\t[ ${WARN} Not found  ${NC} ]\n"  | expand  -t 50; make minikube.start;
    fi
else
    printf "Find kube config %s\t[ ${WARN} Not found ${NC} ]\n"  | expand  -t 50; make minikube.start;
fi