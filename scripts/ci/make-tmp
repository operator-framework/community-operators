#!/usr/bin/env bash
rm -rf /tmp/env.conf

for f in "$(cd "$(dirname ${BASH_SOURCE[0]})/.." && pwd)"/lib/*; do
  . "$f"
done

export_color

export PKG_FILE="$(find "$OP_PATH" -name "*.package.yaml" -print -quit)"
export PKG_NAME="$(yq r "$PKG_FILE" "packageName")"

if [[ -z "$OP_VER" || ! "$OP_VER" =~ $SEMVER_REGEX ]]; then
  {
      export OP_VER="$(python3 /scripts/utils/parse-version-and-channels.py -p "$PKG_FILE" -c "$OP_CHANNEL")"
      printf "Operator version detected %s\t[ ${OK} $OP_VER ${NC} ]\n" | expand  -t 50 >&2
  } || {
     >&2 echo "Operator version cannot be detected."
    printf "Operator version cannot be detected %s\t[ ${ERR} FAILED ${NC} ]\n" | expand  -t 50 >&2
    exit 1
  }
  if [[ -z "$OP_VER" || ! "$OP_VER" =~ $SEMVER_REGEX ]]; then
    printf "Operator version not valid. %s\t[ ${ERR} FAILED ${NC} ]\n" | expand  -t 50 >&2
    exit 1
  fi
fi

export CSV_FILE="$(find "$OP_PATH" -name "*${OP_VER}.clusterserviceversion.yaml" -print -quit)"


if [[ -f $CSV_FILE ]]; then

  if [[ "$NAMESPACE" == '' ]]; then
    export NAMESPACE=$(python3 /scripts/lib-python/cluster/get-op-namespace.py -o "$PKG_NAME" -c "$CSV_FILE")
  fi

  # Create a namespace if necessary.
  if ! kubectl get namespace "$NAMESPACE" > /dev/null 2>&1; then
    printf "Creating namespace %s\t[ ${WARN} Processing ${NC} ]\n" | expand  -t 50 >&2
    kubectl create namespace "$NAMESPACE" > /dev/null
    kubectl label namespace "$NAMESPACE" operator=test > /dev/null
    printf "Creating namespace %s\t[ ${OK} OK ${NC} ]\n" | expand  -t 50 >&2
  fi

  echo -e "TMP=$(mktemp -d 2>/dev/null || mktemp -d)\nNAMESPACE=$NAMESPACE\nOP_VER=$OP_VER" > /tmp/env.conf

else 
  >&2 echo "CSV file for version ${OP_VER} not found test cannot continue"

  exit 1;
fi