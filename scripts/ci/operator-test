#!/usr/bin/env bash

# This script transforms an operator dir structured in the style of
# community-operators into one expected by operator-registry, inserts the
# scorecard proxy container, and proxy kubeconfig secret, volume, and mount
# into a CSV, creates CR's from CSV metadata, deploys the operator with the
# OLM in a local cluster, and runs the SDK scorecard against the operator.
set -e

. ./scripts/ci/env
KUBECONFIG=~/.kube/config


#trap_add_exit "rm -rf $TMP"
set -u

# Define names for resource types.
export DEP_NAME="$(yq r "$CSV_FILE" "spec.install.spec.deployments[0].name")"
declare -A OBJECTS

export OBJECTS=(
  ["catalogsource"]="$(yq r "$CATALOGSOURCE_FILE" "metadata.name")"
  ["subscription"]="$(yq r "$SUBSCRIPTION_FILE" "metadata.name")"
  ["csv"]="$CSV_NAME"
  ["deployment"]="$DEP_NAME"
)

echo "Apply OPERATOR GROUP file"
export OBJECTS+=(["operatorgroup"]="$(yq r "$OPERATOR_GROUP_FILE" "metadata.name")")


echo "Create namespace"
# Create a namespace if necessary.
if ! kubectl get namespace "$NAMESPACE" > /dev/null 2>&1; then
  kubectl create namespace "$NAMESPACE"
fi

>&2 echo "Applying object to cluster"

apply_objects_incluster "$DEPLOY_DIR"
# Clean up all created resources, CSV, and CRD's.
echo "Setup trap on exit"
trap_add_exit "delete_objects_incluster $DEPLOY_DIR $NAMESPACE"
trap_add_exit "delete_objects_incluster $ABS_BUNDLE_PATH $NAMESPACE"

>&2 echo "Checking subscriptions if passes"
# Check that subscription is picked up
check_subscription_passes "${PKG_NAME}-sub" "$NAMESPACE" "$PKG_NAME"

# Wait for csv, then check that clusterserviceversion has Succeeded
sleep 6
>&2 echo "Checking csv if passes"
check_csv_passes "$CSV_NAME" "$NAMESPACE"

>&2 echo "Waiting for deployment"
# Wait for the deployment specified in the CSV to rollout successfully.
wait_on_deployment "$DEP_NAME" "$NAMESPACE"

# Run scorecard tests on the operator.
# TODO: run against multiple CR's. Right now the scorecard only works with one
# CR.
>&2 echo "Running scorecard trough all CR"

for cr_file in $(find "$CR_DIR" -name "*.cr.yaml" -print -quit); do
  >&2 echo -e "\n\nRunning operator-sdk scorecard against "$CSV_FILE" with "$cr_file""
  >&2 operator-sdk scorecard \
    --cr-manifest "$cr_file" \
    --crds-dir "$ABS_BUNDLE_PATH" \
    --olm-deployed \
    --csv-path "$CSV_FILE" \
    --namespace "$NAMESPACE" \
    --init-timeout 60 \
    --proxy-image "$SC_PROXY_IMAGE" \
    --kubeconfig "$KUBECONFIG" \
    --verbose

  # If scorecard errors out, print out operator logs
  if [[ $? != 0 ]]; then
    >&2 echo "\nFAIL: Scorecard test errored out. Printing operator state:"
    LOG_FILE="${TMP}/info.log"
    log_operator_state $LOG_FILE OBJECTS $NAMESPACE
     >&2 cat $LOG_FILE
  else
    echo "PASS: Scorecard test passed"
  fi
done
