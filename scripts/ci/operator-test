#!/usr/bin/env bash

# This script transforms an operator dir structured in the style of
# community-operators into one expected by operator-registry, inserts the
# scorecard proxy container, and proxy kubeconfig secret, volume, and mount
# into a CSV, creates CR's from CSV metadata, deploys the operator with the
# OLM in a local cluster, and runs the SDK scorecard against the operator.
set -e

. ./scripts/ci/env
KUBECONFIG=~/.kube/config


#trap_add_exit "rm -rf $TMP"
set -u

# Define names for resource types.
export DEP_NAME="$(yq r "$CSV_FILE" "spec.install.spec.deployments[0].name")"
declare -A OBJECTS

export OBJECTS=(
  ["catalogsource"]="$(yq r "$CATALOGSOURCE_FILE" "metadata.name")"
  ["subscription"]="$(yq r "$SUBSCRIPTION_FILE" "metadata.name")"
  ["csv"]="$CSV_NAME"
  ["deployment"]="$DEP_NAME"
)

echo "Apply OPERATOR GROUP file"
if [[ -f "$OPERATOR_GROUP_FILE" ]]; then
    export OBJECTS+=(["operatorgroup"]="$(yq r "$OPERATOR_GROUP_FILE" "metadata.name")")
fi

>&2 echo "Applying object to cluster"

apply_objects_incluster "$DEPLOY_DIR"
# Clean up all created resources, CSV, and CRD's.
echo "Setup trap on exit"

>&2 echo "Checking subscriptions if passes"
# Check that subscription is picked up
check_subscription_passes "${PKG_NAME}-sub" "$NAMESPACE" "$PKG_NAME"

# Wait for csv, then check that clusterserviceversion has Succeeded
sleep 6
>&2 echo "Checking csv if passes"
check_csv_passes "$CSV_NAME" "$NAMESPACE"

>&2 echo "Waiting for deployment"
# Wait for the deployment specified in the CSV to rollout successfully.
wait_on_deployment "$DEP_NAME" "$NAMESPACE"

