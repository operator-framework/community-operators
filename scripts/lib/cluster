#!/usr/bin/env bash

function wait_on_deployment() {
  local dep="$1"
  local namespace="$2"
  local retries=20 # 2 minute timeout

  while ! kubectl rollout status -w "deployment/${dep}" --namespace=${namespace}; do
      sleep 6
      retries=$((retries - 1))
      if [[ $retries == 0 ]]; then
        echo "failed to rollout deployloyment \"$dep\""
        exit 1
      fi
      echo "retrying check rollout status for deployment \"$dep\"..."
  done
}

function check_cluster_available() {
  local cluster_name="$1"

  if [[ -z "$KUBECONFIG" ]]; then
    echo "KUBECONFIG not set"
    return 1
  fi

  if ! kubectl cluster-info; then
    echo "Cluster \"${cluster_name}.devcluster.openshift.com\" unreachable."
    return 1
  fi
}

# apply_objects_incluster creates in-cluster objects from manifests in
# $1. Objects are created in a particular order so those a CSV needs are
# present at install time:
# Secrets -> OperatorGroups -> all other Kinds
function apply_objects_incluster() {
  local deploy_dir="$1"

  declare -a secrets op_groups others
  local kind
  for f in $(find "$deploy_dir" -maxdepth 1 -name "*.yaml"); do
    kind="$(yq r "$f" "kind")"
    if [[ "$kind" == "Secret" ]]; then
      secrets+=("$f")
    elif [[ "$kind" == "OperatorGroup" ]]; then
      op_groups+=("$f")
    else
      others+=("$f")
    fi
  done
  for f in ${secrets[@]} ${op_groups[@]} ${others[@]}; do
    kubectl apply -f "$f"
  done
}

# delete_objects_incluster deletes cluster resources using manifests in $1.
function delete_objects_incluster() {
  local deploy_dir="$1"
  local namespace="$2"

  for f in $(find "$deploy_dir" -maxdepth 1 -name "*.yaml" -print); do
    kubectl delete --ignore-not-found=true "$(yq r "$f" "kind" | awk '{ print tolower($0) }')" "$(yq r "$f" "metadata.name")" --namespace="$namespace"
  done
}

function log_operator_state() {
  local log_file="$1"
  local var=$(declare -p "$2")
  eval "declare -A objects="${var#*=}
  local namespace="$3"

  local obj_list obj
  for k in "${!objects[@]}"; do
    obj_list="${objects[$k]}"
    for obj in $obj_list; do
      echo -e "\n${k}: $(echo "$obj" | cut -d' ' -f1)\n" >> "$log_file"
      kubectl describe "$k" $obj --namespace="$namespace" >> "$log_file" 2>&1 || true
      echo -e "\n---\n" >> "$log_file"
    done
  done
  kubectl describe pods --namespace="$namespace" >> "$log_file" 2>&1
}

function get_op_namespace() {
  local csv_file="$1"
  local op_name="$2"

  declare -A modes
  while read -r mode; do
    modes["$(echo "$mode" | jq -r ".type")"]="$(echo "$mode" | jq -r ".supported")"
  done < <(yq r --tojson "$csv_file" "spec.installModes" | jq -c '.[]')

  if [[ ${modes["AllNamespaces"]} == "true" ]]; then
    echo "operators"
  elif [[ ${modes["SingleNamespace"]} == "true" ]]; then
    echo "$op_name"
  else
    # Operators should have at least one of SingleNamespace, AllNamespaces true.
    echo "Both SingleNamespace and AllNamespaces cannot be false"
    exit 1
  fi
}
