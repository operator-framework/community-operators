apiVersion: operators.coreos.com/v1alpha1
kind: ClusterServiceVersion
metadata:
  annotations:
    alm-examples: '[]'
    capabilities: Basic Install
    categories: Storage
    certified: 'false'
    containerImage: quay.io/screeley44/aws-s3-provisioner:v1.0.0
    createdAt: 2019-05-02 16:12:00
    description: Manage the full lifecycle of installing, configuring and managing
      AWS S3 Provisioner.
    repository: https://github.com/yard-turkey/aws-s3-provisioner
    support: Community
  name: awss3operator.v1.0.1
  namespace: placeholder
spec:
  customresourcedefinitions:
    owned: []
    required:
    - description: instance of an AWS S3 Bucket
      displayName: Object Bucket
      kind: ObjectBucket
      name: objectbuckets.objectbucket.io
      version: v1alpha1
    - description: Request for an AWS S3 Bucket
      displayName: Object Bucket Claim
      kind: ObjectBucketClaim
      name: objectbucketclaims.objectbucket.io
      version: v1alpha1
  description: "AWS S3 Operator will deploy the AWS S3 Provisioner which will dynamically\
    \ or statically\nprovision AWS S3 Bucket storage and access. The operator deploys\
    \ the ObjectBucket (OB) and ObjectBucketClaim (OBC)\nCustomResourceDefinitions.\
    \ The OB/OBC model follows the traditional Kubernetes PV/PVC pattern, when an\
    \ OBC is detected\nthe operator will act on the OBC to either provision a brand\
    \ new S3 Bucket in AWS or gain access to an existing\nS3 Bucket in AWS. The operator\
    \ produces an OB and ConfigMap and Secret which can then be consumed by application\
    \ pods.\n**Important Note**: Currently, while in preview, this operator does not\n\
    support automatic upgrades. You must remove the old version of the operator\n\
    manually before installing a new version.\n## Using AWS S3 Operator\n### Administrator\
    \ Creates Secret\nThis secret will contain the elevated/admin privileges needed\
    \ by the provisioner\nto properly access and create S3 Buckets and IAM users and\
    \ policies. The AWS Access ID\nand AWS Secret Key will be needed for this.\n1.\
    \ Create the Kubernetes Secret for the Provisioner's Owner Access.\n```yaml\n\
    apiVersion: v1\nkind: Secret\nmetadata:\n  name: s3-bucket-owner [1]\n  namespace:\
    \ s3-provisioner [2]\ntype: Opaque\ndata:\n  AWS_ACCESS_KEY_ID: *base64 encoded\
    \ value* [3]\n  AWS_SECRET_ACCESS_KEY: *base64 encoded value* [4]\n```\n1. Name\
    \ of the secret, this will be referenced in StorageClass.\n1. Namespace where\
    \ the Secret will exist.\n1. Your AWS_ACCESS_KEY_ID base64 encoded.\n1. Your AWS_SECRET_ACCESS_KEY\
    \ base64 encoded.\n```\n # kubectl create -f creds.yaml\nsecret/s3-bucket-owner\
    \ created\n```\n### Administrator Creates StorageClass\nThe StorageClass defines\
    \ the name of the provisioner and holds other properties that are needed to provision\
    \ a new bucket, including\nthe Owner Secret and Namespace, and the AWS Region.\n\
    #### Greenfield Example:\nFor Greenfield, a new, dynamic bucket will be generated.\n\
    1. Create the Kubernetes StorageClass for the Provisioner.\n```yaml\nkind: StorageClass\n\
    apiVersion: storage.k8s.io/v1\nmetadata:\n  name: s3-buckets [1]\nprovisioner:\
    \ aws-s3.io/bucket [2]\nparameters:\n  region: us-west-1 [3]\n  secretName: s3-bucket-owner\
    \ [4]\n  secretNamespace: s3-provisioner [5]\nreclaimPolicy: Delete [6]\n```\n\
    1. Name of the StorageClass, this will be referenced in the User ObjectBucketClaim.\n\
    1. Provisioner name\n1. AWS Region that the StorageClass will serve\n1. Name of\
    \ the bucket owner Secret created above\n1. Namespace where the Secret will exist\n\
    1. reclaimPolicy (Delete or Retain) indicates if the bucket can be deleted when\
    \ the OBC is deleted.\n**NOTE:** the absence of the `bucketName` Parameter key\
    \ in the storage class indicates this is a new bucket and its name is based on\
    \ the bucket name fields in the OBC.\n```\n # kubectl create -f storageclass-greenfield.yaml\n\
    storageclass.storage.k8s.io/s3-buckets created\n```\n#### Brownfield Example:\n\
    For brownfield, the StorageClass defines the name of the provisioner and the name\
    \ of the existing bucket. It also includes other properties needed by the target\n\
    provisioner, including: the Owner Secret and Namespace, and the AWS Region\n1.\
    \ Create the Kubernetes StorageClass for the Provisioner.\n```yaml\nkind: StorageClass\n\
    apiVersion: storage.k8s.io/v1\nmetadata:\n  name: s3-existing-buckets [1]\nprovisioner:\
    \ aws-s3.io/bucket [2]\nparameters:\n  bucketName: my-existing-bucket [3]\n  region:\
    \ us-west-1 [4]\n  secretName: s3-bucket-owner [5]\n  secretNamespace: s3-provisioner\
    \ [6]\n```\n1. Name of the StorageClass, this will be referenced in the User ObjectBucketClaim.\n\
    1. Provisioner name\n1. Name of the existing bucket\n1. AWS Region that the StorageClass\
    \ will serve\n1. Name of the bucket owner Secret created above\n1. Namespace for\
    \ that bucket owner secret\n**NOTE:** the storage class's `reclaimPolicy` is ignored\
    \ for existing buckets.\n```\n # kubectl create -f storageclass-brownfield.yaml\n\
    storageclass.storage.k8s.io/s3-buckets created\n```\n### User Creates ObjectBucketClaim\n\
    An ObjectBucketClaim follows the same concept as a PVC, in that\nit is a request\
    \ for Object Storage, the user doesn't need to\nconcern him/herself with the underlying\
    \ storage, just that\nthey need access to it. The user will work with the cluster/storage\n\
    administrator to get the proper StorageClass needed and will\nthen request access\
    \ via the OBC.\n#### Greenfield Request Example:\n1. Create the ObjectBucketClaim.\n\
    ```yaml\napiVersion: objectbucket.io/v1alpha1\nkind: ObjectBucketClaim\nmetadata:\n\
    \  name: myobc [1]\n  namespace: s3-provisioner [2]\nspec:\n  generateBucketName:\
    \ mybucket [3]\n  bucketName: my-awesome-bucket [4]\n  storageClassName: s3-buckets\
    \ [5]\n```\n1. Name of the OBC\n1. Namespace of the OBC\n1. Name prepended to\
    \ a random string used to generate a bucket name. It is ignored if bucketName\
    \ is defined\n1. Name of new bucket which must be unique across all AWS regions,\
    \ otherwise an error occurs when creating the bucket. If present, this name overrides\
    \ `generateName`\n1. StorageClass name\n**NOTE:** if both `generateBucketName`\
    \ and `bucketName` are omitted, and the storage class does _not_ define a bucket\
    \ name, then a new, random bucket name is generated with no prefix.\n```\n # kubectl\
    \ create -f obc-brownfield.yaml\nobjectbucketclaim.objectbucket.io/myobc created\n\
    ```\n#### Brownfield Request Example:\n1. Create the ObjectBucketClaim.\n```yaml\n\
    apiVersion: objectbucket.io/v1alpha1\nkind: ObjectBucketClaim\nmetadata:\n  name:\
    \ myobc [1]\n  namespace: s3-provisioner [2]\nspec:\n  storageClassName: s3-existing-buckets\
    \ [3]\n```\n1. Name of the OBC\n1. Namespace of the OBC\n1. StorageClass name\n\
    **NOTE:** in the OBC here there is no reference to the bucket's name. This is\
    \ defined in the storage class and is not a concern of the user creating the claim\
    \ to this bucket.  An OBC does have fields for defining a bucket name for greenfield\
    \ use only.\n```\n # kubectl create -f obc-brownfield.yaml\nobjectbucketclaim.objectbucket.io/myobc\
    \ created\n```\n### Results and Recap\nLet's pause for a moment and digest what\
    \ just happened.\nAfter creating the OBC, and assuming the S3 provisioner is running,\
    \ we now have\nthe following Kubernetes resources:\n.  a global ObjectBucket (OB)\
    \ which contains: bucket endpoint info (including region and bucket name), a reference\
    \ to the OBC, and a reference to the storage class. Unique to S3, the OB also\
    \ contains the bucket Amazon Resource Name (ARN).Note: there is always a 1:1 relationship\
    \ between an OBC and an OB.\n.  a ConfigMap in the same namespace as the OBC,\
    \ which contains the same endpoint data found in the OB.\n.  a Secret in the same\
    \ namespace as the OBC, which contains the AWS key-pairs needed to access the\
    \ bucket.\nAnd of course, we have a *new* AWS S3 Bucket which you should be able\
    \ to see via the AWS Console.\n*ObjectBucket*\n```yaml\n # kubectl get ob obc-s3-provisioner-my-awesome-bucket\
    \ -o yaml\napiVersion: objectbucket.io/v1alpha1\nkind: ObjectBucket\nmetadata:\n\
    \  creationTimestamp: \"2019-04-03T15:42:22Z\"\n  generation: 1\n  name: obc-s3-provisioner-my-awesome-bucket\n\
    \  resourceVersion: \"15057\"\n  selfLink: /apis/objectbucket.io/v1alpha1/objectbuckets/obc-s3-provisioner-my-awesome-bucket\n\
    \  uid: 0bfe8e84-576d-4c4e-984b-f73c4460f736\nspec:\n  Connection:\n    additionalState:\n\
    \      ARN: arn:aws:iam::<accountid>:policy/my-awesome-bucket-vSgD5 [1]\n    \
    \  UserName: my-awesome-bucket-vSgD5 [2]\n    endpoint:\n      additionalConfig:\
    \ null\n      bucketHost: s3-us-west-1.amazonaws.com\n      bucketName: my-awesome-bucket\
    \ [3]\n      bucketPort: 443\n      region: us-west-1\n      ssl: true\n     \
    \ subRegion: \"\"\n  claimRef: null [4]\n  reclaimPolicy: null\n  storageClassName:\
    \ s3-buckets [5]\n```\n1. The AWS Policy created for this user and bucket.\n1.\
    \ The new user generated by the Provisioner to access this existing bucket.\n\
    1. The bucket name.\n1. The reference to the OBC (not filled in yet).\n1. The\
    \ reference to the StorageClass used.\n*ConfigMap*\n```yaml\n # kubectl get cm\
    \ myobc -n s3-provisioner -o yaml\napiVersion: v1\ndata:\n  BUCKET_HOST: s3-us-west-1.amazonaws.com\
    \ [1]\n  BUCKET_NAME: my-awesome-bucket [2]\n  BUCKET_PORT: \"443\"\n  BUCKET_REGION:\
    \ us-west-1\n  BUCKET_SSL: \"true\"\n  BUCKET_SUBREGION: \"\"\nkind: ConfigMap\n\
    metadata:\n  creationTimestamp: \"2019-04-01T19:11:38Z\"\n  finalizers:\n  - objectbucket.io/finalizer\n\
    \  name: my-awesome-bucket\n  namespace: s3-provisioner\n  resourceVersion: \"\
    892\"\n  selfLink: /api/v1/namespaces/s3-provisioner/configmaps/my-awesome-bucket\n\
    \  uid: 2edcc58a-aff8-4a29-814a-ffbb6439a9cd\n```\n1. The AWS S3 host.\n1. The\
    \ name of the new bucket we are gaining access to.\n*Secret*\n```yaml\n # kubectl\
    \ get secret my-awesome-bucket -n s3-provisioner -o yaml\napiVersion: v1\ndata:\n\
    \  AWS_ACCESS_KEY_ID: *the_new_access_id* [1]\n  AWS_SECRET_ACCESS_KEY: *the_new_access_key_value*\
    \ [2]\nkind: Secret\nmetadata:\n  creationTimestamp: \"2019-04-03T15:42:22Z\"\n\
    \  finalizers:\n  - objectbucket.io/finalizer\n  name: my-awesome-bucket\n  namespace:\
    \ s3-provisioner\n  resourceVersion: \"15058\"\n  selfLink: /api/v1/namespaces/s3-provisioner/secrets/screeley-provb-5\n\
    \  uid: 225c71a5-9d75-4ccc-b41f-bfe91b272a13\ntype: Opaque\n```\n1. The new generated\
    \ AWS Access Key ID.\n1. The new generated AWS Secret Access Key.\nWhat happened\
    \ in AWS? The first thing we do on any OBC request is\ncreate a new IAM user and\
    \ generate Access ID and Secret Keys.\nThis allows us to also better control ACLs.\
    \ We also create a policy\nin IAM which we then attach to the user and bucket.\
    \ We also created a new bucket, called *my-awesome-bucket*.\nWhen the OBC is deleted\
    \ all of its Kubernetes and AWS resources will also be deleted, which includes:\n\
    the generated OB, Secret, ConfigMap, IAM user, and policy.\nIf the _retainPolicy_\
    \ on the StorageClass for this bucket is *\"Delete\"*, then, in addition to the\
    \ above cleanup, the physical bucket is also deleted.\n**NOTE:** The actual bucket\
    \ is only deleted if the Storage Class's _reclaimPolicy_ is \"Delete\".\n### User\
    \ Creates Pod\nNow that we have our bucket and connection/access information,\
    \ a pod\ncan be used to access the bucket. This can be done in several different\n\
    ways, but the key here is that the provisioner has provided the proper\nendpoints\
    \ and keys to access the bucket. The user then simply references\nthe keys.\n\
    1. Create a Sample Pod to Access the Bucket.\n```yaml\napiVersion: v1\nkind: Pod\n\
    metadata:\n  name: photo1\n  labels:\n    name: photo1\nspec:\n  containers:\n\
    \  - name: photo1\n    image: docker.io/screeley44/photo-gallery:latest\n    imagePullPolicy:\
    \ Always\n    envFrom:\n    - configMapRef:\n        name: my-awesome-bucket <1>\n\
    \    - secretRef:\n        name: my-awesome-bucket <2>\n    ports:\n    - containerPort:\
    \ 3000\n      protocol: TCP\n```\n1. Name of the generated configmap from the\
    \ provisioning process\n1. Name of the generated secret from the provisioning\
    \ process\n*[Note]* Generated ConfigMap and Secret are same name as the OBC!\n\
    Lastly, expose the pod as a service so you can access the url from a browser.\
    \ In this example,\nI exposed as a LoadBalancer\n```\n  # kubectl expose pod photo1\
    \ --type=LoadBalancer --name=photo1 -n your-namespace\n```\nTo access via a url\
    \ use the EXTERNAL-IP\n```\n  # kubectl get svc photo1\n  NAME               \
    \          TYPE           CLUSTER-IP       EXTERNAL-IP                       \
    \                                        PORT(S)          AGE\n  photo1      \
    \                 LoadBalancer   100.66.124.105   a00c53ccb3c5411e9b6550a7c0e50a2a-2010797808.us-east-1.elb.amazonaws.com\
    \   3000:32344/TCP   6d\n```\n**NOTE:** This is just one example of a Pod that\
    \ can utilize the bucket information,\nthere are several ways that these pod applications\
    \ can be developed and therefore\nthe method of getting the actual values needed\
    \ from the Secrets and ConfigMaps\nwill vary greatly, but the idea remains the\
    \ same, that the pod consumes the generated\nConfigMap and Secret created by the\
    \ provisioner.\n"
  displayName: AWS S3 Operator
  icon:
  - base64data: 
    mediatype: image/svg+xml
  install:
    spec:
      clusterPermissions:
      - rules:
        - apiGroups:
          - objectbucket.io
          resources:
          - objectbucketclaims
          - objectbuckets
          verbs:
          - '*'
        serviceAccountName: aws-s3-provisioner-1-0-1
      deployments:
      - name: aws-s3-provisioner
        spec:
          replicas: 1
          selector:
            matchLabels:
              k8s-app: aws-s3-provisioner
          template:
            metadata:
              labels:
                k8s-app: aws-s3-provisioner
            spec:
              containers:
              - image: quay.io/screeley44/aws-s3-provisioner:v1.0.0
                name: aws-s3-provisioner
              serviceAccount: aws-s3-provisioner-1-0-1
      permissions:
      - rules:
        - apiGroups:
          - storage.k8s.io
          resources:
          - storageclasses
          verbs:
          - '*'
        - apiGroups:
          - apiextensions.k8s.io
          resources:
          - customresourcedefinitions
          verbs:
          - '*'
        - apiGroups:
          - ''
          resources:
          - pods
          - services
          - endpoints
          - persistentvolumeclaims
          - persistentvolumes
          - events
          - secrets
          - configmaps
          verbs:
          - '*'
        - apiGroups:
          - apps
          resources:
          - deployments
          verbs:
          - '*'
        serviceAccountName: aws-s3-provisioner-1-0-1
    strategy: deployment
  installModes:
  - supported: true
    type: OwnNamespace
  - supported: true
    type: SingleNamespace
  - supported: true
    type: MultiNamespace
  - supported: false
    type: AllNamespaces
  keywords:
  - awss3provisioner
  - aws
  - S3
  - provisioner
  - buckets
  labels:
    alm-owner-awss3: awss3operator
    alm-status-descriptors: awss3operator.v1.0.1
  links:
  - name: AWS S3 Provisioner
    url: https://github.com/yard-turkey/aws-s3-provisioner
  - name: Provisioner Examples
    url: https://github.com/yard-turkey/aws-s3-provisioner/tree/master/examples
  - name: Operator Documentation
    url: https://github.com/yard-turkey/awss3operator
  maintainers:
  - email: openshift-operators@redhat.com
    name: Community
  maturity: alpha
  provider:
    name: Community
  skips:
  - awss3operator.1.0.0
  selector:
    matchLabels:
      alm-owner-awss3: awss3operator
  version: 1.0.1

