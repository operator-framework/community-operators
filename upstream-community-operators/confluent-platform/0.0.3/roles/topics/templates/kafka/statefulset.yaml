---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka
  namespace: "{{ meta.namespace }}"
  labels:
    app: kafka
    release: confluent
    operator: ansible
spec:
  serviceName: kafka
  replicas: {{ kafka.size }}
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: OrderedReady
  selector:
     matchLabels:
       app: kafka
  template:
    metadata:
      labels:
        app: kafka
        configHash: "{{ kafka_configmap | checksum }}"
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: "app"
                operator: In
                values:
                - kafka
            topologyKey: "kubernetes.io/hostname"
      containers:
      - name: kafka
        image: "confluentinc/cp-kafka:{{ version }}"
        ports:
        - name: plaintext
          containerPort: {{ kafka.plaintext_port }}
        - name: ssl
          containerPort: {{ kafka.ssl_port }}
        - name: sasl
          containerPort: {{ kafka.sasl_port }}
        - name: jmx
          containerPort: {{ kafka.jmx_port }}
        envFrom:
        - configMapRef:
            name: kafka
        env:
        - name: KAFKA_BROKER_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: KAFKA_ZOOKEEPER_CONNECT
          value: "{{ kafka_zookeeper_connect }}"
        - name: KAFKA_LISTENERS
          value: "PLAINTEXT://:{{ kafka.plaintext_port }}"
        - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
          value: "PLAINTEXT:PLAINTEXT"
        command:
        - "sh"
        - "-exc"
        - |
          unset KAFKA_PORT
          KAFKA_BROKER_ID=$((${HOSTNAME##*-})) && \
          export KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://${HOSTNAME}.kafka.{{ meta.namespace }}:{{ kafka.plaintext_port }} && \
          /etc/confluent/docker/run
{% if kafka.persistent == true %}
        volumeMounts:
        - name: data
          mountPath: /opt/kafka/data
{% endif %}
{% if kafka.persistent == true %}
      volumes:
      - name: data
        emptyDir: {}
{% endif %}
      serviceAccountName: kafka
{% if kafka.persistent == true %}
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: {{ kafka.storage_size }}
{% endif %}
---
