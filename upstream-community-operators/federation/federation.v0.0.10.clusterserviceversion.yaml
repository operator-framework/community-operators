#! validate-crd: deploy/chart/templates/0000_30_02-clusterserviceversion.crd.yaml
#! parse-kind: ClusterServiceVersion
apiVersion: operators.coreos.com/v1alpha1
kind: ClusterServiceVersion
metadata:
  name: federation.v0.0.10
  namespace: placeholder
  annotations:
    capabilities: Basic Install
    categories: "OpenShift Optional, Integration & Delivery"
    alm-examples: |-
      [
        {
          "apiVersion": "clusterregistry.k8s.io/v1alpha1",
          "kind": "Cluster",
          "metadata": {
            "name": "cluster-name"
          },
          "spec": {
            "authInfo": {},
            "kubernetesApiEndpoints": {
              "serverEndpoints": [
                {
                  "clientCIDR": "0.0.0.0/0",
                  "serverAddress": "https://cluster-name.example.com:6443"
                }
              ]
            }
          }
        },
        {
          "apiVersion": "core.federation.k8s.io/v1alpha1",
          "kind": "FederatedCluster",
          "metadata": {
            "name": "cluster-name"
          },
          "spec": {
            "clusterRef": {
              "name": "cluster-name"
            },
            "secretRef": {
              "name": "<name-of-secret>"
            }
          }
        },
        {
          "apiVersion": "core.federation.k8s.io/v1alpha1",
          "kind": "FederatedTypeConfig",
          "metadata": {
            "name": "deployments.extensions"
          },
          "spec": {
            "federatedType": {
              "group": "types.federation.k8s.io",
              "kind": "FederatedDeployment",
              "pluralName": "federateddeployments",
              "version": "v1alpha1"
            },
            "namespaced": true,
            "propagationEnabled": true,
            "target": {
              "group": "extensions",
              "kind": "Deployment",
              "pluralName": "deployments",
              "version": "v1beta1"
            }
          }
        },
        {
          "apiVersion": "multiclusterdns.federation.k8s.io/v1alpha1",
          "kind": "Domain",
          "metadata": {
            "name": "test-domain"
            },
          "spec": {
            "domain": "your.domain.name"
            }
        },
        {
          "apiVersion": "multiclusterdns.federation.k8s.io/v1alpha1",
          "kind": "ServiceDNSRecord",
          "metadata": {
            "name": "test-service"
            },
          "spec": {
            "domainRef": "test-domain",
            "recordTTL": 300
            }
        },
        {
          "apiVersion": "federatedservicestatuses.core.federation.k8s.io/v1alpha1",
          "kind": "FederatedServiceStatus",
          "metadata": {
            "name": "test-federatedservice-status"
            },
          "spec": {
            "clusterStatus": {
               "clusterName": "test-cluster", 
               "status": "cluster-status"
                }
            }
        },
        {
          "apiVersion": "multiclusterdns.federation.k8s.io/v1alpha1",
          "kind": "DNSEndpoint",
          "metadata": {
            "name": "service-test-service"
            },
          "spec": {
            "endpoints": [
              {
                "dnsName": "test-service.test-namespace.test-domain.svc.your.domain.name",
                "recordTTL": 300,
                "recordType": "A",
                "targets": [
                  "test-cluster"
                  ]
              }
              ]
            }
          },
        {
          "apiVersion": "multiclusterdns.federation.k8s.io/v1alpha1",
          "kind": "IngressDNSRecord",
          "metadata": {
            "name": "test-ingress"
            },
          "spec": {
            "hosts": [
              "ingress.example.com"
              ],
              "recordTTL": 300
            }
        },
        {
          "apiVersion": "scheduling.federation.k8s.io/v1alpha1",
          "kind": "ReplicaSchedulingPreference",
          "metadata": {
            "name": "test-deployment"
            },
          "spec": {
            "targetKind": "FederatedDeployment",
            "totalReplicas": 10,
            "rebalance": true,
            "clusters": {
              "cluster1": {
                "weight": 2
                },
              "cluster2": {
                "weight": 3
                }
              }
            }
        },
        {
          "apiVersion": "propagatedversions.core.federation.k8s.io/v1alpha1",
          "kind": "PropagatedVersion",
          "metadata": {
            "name": "test-propagation"
            },
          "spec": {
            "clusterVersions": {
               "clusterName": "test-cluster",
               "version": "0.0.10"  
                } 
            }
        },
        {
          "apiVersion": "core.federation.k8s.io/v1alpha1",
          "kind": "FederationConfig",
          "metadata": {
            "name": "test-federationconfig"
            },
          "spec": {
            "scope": "Cluster",
            "controllerDuration": {
              "availableDelay": "20s",
              "unavailableDelay": "60s",
              "clusterMonitorPeriod": "40s"
              },
            "leaderElect": {
              "leaseDuration": "15s",
              "renewDeadline": "10s",
              "retryPeriod": "5s",
              "resourceLock": "configmaps"
              },
            "featureGates": [
              {
                "name": "PushReconciler",
                "enabled": true
                },
              {
                "name": "SchedulerPreferences",
                "enabled": true
              },
             {
               "name": "CrossClusterServiceDiscovery",
               "enabled": true
              },
              {
               "name": "FederatedIngress"
               }
            ]
          },
          "enabled": true
        }
      ]
    description: Gain Hybrid Cloud capabilities between your clusters with Kubernetes Federation.
    certified: "false"
    containerImage: "quay.io/kubernetes-multicluster/federation-v2:v0.0.10"
    createdAt: "2019-05-06T18:56:00Z"
    repository: https://github.com/openshift/federation-v2-operator
spec:
  displayName: Federation
  description: |
    Kubernetes Federation is a tool to sync (aka "federate") a set of Kubernetes
    objects from a "source" into a set of other clusters. Common use-cases
    include federating Namespaces across all of your clusters or rolling out an
    application across several geographically distributed clusters. The
    Kubernetes Federation Operator runs all of the components under the hood to
    quickly get up and running with this powerful concept. Federation is a key
    part of any Hybrid Cloud capability.

    Kubernetes Federation is currently in preview. This operator will be updated
    as we release new versions of the [upstream repository](https://github.com/kubernetes-sigs/federation-v2).

    **Important Note**: Currently, while in preview, this operator does not
    support automatic upgrades. You must remove the old version of the operator
    manually before installing a new version.

    ## Using Federation

    This deploys Federation in a namespace-scoped configuration which handles
    the resources only in the namespace where federation is deployed. For
    example, if you subscribe to this package in namespace `my-namespace`,
    federation will be deployed to manage objects _only_ in `my-namespace` in
    the host cluster and target clusters.

    After installing Federation instance, you will use the `kubefedctl` command
    line tool to do two types of configuration:
      
    - Configure federation to connect to your target clusters with `kubefedctl join`
    - Create new federation APIs for the API types you want to federate with `kubefedctl enable`


    **Important Note**: To add federation capability to your namespace, you are
    only required to install federation in the hosting cluster; there is no need
    to install federation in the target clusters (and no effect gained from
    doing so).


    **Important Note**: The instructions in this guide refer to the namespace
    where federation is installed as `<namespace>` in command examples. The
    upstream user guide uses `federation-system` as the name of this namespace.

    ### Get the kubefedctl CLI tool

    Before you use federation, you should ensure that you're using the binary
    for this version. You can get it from the releases on GitHub.

        curl -Ls https://github.com/kubernetes-sigs/federation-v2/releases/download/v0.0.10/kubefedctl.tgz | tar xz

    ### Joining Clusters

    Use the `kubefedctl join` command to connect clusters you want federation to
    spread resources to. `kubefedctl join` reads information about how to connect
    to the joining cluster and the cluster hosting federation from your
    KUBECONFIG.

        kubefedctl join cluster-name \
          --cluster-context mycluster \            # name of a KUBECONFIG context for the cluster to join
          --host-cluster-context mycluster \       # name of a KUBECONFIG context for the hosting cluster
          --add-to-registry \                      # add clusters to the cluster-registry
          --federation-namespace=<namespace> \     # namespace where federation is deployed
          -v 2
    
    `kubefedctl join` creates `FederatedCluster` and `Cluster` resources named
    `cluster-name` to represent the joined cluster.

    `Cluster` resources hold endpoint information about clusters federation connects to.

        kubectl get clusters -n <namespace>
        NAME            READY     AGE
        cluster-name    True      6s
    
        kubectl get clusters cluster-name -o yaml
        apiVersion: clusterregistry.k8s.io/v1alpha1
        kind: Cluster
        metadata:
          creationTimestamp: 2019-03-12T22:51:47Z
          generation: 1
          name: cluster-name
          namespace: <namespace>
          resourceVersion: "42099"
          selfLink: /apis/clusterregistry.k8s.io/v1alpha1/namespaces/<namespace>/clusters/cluster-name
          uid: 6aa9f784-4519-11e9-baaf-02de7fb9d5b2
        spec:
          authInfo: {}
          kubernetesApiEndpoints:
            serverEndpoints:
            - clientCIDR: 0.0.0.0/0
              serverAddress: https://cluster-name.example.com:6443
        status: {}

    `FederatedCluster` resources pair `Cluster` resources to secrets holding
    `KUBECONFIG` information that federation uses to connect to `Clusters`.

        kubectl get federatedclusters -n <namespace>
        NAME            READY     AGE
        cluster-name    True      7s
        
        kubectl get federatedclusters cluster-name -o yaml                                                                                                                                                                     
        apiVersion: core.federation.k8s.io/v1alpha1
        kind: FederatedCluster
        metadata:
          creationTimestamp: 2019-03-12T22:51:48Z
          generation: 1
          name: cluster-name
          namespace: <namespace>
          resourceVersion: "145794"
          selfLink: /apis/core.federation.k8s.io/v1alpha1/namespaces/<namespace>/federatedclusters/cluster-name                                                                                                         
          uid: 6ad4738c-4519-11e9-baaf-02de7fb9d5b2
        spec:
          clusterRef:
            name: cluster-name
          secretRef:
            name: cluster-name-nfs7m
        status:
          conditions:
          - lastProbeTime: 2019-03-13T01:38:02Z
            lastTransitionTime: 2019-03-12T22:57:52Z
            message: /healthz responded with ok
            reason: ClusterReady
            status: "True"
            type: Ready
          region: us-east-1
          zone: us-east-1a

    See also the upstream [user guide](https://github.com/kubernetes-sigs/federation-v2/blob/v0.0.10/docs/userguide.md#join-clusters) for more information.

    ### Unjoining Clusters

    Use the `kubefedctl unjoin` command to remove a previously joined cluster.

        kubefedctl unjoin mycluster \
          --host-cluster-context mycluster \       # name of a KUBECONFIG context for the hosting cluster
          --cluster-context mycluster \            # name of a KUBECONFIG context for the cluster to unjoin
          --federation-namespace=<namespace> \     # namespace where federation is deployed
          --remove-from-registry \                 # Remove the cluster from the cluster registry running in the host cluster context.
          -v 2

    This command deletes the `FederatedCluster` and `Cluster` for the unjoining
    cluster.

        kubectl get federatedclusters -n <namespace>
        No resources found.
    
        kubectl get clusters -n <namespace>
        No resources found.
    
    ### Enabling federation for new API types

    Federation allows you to spread any API type to target clusters. Use
    `kubefedctl enable <API type>` for the API types you want to add federation
    capability for. Enabling federation for an API type does two things:

    1. Creates a new API type to represent the federation API surface for that type


    2. Creates a `FederatedTypeConfig` resource that tells the federation
      controller to handle the new federation API


        kubefedctl enable deployments.extensions \
          --federation-namespace=<namespace>
    
    Running this command produces a new CRD in the hosting cluster to be the
    federation API surface for the deployments resource.

        kubectl get crd/federateddeployments.types.federation.k8s.io
        NAME                                           CREATED AT
        federateddeployments.types.federation.k8s.io   2019-05-16T14:18:27Z

    `FederatedTypeConfig` resources configure federation to watch the new
    federation API surface created by `kubefedctl enable`.

        kubectl get federatedtypeconfigs -n <namespace>
        NAME                     AGE
        deployments.extensions   74s


    **Important Note**: Federation of a CRD requires that the CRD be installed
    on host cluster and all member clusters. If the CRD is not installed on a member cluster,
    propagation to that cluster will fail.


    **Important Note**: You must enable Federation support for Namespaces in
    this configuration before other types will work. Use `kubefedctl enable
    namespaces`.


    **Important Note**: Federation is currently installed **without** any
    `FederatedTypeConfig` resources created. You must run `kubefedctl enable`
    operation for each API type you want to add federation capability for.

    See also the upstream [user guide](https://github.com/kubernetes-sigs/federation-v2/blob/v0.0.10/docs/userguide.md#enabling-federation-of-an-api-type) for more information.

    ### Example: federating deployments

    Let's do an example using the `deployments` resource.

        kubectl create -f - <<END
        apiVersion: types.federation.k8s.io/v1alpha1
        kind: FederatedDeployment
        metadata:
          name: hello
          namespace: <namespace>
        spec:
          placement:
            clusterNames:
            - cluster-name
          template:
            apiVersion: extensions/v1beta1
            kind: Deployment
            metadata:
              name: hello
            spec:
              replicas: 1
              template:
                metadata:
                  labels:
                    app: hello
                spec:
                  containers:
                  - name: hello
                    image: openshift/hello-openshift:latest
                    ports:
                    - containerPort: 80
        END

    You should be able to see the deployment in the target cluster!

        kubectl get deployments hello -n <namespace> --context=<mycluster>
        NAME    READY   UP-TO-DATE   AVAILABLE   AGE
        hello   1/1     1            1           33s

    ### Disabling federation for an API type

    Use the `kubefedctl disable` command to disable federation for an API type.

        kubefedctl disable deployments.extensions --federation-namespace=<namespace>

    This will disable the propagation of federated deployments and delete the corresponding  
    Federated API resource.

    To fully remove the API surface, use the `--delete-crd` flag:

        kubefedctl disable deployments.extensions --federation-namespace=<namespace> --delete-crd

        Disabled propagation for FederatedTypeConfig "federation-test/deployments.extensions"
        Verifying propagation controller is stopped for FederatedTypeConfig "federation-test/deployments.extensions"
        Propagation controller for FederatedTypeConfig "federation-test/deployments.extensions" is stopped
        customresourcedefinition "federateddeployments.types.federation.k8s.io" deleted
        federatedtypeconfig "federation-test/deployments.extensions" deleted

    See also the upstream [user guide](https://github.com/kubernetes-sigs/federation-v2/blob/v0.0.10/docs/userguide.md#disabling-federation-of-an-api-type) for more information.
  keywords: ['kubernetes', 'federation', 'hybrid', 'hybrid cloud', 'multi-cluster', 'cluster']
  version: 0.0.10
  icon:
  - base64data: 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
    mediatype: image/png
  maturity: alpha
  provider:
    name: Red Hat
  maintainers:
  - email: kubefed-operator@redhat.com
    name: Kubefed Team
  labels:
    alm-owner-federation: federation
    alm-status-descriptors: federation.v0.0.10
  links:
  - name: Federation Concepts
    url: https://github.com/kubernetes-sigs/federation-v2#concepts
  installModes:
  - type: OwnNamespace
    supported: true
  - type: SingleNamespace
    supported: true
  - type: MultiNamespace
    supported: false
  - type: AllNamespaces
    supported: false
  install:
    strategy: deployment
    spec:
      permissions:
      - serviceAccountName: federation-controller-manager
        rules:
        - apiGroups:
          - clusterregistry.k8s.io
          resources:
          - clusters
          verbs:
          - "*"
        - apiGroups:
          - core.federation.k8s.io
          resources:
          - "*"
          verbs:
          - "*"
        - apiGroups:
          - types.federation.k8s.io
          resources:
          - "*"
          verbs:
          - "*"
        - apiGroups:
          - multiclusterdns.federation.k8s.io
          resources:
          - "*"
          verbs:
          - "*"
        - apiGroups:
          - scheduling.federation.k8s.io
          resources:
          - "*"
          verbs:
          - "*"
        - apiGroups:
          - ""
          resources:
          - pods
          - services
          - endpoints
          - persistentvolumeclaims
          - events
          - configmaps
          - secrets
          verbs:
          - "*"
        - apiGroups:
          - apps
          resources:
          - deployments
          - daemonsets
          - replicasets
          - statefulsets
          verbs:
          - "*"
      deployments:
      - name: federation-controller-manager
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: federation-controller-manager
          template:
            metadata:
              labels:
                app: federation-controller-manager
            spec:
              containers:
                - name: controller-manager
                  image: quay.io/kubernetes-multicluster/federation-v2:v0.0.10
                  resources:
                    limits:
                      cpu: 100m
                      memory: 128Mi
                    requests:
                      cpu: 100m
                      memory: 64Mi
                  command:
                    - /root/controller-manager
                  args:
                    - --federation-namespace=$(FEDERATION_NAMESPACE)
                    - -v=5
                    - --logtostderr
                  imagePullPolicy: IfNotPresent
                  env:
                  - name: DEFAULT_FEDERATION_SCOPE
                    value: Namespaced
                  - name: FEDERATION_NAMESPACE
                    valueFrom:
                      fieldRef:
                        fieldPath: metadata.namespace
              restartPolicy: Always
              terminationGracePeriodSeconds: 5
              serviceAccountName: federation-controller-manager
              serviceAccount: federation-controller-manager
  customresourcedefinitions:
    owned:
      - description: Represents endpoint information about a remote cluster
        displayName: Cluster Registry Application
        kind: Cluster
        name: clusters.clusterregistry.k8s.io
        version: v1alpha1
      - description: Represents a Domain name and nameserver for use with multicluster DNS
        displayName: Domain
        kind: Domain
        name: domains.multiclusterdns.federation.k8s.io
        version: v1alpha1
      - description: Represents a Cluster that Federation can spread resources to
        displayName: FederatedCluster Resource
        kind: FederatedCluster
        name: federatedclusters.core.federation.k8s.io
        version: v1alpha1
      - description: Programs Federation to be aware of a new API type
        displayName: Federation Type Configuration
        kind: FederatedTypeConfig
        name: federatedtypeconfigs.core.federation.k8s.io
        version: v1alpha1
      - description: Represents the status of a FederatedService
        displayName: Federated service status
        kind: FederatedServiceStatus
        name: federatedservicestatuses.core.federation.k8s.io
        version: v1alpha1
      - description: Represents a configuration of a Federation controller
        displayName: FederationConfig
        kind: FederationConfig
        name: federationconfigs.core.federation.k8s.io
        version: v1alpha1
      - description: Represents information about the version of a federated resource
        displayName: PropagatedVersion Resource
        kind: PropagatedVersion
        name: propagatedversions.core.federation.k8s.io
        version: v1alpha1
      - description: Represents an instance of a DNSEndpoint resource
        displayName: DNSEndpoint Resource
        kind: DNSEndpoint
        name: dnsendpoints.multiclusterdns.federation.k8s.io
        version: v1alpha1
      - description: Represents an instance of a MultiClusterIngressDNSRecord resource
        displayName: MultiClusterIngressDNSRecord Resource
        kind: IngressDNSRecord
        name: ingressdnsrecords.multiclusterdns.federation.k8s.io
        version: v1alpha1
      - description: Represents an instance of a MultiClusterServiceDNSRecord resource
        displayName: MultiClusterServiceDNSRecord Resource
        kind: ServiceDNSRecord
        name: servicednsrecords.multiclusterdns.federation.k8s.io
        version: v1alpha1
      - description: Represents an instance of a ReplicaSchedulingPreference resource
        displayName: ReplicaSchedulingPreference Resource
        kind: ReplicaSchedulingPreference
        name: replicaschedulingpreferences.scheduling.federation.k8s.io
        version: v1alpha1
