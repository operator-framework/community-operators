apiVersion: operators.coreos.com/v1alpha1
kind: ClusterServiceVersion
metadata:
  annotations:
    alm-examples: |-
      [
        {
          "apiVersion": "core.kubefed.k8s.io/v1beta1",
          "kind": "KubeFedCluster",
          "metadata": {
            "name": "cluster-name",
            "namespace": "<namespace>"
          },
          "spec": {
            "apiEndpoint": "https://172.17.0.2:6443",
            "secretRef": {
              "name": "<name-of-secret>"
            }
          }
        },
        {
          "apiVersion": "core.kubefed.k8s.io/v1alpha1",
          "kind": "ClusterPropagatedVersion",
          "metadata": {
            "name": "test-propagation"
            },
          "spec": {
            "clusterVersions": {
               "clusterName": "test-cluster",
               "version": "0.1.0"  
                } 
            }
        },
        {
          "apiVersion": "core.kubefed.k8s.io/v1beta1",
          "kind": "FederatedTypeConfig",
          "metadata": {
            "name": "deployments.extensions"
          },
          "spec": {
            "federatedType": {
              "group": "types.kubefed.k8s.io",
              "kind": "FederatedDeployment",
              "pluralName": "federateddeployments",
              "version": "v1alpha1"
            },
            "namespaced": true,
            "propagationEnabled": true,
            "target": {
              "group": "extensions",
              "kind": "Deployment",
              "pluralName": "deployments",
              "version": "v1beta1"
            }
          }
        },
        {
          "apiVersion": "multiclusterdns.kubefed.k8s.io/v1alpha1",
          "kind": "Domain",
          "metadata": {
            "name": "test-domain"
            },
          "spec": {
            "domain": "your.domain.name"
            }
        },
        {
          "apiVersion": "multiclusterdns.kubefed.k8s.io/v1alpha1",
          "kind": "ServiceDNSRecord",
          "metadata": {
            "name": "test-service"
            },
          "spec": {
            "domainRef": "test-domain",
            "recordTTL": 300
            }
        },
        {
          "apiVersion": "federatedservicestatuses.core.kubefed.k8s.io/v1alpha1",
          "kind": "FederatedServiceStatus",
          "metadata": {
            "name": "test-federatedservice-status"
            },
          "spec": {
            "clusterStatus": {
               "clusterName": "test-cluster", 
               "status": "cluster-status"
                }
            }
        },
        {
          "apiVersion": "multiclusterdns.kubefed.k8s.io/v1alpha1",
          "kind": "DNSEndpoint",
          "metadata": {
            "name": "service-test-service"
            },
          "spec": {
            "endpoints": [
              {
                "dnsName": "test-service.test-namespace.test-domain.svc.your.domain.name",
                "recordTTL": 300,
                "recordType": "A",
                "targets": [
                  "test-cluster"
                  ]
              }
              ]
            }
          },
        {
          "apiVersion": "multiclusterdns.kubefed.k8s.io/v1alpha1",
          "kind": "IngressDNSRecord",
          "metadata": {
            "name": "test-ingress"
            },
          "spec": {
            "hosts": [
              "ingress.example.com"
              ],
              "recordTTL": 300
            }
        },
        {
          "apiVersion": "scheduling.kubefed.k8s.io/v1alpha1",
          "kind": "ReplicaSchedulingPreference",
          "metadata": {
            "name": "test-deployment"
            },
          "spec": {
            "targetKind": "FederatedDeployment",
            "totalReplicas": 10,
            "rebalance": true,
            "clusters": {
              "cluster1": {
                "weight": 2
                },
              "cluster2": {
                "weight": 3
                }
              }
            }
        },
        {
          "apiVersion": "core.kubefed.k8s.io/v1alpha1",
          "kind": "PropagatedVersion",
          "metadata": {
            "name": "test-propagation"
            },
          "spec": {
            "clusterVersions": {
               "clusterName": "test-cluster",
               "version": "0.1.0"  
                } 
            }
        },
        {
          "apiVersion": "core.kubefed.k8s.io/v1beta1",
          "kind": "KubeFedConfig",
          "metadata": {
            "name": "test-kubefedconfig"
            },
          "spec": {
            "scope": "Cluster",
            "leaderElect": {
              "leaseDuration": "15s",
              "renewDeadline": "10s",
              "retryPeriod": "5s"
              },
            "featureGates": [
              {
                "name": "PushReconciler",
                "configuration": "Enabled"
                },
              {
                "name": "SchedulerPreferences",
                "configuration": "Enabled"
              },
             {
               "name": "CrossClusterServiceDiscovery",
               "configuration": "Enabled"
              },
              {
               "name": "FederatedIngress",
               "configuration": "Enabled"
              }
            ]
          }
        },
        {
          "apiVersion": "operator.kubefed.io/v1alpha1",
          "kind": "KubeFed",
          "metadata": {
            "name": "kubefed"
            },
          "spec": {
            "scope": "Namespaced"
            }
        }
      ]
    capabilities: Basic Install
    categories: OpenShift Optional, Integration & Delivery
    certified: "false"
    containerImage: quay.io/openshift/kubefed-operator:v0.1.0-rc3
    createdAt: "2019-06-14T00:00:00Z"
    description: Gain Hybrid Cloud capabilities between your clusters with Kubernetes
      Federation.
    repository: https://github.com/openshift/kubefed-operator
    support: Red Hat
  name: kubefed-operator.v0.1.0
  namespace: placeholder
spec:
  apiservicedefinitions: {}
  customresourcedefinitions:
    owned:
    - description: ClusterPropagatedVersion holds version information about the state propagated from kubefed APIs
      displayName: ClusterPropagatedVersion
      kind: ClusterPropagatedVersion
      name: clusterpropagatedversions.core.kubefed.k8s.io
      version: v1alpha1
    - description: DNSEndpoint is the CRD wrapper for Endpoint which is designed to act as a source of truth for external-dns.
      displayName: DNSEndpoint
      kind: DNSEndpoint
      name: dnsendpoints.multiclusterdns.kubefed.k8s.io
      version: v1alpha1
    - description: Domain is the DNS zone associated with the kubefed control plane
      displayName: Domain
      kind: Domain
      name: domains.multiclusterdns.kubefed.k8s.io
      version: v1alpha1
    - description: KubeFedCluster configures kubefed to be aware of a Kubernetes cluster and encapsulates the details necessary to communicate with the cluster.
      displayName: KubeFedCluster
      kind: KubeFedCluster
      name: kubefedclusters.core.kubefed.k8s.io
      version: v1beta1
    - description: FederatedServiceStatus is the observed status of the resource for a named cluster.
      displayName: FederatedServiceStatus
      kind: FederatedServiceStatus
      name: federatedservicestatuses.core.kubefed.k8s.io
      version: v1alpha1
    - description: FederatedTypeConfig programs kubefed to know about a single API type - the "target type" - that a user wants to federate.
      displayName: FederatedTypeConfig 
      kind: FederatedTypeConfig
      name: federatedtypeconfigs.core.kubefed.k8s.io
      version: v1beta1
    - description: KubeFedConfig
      displayName: KubeFedConfig 
      kind: KubeFedConfig
      name: kubefedconfigs.core.kubefed.k8s.io
      version: v1beta1
    - description: IngressDNSRecord
      displayName: IngressDNSRecord 
      kind: IngressDNSRecord
      name: ingressdnsrecords.multiclusterdns.kubefed.k8s.io
      version: v1alpha1
    - description: PropagatedVersion
      displayName: PropagatedVersion
      kind: PropagatedVersion
      name: propagatedversions.core.kubefed.k8s.io
      version: v1alpha1
    - description: ReplicaSchedulingPreference
      displayName: ReplicaSchedulingPreference
      kind: ReplicaSchedulingPreference
      name: replicaschedulingpreferences.scheduling.kubefed.k8s.io
      version: v1alpha1
    - description: ServiceDNSRecord
      displayName: ServiceDNSRecord
      kind: ServiceDNSRecord
      name: servicednsrecords.multiclusterdns.kubefed.k8s.io
      version: v1alpha1
    - description: KubeFed
      displayName: KubeFed
      kind: KubeFed
      name: kubefeds.operator.kubefed.io
      version: v1alpha1
  description: |
    Kubernetes Federation is a tool to sync (aka "federate") a set of Kubernetes
    objects from a "source" into a set of other clusters. Common use-cases
    include federating Namespaces across all of your clusters or rolling out an
    application across several geographically distributed clusters. The
    Kubernetes Federation Operator runs all of the components under the hood to
    quickly get up and running with this powerful concept. Federation is a key
    part of any Hybrid Cloud capability.

    **Important Note**: This operator is purely for prototyping purposes and not
    supported by any upstream community at this time.


    **Important Note**: Currently, while in preview, this operator does not
    support automatic upgrades. You must remove the old version of the operator
    manually before installing a new version.


    ## Using Federation

    This deploys Federation in a namespace-scoped configuration which handles
    the resources only in the namespace where federation is deployed. For
    example, if you subscribe to this package in namespace `my-namespace`,
    federation will be deployed to manage objects _only_ in `my-namespace` in
    the host cluster and target clusters.

    After installing Federation instance, you will use the `kubefedctl` command
    line tool to do two types of configuration:
      
    - Configure federation to connect to your target clusters with `kubefedctl join`
    - Create new federation APIs for the API types you want to federate with `kubefedctl enable`


    **Important Note**: To add federation capability to your namespace, you are
    only required to install kubefed in the hosting cluster; there is no need
    to install kubefed in the target clusters (and no effect gained from
    doing so).


    **Important Note**: The instructions in this guide refer to the namespace
    where federation is installed as `<namespace>` in command examples. The
    upstream user guide uses `federation-system` as the name of this namespace.

    ### Get the kubefedctl CLI tool

    Before you use kubefed, you should ensure that you're using the binary
    for this version. You can get it from the releases on GitHub.

        curl -Ls https://github.com/kubernetes-sigs/kubefed/releases/download/v0.1.0-rc3/kubefedctl-0.1.0-rc3-linux-amd64.tgz | tar xz

    ### Joining Clusters

    Use the `kubefedctl join` command to connect clusters you want federation to
    spread resources to. `kubefedctl join` reads information about how to connect
    to the joining cluster and the cluster hosting federation from your
    KUBECONFIG.

        kubefedctl join cluster-name \
          --cluster-context mycluster \            # name of a KUBECONFIG context for the cluster to join
          --host-cluster-context mycluster \       # name of a KUBECONFIG context for the hosting cluster
          --kubefed-namespace=<namespace> \        # namespace where federation is deployed
          -v 2
    
    `kubefedctl join` creates `KubeFedCluster` and `Cluster` resources named
    `cluster-name` to represent the joined cluster.

    `KubeFedCluster` resources pair `Cluster` resources to secrets holding
    `KUBECONFIG` information that kubefed uses to connect to `Clusters`.

        kubectl get kubefedclusters -n <namespace>
        NAME            READY     AGE
        cluster-name    True      7s
        
        kubectl get kubefedclusters cluster-name -o yaml                                                                                                                                                                     
        apiVersion: v1
        items:
        - apiVersion: core.kubefed.k8s.io/v1beta1
          kind: KubeFedCluster
          metadata:
            creationTimestamp: "2019-06-07T19:42:16Z"
            generation: 1
            name: cluster1
            namespace: <namespace>
            resourceVersion: "1055"
            selfLink: /apis/core.kubefed.k8s.io/v1beta1/namespaces/federation-test/kubefedclusters/cluster1
            uid: 5ac7125d-895c-11e9-b736-0242ac110002
          spec:
            apiEndpoint: https://172.17.0.2:6443
            caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUN5RENDQWJDZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRFNU1EWXdOekU1TXpZek1Gb1hEVEk1TURZd05ERTVNell6TUZvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBS0M1Cjk0UDd3d2RaMjBEby8weGJYbVpGKzdweks0cEE5b1ZaVW4yRFNSckhGQldmYThrcnpyVmtkQmdjdnNIa044RGQKTndxdFRXbGd6Y2NMVEZjb1cwSGE3VjRHMWpGY2piU1JkNHhPaWp6SktqMTNCakh3RStJY2R5UnZJbmpaUVlQcgpta1ZUQWRocU1mL3IwY08wSHRTYkJweTJLV3FsRmsyajdTSUhkT3AvK0cwWGU0SS9BQXN3U0xxNTczdXo2V0xkCmFMSFBYRkFyaWh5cFlwWUxXSzZNZWRqUEp5R0MxL3NPMjh5T0RWRTFxSUhRL1Q3TUk1a0YyOGh4cHpCWEhpcE8KMWlYOVJNOGNXdktyVUozeU13NzNpQ3cxR2RhQk1tcDR0ZmpWdzJDQ3IwVU9BZmpUVGYzc2xkeUVJcmJTblUxZApCL0k1M0IrUXhQTHBzY3U4aCtFQ0F3RUFBYU1qTUNFd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFGVVNNcS9DbWlXSnhKNlVIY0RqQVc3eW1rUnMKWWh3VktUa3JDbWJVVDNRNUY5SVVGMDFtZGQ2TTdvWUkyWVJFM2J6MkJudU5jM095eGxKakNqNWRLN2FwaGUwSwpham92b3Y2VVhWd0RBQWFWTTNPb2pMODFRbzhHcStFTVpGQ2NITVlqcHlYUEE2c1duMEZFYnRFTTRKQTBYaXpSClgvdUpISWppOGtFdUlWdmNFZHQzYldaTG9rdTVzZ2RvYnBVYWI0WmMrRVpoNVJLazVwY1ByQnpQaUlUcTF0UzAKYTRlemMyRlFHbUEzNHlwUmxWb25jY2FmVWx4aWUwaklmMVlWdnZJVE41d1dKakc5VVpZdmpseGxNT2NjRzRxSwpscm1Wc2JJcytiQTRIWVFCdDEwOTkwR3VmakYybytLZDgwR3g1NkxGZEJvZzVrclZ3VzdOZUxEM0plOD0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
            secretRef:
              name: cluster1-jk4hm
          status:
            conditions:
            - lastProbeTime: "2019-06-07T19:42:32Z"
              lastTransitionTime: "2019-06-07T19:42:32Z"
              message: /healthz responded with ok
              reason: ClusterReady
              status: "True"
              type: Ready
        kind: List
        metadata:
          resourceVersion: ""
          selfLink: ""
    See also the upstream [user guide](https://github.com/kubernetes-sigs/kubefed/blob/master/docs/cluster-registration.md#joining-clusters) for more information.

    ### Unjoining Clusters

    Use the `kubefedctl unjoin` command to remove a previously joined cluster.

        kubefedctl unjoin mycluster \
          --host-cluster-context mycluster \       # name of a KUBECONFIG context for the hosting cluster
          --cluster-context mycluster \            # name of a KUBECONFIG context for the cluster to unjoin
          --kubefed-namespace=<namespace> \        # namespace where kubefed is deployed
          -v 2

    This command deletes the `KubeFedCluster` and `Cluster` for the unjoining
    cluster.

        kubectl get kubefedclusters -n <namespace>
        No resources found.
    
    ### Enabling federation for new API types

    kubefed allows you to spread any API type to target clusters. Use
    `kubefedctl enable <API type>` for the API types you want to add federation
    capability for. Enabling federation for an API type does two things:

    1. Creates a new API type to represent the federation API surface for that type


    2. Creates a `FederatedTypeConfig` resource that tells the federation
      controller to handle the new federation API


        kubefedctl enable deployments.extensions \
          --kubefed-namespace=<namespace>
    
    Running this command produces a new CRD in the hosting cluster to be the
    kubefed API surface for the deployments resource.

        kubectl get crd/federateddeployments.types.kubefed.k8s.io
        NAME                                           CREATED AT
        federateddeployments.types.kubefed.k8s.io   2019-05-16T14:18:27Z

    `FederatedTypeConfig` resources configure kubefed to watch the new
    kubefed API surface created by `kubefedctl enable`.

        kubectl get federatedtypeconfigs -n <namespace>
        NAME                     AGE
        deployments.extensions   74s


    **Important Note**: Federation of a CRD requires that the CRD be installed
    on host cluster and all member clusters. If the CRD is not installed on a member cluster,
    propagation to that cluster will fail.


    **Important Note**: You must enable Federation support for Namespaces in
    this configuration before other types will work. Use `kubefedctl enable
    namespaces`.


    **Important Note**: KubeFed is currently installed **without** any
    `FederatedTypeConfig` resources created. You must run `kubefedctl enable`
    operation for each API type you want to add federation capability for.

    See also the upstream [user guide](https://github.com/kubernetes-sigs/kubefed/blob/master/docs/userguide.md#enabling-federation-of-an-api-type) for more information.

    ### Example: federating deployments

    Let's do an example using the `deployments` resource.

        kubectl create -f - <<END
        apiVersion: types.kubefed.k8s.io/v1alpha1
        kind: FederatedDeployment
        metadata:
          name: hello
          namespace: <namespace>
        spec:
          placement:
            clusters:
            - name: cluster-name
          template:
            apiVersion: extensions/v1beta1
            kind: Deployment
            metadata:
              name: hello
            spec:
              replicas: 1
              template:
                metadata:
                  labels:
                    app: hello
                spec:
                  containers:
                  - name: hello
                    image: openshift/hello-openshift:latest
                    ports:
                    - containerPort: 80
        END

    You should be able to see the deployment in the target cluster!

        kubectl get deployments hello -n <namespace> --context=<mycluster>
        NAME    READY   UP-TO-DATE   AVAILABLE   AGE
        hello   1/1     1            1           33s

    ### Disabling federation for an API type

    Use the `kubefedctl disable` command to disable federation for an API type.

        kubefedctl disable deployments.extensions --kubefed-namespace=<namespace>

    This will disable the propagation of federated deployments and delete the corresponding  
    Federated API resource.

      To fully remove the API surface, use the `--delete-crd` flag:

        kubefedctl disable deployments.extensions --kubefed-namespace=<namespace> --delete-crd

        Disabled propagation for FederatedTypeConfig "<namespace>/deployments.extensions"
        Verifying propagation controller is stopped for FederatedTypeConfig "federation-test/deployments.extensions"
        Propagation controller for FederatedTypeConfig "<namespace>/deployments.extensions" is stopped
        customresourcedefinition "federateddeployments.types.kubefed.k8s.io" deleted
        federatedtypeconfig "<namespace>/deployments.extensions" deleted
  displayName: Kubefed Operator
  icon:
  - base64data: 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
    mediatype: image/png
  install:
    spec:
      clusterPermissions:
      - rules:
        - apiGroups:
          - apiextensions.k8s.io
          resources:
          - '*'
          verbs:
          - get
          - create
          - watch
          - list
          - update
        - apiGroups:
          - rbac.authorization.k8s.io
          resources:
          - '*'
          verbs:
          - get
          - create
          - watch
          - list
          - update
        - apiGroups:
          - scheduling.kubefed.k8s.io
          resources:
          - '*'
          verbs:
          - get
          - watch
          - list
          - update
        - apiGroups:
          - multiclusterdns.kubefed.k8s.io
          resources:
          - '*'
          verbs:
          - get
          - watch
          - list
          - create
          - update
          - delete
        - apiGroups:
          - core.kubefed.k8s.io
          resources:
          - '*'
          verbs:
          - get
          - watch
          - list
          - create
          - update
        - apiGroups:
          - types.kubefed.k8s.io
          resources:
          - '*'
          verbs:
          - get
          - watch
          - list
          - update
        - apiGroups:
          - ""
          resources:
          - namespaces
          verbs:
          - get
          - watch
          - list
        - apiGroups:
          - ""
          resources:
          - events
          verbs:
          - get
          - create
          - update
          - patch
        serviceAccountName: kubefed-operator
      deployments:
      - name: kubefed-operator
        spec:
          replicas: 1
          selector:
            matchLabels:
              name: kubefed-operator
          strategy: {}
          template:
            metadata:
              labels:
                name: kubefed-operator
            spec:
              containers:
              - args:
                - --filename=$(FILE_NAME)
                - --recursive=true
                command:
                - kubefed-operator
                env:
                - name: FILE_NAME
                  value: "deploy/resources"
                - name: WATCH_NAMESPACE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.annotations['olm.targetNamespaces']
                - name: POD_NAME
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.name
                - name: OPERATOR_NAME
                  value: kubefed-operator
                image: quay.io/openshift/kubefed-operator:v0.1.0-rc3
                imagePullPolicy: Always
                name: kubefed-operator
                resources: {}
              serviceAccountName: kubefed-operator
      permissions:
      - rules:
        - apiGroups:
          - ""
          resources:
          - pods
          - services
          - endpoints
          - persistentvolumeclaims
          - events
          - configmaps
          - secrets
          - serviceaccounts
          verbs:
          - '*'
        - apiGroups:
          - apps
          resources:
          - deployments
          - daemonsets
          - replicasets
          - statefulsets
          verbs:
          - '*'
        - apiGroups:
          - monitoring.coreos.com
          resources:
          - servicemonitors
          verbs:
          - get
          - create
        - apiGroups:
          - apps
          resourceNames:
          - kubefed-operator
          resources:
          - deployments/finalizers
          verbs:
          - update
        - apiGroups:
          - operator.kubefed.io
          resources:
          - '*'
          verbs:
          - '*'
        serviceAccountName: kubefed-operator
    strategy: deployment
  installModes:
  - supported: true
    type: OwnNamespace
  - supported: true
    type: SingleNamespace
  - supported: false
    type: MultiNamespace
  - supported: true
    type: AllNamespaces
  keywords:
  - kubernetes
  - federation
  - hybrid
  - hybrid cloud
  - multi-cluster
  - cluster
  links:
  - name: Documentation
    url: https://github.com/kubernetes-sigs/kubefed/tree/master/docs/
  - name: Source Repository
    url: https://github.com/kubernetes-sigs/kubefed/
  maintainers:
  - email: kubefed-operator@redhat.com
    name: Kubefed Team
  maturity: alpha
  provider:
    name: Red Hat
  version: 0.1.0
