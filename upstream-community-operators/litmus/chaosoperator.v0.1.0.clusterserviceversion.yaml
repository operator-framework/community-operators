apiVersion: operators.coreos.com/v1alpha1
kind: ClusterServiceVersion
metadata:
  name: chaosoperator.v0.1.0
  namespace: default 
  annotations:
    capabilities: Basic Install
    categories: "Integration & Delivery"
    containerImage: index.docker.io/litmuschaos/chaos-operator-ce:v0.1.0
    createdAt: 2019-07-15T10:28:08Z
    repository: https://github.com/litmuschaos/chaos-operator
    certified: "false"
    support: https://slack.openebs.io/
    alm-examples: |
      [
        {
          "apiVersion": "litmuschaos.io/v1alpha1",
          "kind": "ChaosEngine",
          "metadata": {
            "name": "sample-chaos",
            "namespace": "default"
          },
          "spec": {
            "appinfo": {
              "appns": "default",
              "applabel": "app=testapp",
              "appkind": "deployment"
            },
            "chaosServiceAccount": "default",
            "experiments": [
              {
                "name": "pod-delete",
                "spec": {
                  "components": null
                }
              }
            ]
          }
        }
      ]
    description: Chaos Engineering for Kubernetes
spec:
  displayName: Litmus Chaos Operator
  description: >
    **Litmus** is a chaos engineering framework for Kubernetes which helps ensure
    a consistent and reliable behavior of workloads. It strives to detect the real-world 
    issues which escape during unit and integration tests by injecting faults on the
    application & cluster components. With Litmus, the chaos experiment logic is packaged 
    into dedicated containers which makes them portable across Kubernetes platforms. 
    This containerization also helps to integrate Litmus into CI/CD environments.

    ## How It Works 

    The Litmus chaos operator is used by application developers and SREs to inject chaos 
    into the applications in a managed fashion. It automates the execution of chaos experiments
    based on a custom resource definition `(ChaosEngine)` which specifies the list of experiments 
    to be performed and also contains details of the application target. The chaos experiments 
    are themselves custom resource definitions `(chaosExperiment)` , holding specifics such as 
    chaos parameters, log levels etc., and are referenced by an `executor` pod, which is launched
    and managed by the operator. The status & eventually, results of the experiments are exposed 
    as prometheus metrics, in order to aid monitoring & integration with visualization platforms.

    ## Pre-Requisites

    Before creating the chaosEngine CR, perform the following steps to ensure successful chaos 
    injection.

    * Create the chaos experiment CRs for the faults you would like to inject against an application. 
      These are bundled together into helm charts based on the category & can be obtained [here](https://litmuschaos.github.io/chaos-charts/index.yaml)


    * Ensure that the application under test (AUT) is annotated in the following manner.

      ```
      kubectl annotate deployment/<app-deployment> litmuschaos.io/chaos="true" -n <app-namespace>
      ```

    ## Learn More About Litmus 
    
    * Refer the [docs](https://docs.litmuschaos.io)

    * To learn how to contribute, please read the contribution guide: 
      [contribution guide](https://github.com/litmuschaos/litmus/blob/master/CONTRIBUTING.md)

    * Litmus welcomes your feedback and contributions in any form possible.
      [Join our Community](https://slack.openebs.io/)
    
  keywords:
    - Litmus
    - ChaosEngineering
  version: 0.1.0
  maturity: alpha
  maintainers:
    - name: ksatchit
      email: karthik.s@mayadata.io
  minKubeVersion: 1.11.0
  provider:
    name: MayaData
  links:
    - name: Litmus Website
      url: https://litmuschaos.io
    - name: Source Code
      url: https://github.com/litmuschaos
  icon:
    - base64data: iVBORw0KGgoAAAANSUhEUgAAAKkAAACpCAYAAABQ1R0vAAADfUlEQVR4nOzdMW4cZRiA4dkoAjosUVASiQY6d4iO3IR0iAo6Cg4BN4CahgNEin0BWGoKAuIASxMgzY9W2ghhCVm21/O/Tp7nAPN9Wr36Z2eySe6PMRYouzd7AbiMSMkTKXkiJe/+jKGbzcbT2ktgjLFZY46TlDyRkidS8kRKnkjJEyl5IiVPpOSJlDyRkidS8kRKnkjJEyl5IiVPpORN+dHzTXzwyafL7198eaNrvP/Xn8vj99492k7cLicpeSIlT6TkiZQ8kZInUvJESp5IyRMpeSIlT6TkiZQ8kZInUvJESp5IyRMpeSIlT6TkiZQ8kZInUvJESp5IyRMpeSIlT6TkiZQ8kZInUvJESp5IyRMpeSIlT6TkiZQ8kZInUvJESp5IyRMpeSIlT6TkiZQ8kZInUvLu3H8l/vpvT5fv3n7rRtf4+ccflsdH24jbducivffs2fLhG6/d6BrPn/99tH24fW735ImUPJGSJ1LyREqeSMkTKXkiJU+k5ImUPJGSJ1LyREqeSMkTKXkiJU+k5ImUPJGSJ1LyREqeSMkTKXkiJU+k5ImUPJGSJ1LyREqeSMkTKXkiJU+k5ImUPJGSJ1LyREqeSMkTKXkiJU+k5ImUPJGSJ1LyREqeSMkTKXkiJU+k5ImUPJGSJ1LyREqeSMm7P3uBu+bk5GQ5PT2dvcZRbLfbZbfbzV7jUiK9on2gT548mb3GUTx8+HA5Ozubvcal3O7JEyl5IiVPpOSJlDyRkidS8kRKnkjJEyl5IiVPpOSJlDyRkidS8u7c70l3u91yfn5+o2tst9up8yvuwg+e9zZjjPWHbjbrD+XoxhibNea43ZMnUvJESp5Iua5f1xokUq7r6VqDZkX6crzDebVd/z3eFc2K9PtJczme1f7C/qz3pA+WZfll9cEcyx9jjJO1hk05SccY++8z386YzVF8teawKSfp8u9puv9e8+aUBbiu/VP96RhjtT9TnfZ0fzhNP5s1n2v7eM1Al9mvoMYY3yzL8vXMHbiSR2OM1f+Fs+nvSccY+9P089l7cKlHh0NlddO+k1602Ww+WpZl/yG8M3sX/uOnwy1+tfeiF00/SV/Y30bGGPuHqUeHD4a5zg+n5+nMQJfSSXrR4el/f7o+mL3LK2Yf5PbwYJuQjRReyNzu4f+IlDyRkidS8kRKnkjJEyl5IiXvnwAAAP//eI+ULPfWFXEAAAAASUVORK5CYII= 
      mediatype: image/png
  labels:
    alm-owner-openebs: chaosoperator
    operated-by: chaosoperator
  selector:
    matchLabels:
      alm-owner-openebs: chaosoperator
      operated-by: chaosoperator
  installModes:
    - type: OwnNamespace
      supported: true
    - type: SingleNamespace
      supported: true
    - type: MultiNamespace
      supported: false
    - type: AllNamespaces
      supported: false
  install:
    strategy: deployment
    spec:
      clusterPermissions:
        - serviceAccountName: chaos-operator
          rules:
            - apiGroups:
              - "*"
              resources:
              - clusterroles
              - clusterrolebindings
              verbs:
              - "*"
            - apiGroups:
              - "*"
              resources:
              - namespaces
              - services
              - serviceaccounts
              - pods
              - deployments
              - daemonsets
              - secrets
              - events
              - endpoints
              - configmaps
              - jobs
              verbs:
              - create
              - get
              - list
              - watch
              - update
              - patch
              - delete
            - apiGroups:
              - apiextensions.k8s.io
              resources:
              - customresourcedefinitions
              verbs:
              - create
              - get
              - list
              - update
              - patch
              - delete 
            - apiGroups:
              - litmuschaos.io
              resources:
              - chaosengines
              - chaosengines/finalizers
              - chaosengines/status
              - chaosexperiments
              - chaosexperiments/finalizers
              - chaosexperiments/status
              - chaosresults
              - chaosresults/finalizers
              - chaosresults/status
              verbs:
              - create
              - get
              - list
              - watch
              - patch
              - update
              - delete
      deployments:
        - name: chaos-operator
          spec:
            replicas: 1
            selector:
              matchLabels:
                name: chaos-operator
            strategy:
              type: RollingUpdate
            template:
              metadata:
                labels:
                  name: chaos-operator
                name: chaos-operator
              spec:
                containers:
                - name: chaos-operator
                  image: index.docker.io/litmuschaos/chaos-operator-ce:v0.1.0
                  imagePullPolicy: Always
                  env:
                  - name: WATCH_NAMESPACE
                    value: ""
                  - name: POD_NAME
                    valueFrom:
                      fieldRef:
                        fieldPath: metadata.name
                  - name: OPERATOR_NAME
                    value: "chaos-operator"
                  - name: SEC_RES_SA
                    value: "chaos-operator"
                serviceAccountName: chaos-operator
  customresourcedefinitions:
    owned:
      - name: chaosengines.litmuschaos.io
        version: v1alpha1
        kind: ChaosEngine
        displayName: ChaosEngine
        description: Represents the Chaos Schedule for an application
        resources:
          - kind: Service
            name: ''
            version: v1
          - kind: Pod
            name: ''
            version: v1
          - kind: 
        specDescriptors:
          - description: Application Information
            displayName: AppInfo
            path: appinfo
          - description: Service Account for Chaos
            displayName: ChaosServiceAccount
            path: chaosServiceAccount
          - description: Chaos Experiment List
            displayName: Experiments
            path: experiments
        statusDescriptors:
          - description: ChaosEngine Conditions 
            displayName: Conditions
            path: conditions
            x-descriptors:
              - 'urn:alm:descriptor:io.kubernetes.conditions'
