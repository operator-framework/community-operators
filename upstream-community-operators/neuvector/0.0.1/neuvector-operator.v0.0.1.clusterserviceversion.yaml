apiVersion: operators.coreos.com/v1alpha1
kind: ClusterServiceVersion
metadata:
  annotations:
    alm-examples: |-
      [
        {
          "apiVersion": "apm.neuvector.com/v1alpha1",
          "kind": "Neuvector",
          "metadata": {
            "name": "example-neuvector"
          },
          "spec": {
            "admissionwebhook": {
              "type": "ClusterIP"
            },
            "containerd": {
              "enabled": false,
              "path": "/var/run/containerd/containerd.sock"
            },
            "controller": {
              "apisvc": {
                "type": null
              },
              "azureFileShare": {
                "enabled": false,
                "secretName": null,
                "shareName": null
              },
              "configmap": {
                "data": null,
                "enabled": false
              },
              "enabled": true,
              "federation": {
                "managedsvc": {
                  "type": null
                },
                "mastersvc": {
                  "type": null
                }
              },
              "image": {
                "repository": "neuvector/controller"
              },
              "ingress": {
                "annotations": {
                  "ingress.kubernetes.io/protocol": "https"
                },
                "enabled": false,
                "host": null,
                "path": "/",
                "secretName": null,
                "tls": false
              },
              "pvc": {
                "accessModes": [
                  "ReadWriteMany"
                ],
                "enabled": false,
                "storageClass": null
              },
              "replicas": 3,
              "strategy": {
                "rollingUpdate": {
                  "maxSurge": 1,
                  "maxUnavailable": 0
                },
                "type": "RollingUpdate"
              }
            },
            "crdwebhook": {
              "type": "ClusterIP"
            },
            "crio": {
              "enabled": true,
              "path": "/var/run/crio/crio.sock"
            },
            "cve": {
              "updater": {
                "enabled": false,
                "image": {
                  "repository": "neuvector/updater",
                  "tag": "latest"
                },
                "schedule": "0 0 * * *"
              }
            },
            "docker": {
              "enabled": false,
              "path": "/var/run/docker.sock"
            },
            "enforcer": {
              "enabled": true,
              "image": {
                "repository": "neuvector/enforcer"
              },
              "tolerations": [
                {
                  "effect": "NoSchedule",
                  "key": "node-role.kubernetes.io/master"
                }
              ]
            },
            "exporter": {
              "CTRL_PASSWORD": "admin",
              "CTRL_USERNAME": "admin",
              "enabled": false,
              "image": {
                "repository": "neuvector/prometheus-exporter",
                "tag": "0.9.0"
              },
              "scrapping": true
            },
            "imagePullSecrets": "regsecret",
            "manager": {
              "enabled": true,
              "env": {
                "ssl": true
              },
              "image": {
                "repository": "neuvector/manager"
              },
              "ingress": {
                "annotations": {},
                "enabled": false,
                "host": null,
                "path": "/",
                "secretName": null,
                "tls": false
              },
              "svc": {
                "type": "NodePort"
              }
            },
            "openshift": true,
            "registry": "docker.io",
            "resources": {},
            "tag": "latest"
          }
        }
      ]
    capabilities: Seamless Upgrades
    categories: "Monitoring, Networking, Security"
    description: "NeuVector delivers the only cloud-native Kubernetes security platform with uncompromising end-to-end protection from DevOps vulnerability protection to automated run-time security, and featuring a true Layer 7 container firewall.\n\nThe NeuVector Operator runs  in the openshift container platform to deploy and manage the NeuVector Security cluster components. The NeuVector operator contains all necessary information to deploy NeuVector using helm charts. You simply need to install the NeuVector operator from the OpenShift built-in operator hub and create NeuVector the instance. You can modify the NeuVector installation configuration by modifying yaml while creating the NeuVector instance such as imagePullSecrets, tag version, etc. Please refer to https://github.com/neuvector/neuvector-helm for the values that can be modifed during installation. To upgrade to a newer version of NeuVector, just reapply the NeuVector instance with desired tag , which in turn pulls the specified NeuVector image tags and upgrades as per upgrade plan configured on the helm chart. \n\n**Complete below steps to ceate secret for accessing  Docker or similar registry before installation .**\n\n1. Create the NeuVector namespace\n\n         oc new-project  neuvector\n2. Configure OpenShift to pull images from the private NeuVector registry on Docker Hub\n\n         oc create secret docker-registry regsecret -n neuvector --docker-server=https://index.docker.io/v1/ --docker-username=your-name --docker-password=your-pword --docker-email=your-email\n\t\t\t\t \n\nWhere ’your-name’ is your Docker username, ’your-pword’ is your Docker password, ’your-email’ is your Docker email.\n"
    containerImage: neuvector/neuvector-operator:v0.0.1
    createdAt: 2019-11-18T02:09:59Z
    support: support@neuvector.com
    certified: "false"
    repository: https://github.com/neuvector/neuvector-operator
  name: neuvector-operator.v0.0.1
  namespace: placeholder
spec:
  apiservicedefinitions: {}
  customresourcedefinitions:
    owned:
    - kind: Neuvector
      description: A Full LifeCycle Container Security Platform
      displayName: Neuvector
      name: neuvectors.apm.neuvector.com
      version: v1alpha1
  description: "NeuVector delivers the only cloud-native Kubernetes security platform with uncompromising end-to-end protection from DevOps vulnerability protection to automated run-time security, and featuring a true Layer 7 container firewall.\n\nThe NeuVector Operator runs  in the openshift container platform to deploy and manage the NeuVector Security cluster components. The NeuVector operator contains all necessary information to deploy NeuVector using helm charts. You simply need to install the NeuVector operator from the OpenShift built-in operator hub and create NeuVector the instance. You can modify the NeuVector installation configuration by modifying yaml while creating the NeuVector instance such as imagePullSecrets, tag version, etc. Please refer to https://github.com/neuvector/neuvector-helm for the values that can be modifed during installation. To upgrade to a newer version of NeuVector, just reapply the NeuVector instance with desired tag , which in turn pulls the specified NeuVector image tags and upgrades as per upgrade plan configured on the helm chart. \n\n**Complete below steps to ceate secret for accessing  Docker or similar registry before installation .**\n\n1. Create the NeuVector namespace\n\n         oc new-project  neuvector\n2. Configure OpenShift to pull images from the private NeuVector registry on Docker Hub\n\n         oc create secret docker-registry regsecret -n neuvector --docker-server=https://index.docker.io/v1/ --docker-username=your-name --docker-password=your-pword --docker-email=your-email\n\t\t\t\t \n\nWhere ’your-name’ is your Docker username, ’your-pword’ is your Docker password, ’your-email’ is your Docker email.\n"
  icon:
    - base64data: .0.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
      mediatype: "image/png"
  displayName: Neuvector Operator
  install:
    spec:
      deployments:
      - name: neuvector-operator
        spec:
          replicas: 1
          selector:
            matchLabels:
              name: neuvector-operator
          strategy: {}
          template:
            metadata:
              labels:
                name: neuvector-operator
            spec:
              containers:
              - env:
                - name: WATCH_NAMESPACE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.annotations['olm.targetNamespaces']
                - name: POD_NAME
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.name
                - name: OPERATOR_NAME
                  value: neuvector-operator
                image: neuvector/neuvector-operator:v0.0.1
                imagePullPolicy: Always
                name: neuvector-operator
                resources: {}
              serviceAccountName: neuvector-operator
      permissions:
      - rules:
        - apiGroups:
          - ""
          resources:
          - namespaces
          verbs:
          - get
        - apiGroups:
          - ""
          resources:
          - configmaps
          - secrets
          - services
          verbs:
          - '*'
        - apiGroups:
          - monitoring.coreos.com
          resources:
          - servicemonitors
          verbs:
          - get
          - create
        - apiGroups:
          - apps
          resourceNames:
          - neuvector-operator
          resources:
          - deployments/finalizers
          verbs:
          - update
        - apiGroups:
          - ""
          resources:
          - pods
          verbs:
          - get
        - apiGroups:
          - apps
          resources:
          - replicasets
          - deployments
          verbs:
          - get
        - apiGroups:
          - apm.neuvector.com
          resources:
          - '*'
          verbs:
          - '*'
        serviceAccountName: neuvector-operator
      clusterPermissions:
        - rules:
            - apiGroups:
                - "*"
              resources:
                - clusterroles
                - clusterrolebindings
                - configmaps
                - deployments
                - daemonsets
                - secrets
                - services
                - namespaces
                - customresourcedefinitions
                - nvsecurityruless
                - nvclustersecurityrules
                - ingresses
                - pvcs
                - routes
                - cronJobs
              verbs:
                - "*"
          serviceAccountName: neuvector-operator
    strategy: deployment
  installModes:
  - supported: true
    type: OwnNamespace
  - supported: true
    type: SingleNamespace
  - supported: false
    type: MultiNamespace
  - supported: true
    type: AllNamespaces
  maturity: alpha
  keywords:
  - monitoring
  - wavefront
  - wavefront collector
  - wavefront proxy
  maintainers:
  - email: support@neuvector.com
    name: A Full LifeCycle Container Security Platform
  provider:
    name: NeuVector
  links:
  - name: NeuVector Operator
    url: https://github.com/neuvector/neuvector-operator
  replaces: 
  version: 0.0.1
