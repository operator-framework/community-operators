apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.4.1
  creationTimestamp: null
  name: gatetokens.ocgate.yaacov.com
spec:
  group: ocgate.yaacov.com
  names:
    kind: GateToken
    listKind: GateTokenList
    plural: gatetokens
    singular: gatetoken
  scope: Namespaced
  versions:
  - name: v1beta1
    schema:
      openAPIV3Schema:
        description: GateToken is the Schema for the gatetokens API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: GateTokenSpec defines the desired state of GateToken
            properties:
              duration-sec:
                default: 3600
                description: duration-sec is the duration in sec the token will be validated since it's invocation. Defalut value is 3600s (1h).
                format: int64
                minimum: 0
                type: integer
              from:
                description: from is time of token invocation, the token will not validate before this time, the token duration will start from this time. Defalut to token object creation time.
                format: date-time
                type: string
              match-method:
                default: GET,OPTIONS
                description: match-path is a comma separated list of allowed http methods, only API requests matching one of the allowed methods will be validated. Defalut value is "GET,OPTIONS".
                maxLength: 1024
                pattern: ^(GET|HEAD|POST|PUT|DELETE|CONNECT|OPTIONS|TRACE)+(,(GET|HEAD|POST|PUT|DELETE|CONNECT|OPTIONS|TRACE)+)*$
                type: string
              match-path:
                description: match-path is a regular expresion used to validate API request path, API requests matching this pattern will be validated by the token. This field may not be empty.
                maxLength: 1024
                pattern: ^[/^][^:@]+$
                type: string
              user-id:
                description: user-id is the user id of the user requesting this token.
                maxLength: 226
                type: string
            required:
            - match-path
            - user-id
            type: object
          status:
            description: GateTokenStatus defines the observed state of GateToken
            properties:
              conditions:
                description: Conditions represent the latest available observations of an object's state
                items:
                  description: "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, type FooStatus struct{     // Represents the observations of a foo's current state.     // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"     // +patchMergeKey=type     // +patchStrategy=merge     // +listType=map     // +listMapKey=type     Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n     // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              data:
                description: Cached data, once created, user can not change this valuse
                properties:
                  alg:
                    type: string
                  duration-sec:
                    format: int64
                    type: integer
                  exp:
                    format: int64
                    type: integer
                  from:
                    type: string
                  matchMethod:
                    type: string
                  matchPath:
                    type: string
                  nbf:
                    format: int64
                    type: integer
                  until:
                    type: string
                required:
                - alg
                - duration-sec
                - exp
                - from
                - matchMethod
                - matchPath
                - nbf
                - until
                type: object
              phase:
                description: Token generation phase (ready|error)
                type: string
              token:
                description: The generated token
                type: string
            required:
            - conditions
            - data
            - phase
            - token
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
