# Copyright (c) 2020, WSO2 Inc. (http://wso2.com) All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: operators.coreos.com/v1alpha1
kind: ClusterServiceVersion
metadata:
  annotations:
    capabilities: Seamless Upgrades
    alm-examples: >-
      [
        {
          "apiVersion": "siddhi.io/v1alpha2",
          "kind": "SiddhiProcess",
          "metadata": {
            "name": "power-surge-app"
          },
          "spec": {
            "apps": [
              {
                "script": "@App:name(\"PowerSurgeDetection\")\n@App:description(\"App consumes events from HTTP as a JSON message of { 'deviceType': 'dryer', 'power': 6000 } format and inserts the events into DevicePowerStream, and alerts the user if the device type is dryer and power level is greater than or equal to 600W by printing a message in the log.\")\n\n/*\n    Input: deviceType string and powerConsuption int(Watt)\n    Output: Alert user from printing a log, if there is a power surge in the dryer. In other words, notify when power is greater than or equal to 600W.\n*/\n\n@source(\n  type='http',\n  receiver.url='${RECEIVER_URL}',\n  basic.auth.enabled='${BASIC_AUTH_ENABLED}',\n  @map(type='json')\n)\ndefine stream DevicePowerStream(deviceType string, power int);\n\n@sink(type='log', prefix='LOGGER')  \ndefine stream PowerSurgeAlertStream(deviceType string, power int); \n\n@info(name='surge-detector')  \nfrom DevicePowerStream[deviceType == 'dryer' and power >= 600] \nselect deviceType, power  \ninsert into PowerSurgeAlertStream;\n"
              }
            ],
            "container": {
              "env": [
                {
                  "name": "RECEIVER_URL",
                  "value": "http://0.0.0.0:8080/checkPower"
                },
                {
                  "name": "BASIC_AUTH_ENABLED",
                  "value": "false"
                }
              ],
              "image": "siddhiio/siddhi-runner-ubuntu:5.1.2"
            }
          }
        }
      ]
    categories: "Streaming & Messaging"
    certified: 'false'
    repository: https://github.com/siddhi-io/siddhi-operator/
    containerImage: siddhiio/siddhi-operator:0.2.2
    createdAt: 2020-01-02T16:45:00Z
    support: Siddhi
    description: Siddhi is an open source, lightweight, stream processing and complex event processing engine
  name: siddhi-operator.v0.2.2
  namespace: placeholder
spec:
  apiservicedefinitions: {}
  description: |
    [Siddhi](https://github.com/siddhi-io/siddhi/) Operator allows deploying and running highly available and scalable event-driven, micro streaming, and complex event processing applications natively on Kubernetes. This enables users to build use cases such as real-time analytics, data integration, notification, and adaptive decision-making.
    Following type of deployments are supported by Siddhi operator,

      1. Stateless Siddhi App deployment
      1. Stateful Siddhi App deployment
      1. Distributed stateful Siddhi App deployment (supports high availability and scalability)
      1. Distributed stateful Siddhi App deployment with existing NATS (supports high availability and scalability)

    Refer the [Siddhi documentation](http://siddhi.io/redirect/docs) for more details on the deployment types, the [Siddhi Operator CRD spec](https://github.com/siddhi-io/siddhi-operator/blob/master/docs/spec-guide-v1alpha2.md) on writing SiddhiProcesses to deploy via the Siddhi Operator, and the [interactive Katacoda samples](https://www.katacoda.com/siddhi/courses/siddhi-deployment) to get a hands-on experience on deploying Siddhi Apps using the Siddhi Operator. 

    ## Prerequisites
    - Kubernetes v1.10.11+
    - [kubectl](https://kubernetes.io/docs/tasks/tools/install-kubectl/) version v1.11.3+
    - [NATS operator 0.5.0+](https://github.com/nats-io/nats-operator/releases) (only for distributed Siddhi App deployments)
    - [NATS Streaming operator 0.2.2](https://github.com/nats-io/nats-streaming-operator/releases) (only for distributed Siddhi App deployments)
    - [NGINX Ingress controller 0.22.0+](https://kubernetes.github.io/ingress-nginx/deploy/) (for receiving external traffic)
    
    Siddhi Operator uses NATS and NATS Streaming to distribute the events among the distributed Siddhi applications and uses NGINX ingress to exposes the internal HTTP/HTTPS endpoints to get external traffic.
    
    ## Using Siddhi Operator

    Siddhi Operator automatically creates deployments, services, and ingress for the deployed Siddhi Apps. 
    
    Use the following kubectl commands to get details about deployed Siddhi Apps.

    ```sh
    $ kubectl get siddhi
    NAME              STATUS    READY     AGE
    power-surge-app   Ready     1/1       5m

    $ kubectl describe siddhi power-surge-app
    Name:         power-surge-app
    Namespace:    default
    Annotations:  kubectl.kubernetes.io/last-applied-configuration={"apiVersion":"siddhi.io/v1alpha2","kind":"SiddhiProcess","metadata":{"annotations":{},"name":"power-surge-app","namespace":"default"},"spec":{"apps":[...
    API Version:  siddhi.io/v1alpha2
    Kind:         SiddhiProcess
    Spec:
      Apps:
        Script:  @App:name("PowerSurgeDetection")...

      Container:
        Env:
          Name:   RECEIVER_URL
          Value:  http://0.0.0.0:8080/checkPower
          Name:   BASIC_AUTH_ENABLED
          Value:  false
        Image:    siddhiio/siddhi-runner-ubuntu:5.1.2
    Status:
      Current Version:  0
      Event Type:       Timer
      Partial Apps:
        App:
          @App:name("PowerSurgeDetection") â€¦ 
        Deployment Name:  power-surge-app-0
      Previous Version:   0
      Ready:              1/1
      Status:             Ready
    Events:
      Type    Reason             Age   From                      Message
      ----    ------             ----  ----                      -------
      Normal  DeploymentCreated  41s   siddhiprocess-controller  power-surge-app-0 deployment created successfully
      Normal  ServiceCreated     41s   siddhiprocess-controller  power-surge-app-0 service created successfully

    $ kubectl get deployment
    NAME                      READY     UP-TO-DATE   AVAILABLE   AGE
    power-surge-app-0         1/1       1            1           5m
    siddhi-operator           1/1       1            1           5m

    $ kubectl get service
    NAME                TYPE           CLUSTER-IP      EXTERNAL-IP   PORT(S)          AGE
    kubernetes          ClusterIP      10.96.0.1       <none>        443/TCP          4d
    power-surge-app-0   ClusterIP      10.108.129.48   <none>        8080/TCP         5m
    siddhi-operator     ClusterIP      10.111.214.21   <none>        8383/TCP         5m

    $ kubectl get ingress
    NAME      HOSTS     ADDRESS     PORTS     AGE
    siddhi    siddhi    10.0.2.15   80        5m

    $ kubectl logs $(kubectl get pods | awk '{ print $1 }' | grep ^power-surge-app-0) | tail -n 10

    ...
    [2019-08-02 05:13:07,008] INFO {io.siddhi.core.stream.output.sink.LogSink} - LOGGER : Event{timestamp=1564722787005, data=[dryer, 600], isExpired=false}
    ```

    Siddhi operator supports the following deployment types for a given Siddhi app. Try the following interactive Katacoda samples to get a clear understanding of these deployment types.

    1. [Stateless Siddhi app deployment](https://www.katacoda.com/siddhi/courses/siddhi-deployment/stateless-deployment)
    1. [Stateful Siddhi app deployment](https://www.katacoda.com/siddhi/courses/siddhi-deployment/stateful-deployment)
    1. [Distributed stateful Siddhi App](https://www.katacoda.com/siddhi/courses/siddhi-deployment/distributed-stateful-deployment)
    1. [Distributed stateful Siddhi App with existing NATS](https://www.katacoda.com/siddhi/courses/siddhi-deployment/distributed-stateful-nats-deployment)

    Please refer to the [Siddhi documentation](http://siddhi.io/redirect/docs) for more details about the Siddhi application deployment in Kubernetes.
  displayName: Siddhi Operator
  maturity: stable
  version: 0.2.2
  links:
  - name: Blog
    url: https://medium.com/siddhi-io
  - name: Documentation
    url: https://siddhi.io/en/v5.1/docs/siddhi-as-a-kubernetes-microservice/
  - name: Twitter
    url: https://twitter.com/siddhi_io 
  - name: Slack
    url: https://siddhi.io/community/#community-collaboration
  - name: Katacoda
    url: https://www.katacoda.com/siddhi/courses/siddhi-deployment/
  icon:
    - base64data: >-
        
      mediatype: image/jpeg
 
  maintainers:
  - name: Siddhi Community
    email: siddhi-dev@googlegroups.com 
  install:
    spec:
      deployments:
      - name: siddhi-operator
        spec:
          replicas: 1
          selector:
            matchLabels:
              name: siddhi-operator
          strategy: {}
          template:
            metadata:
              labels:
                name: siddhi-operator
            spec:
              containers:
              - command:
                - siddhi-operator
                env:
                - name: WATCH_NAMESPACE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.annotations['olm.targetNamespaces']
                - name: POD_NAME
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.name
                - name: OPERATOR_NAME
                  value: siddhi-operator
                - name: OPERATOR_VERSION
                  value: 0.2.2
                - name: OPERATOR_CONFIGMAP
                  value: siddhi-operator-config
                image: siddhiio/siddhi-operator:0.2.2
                imagePullPolicy: Always
                name: siddhi-operator
                resources: {}
              serviceAccountName: siddhi-operator
      permissions:
      - rules:
        - apiGroups:
          - ""
          resources:
          - pods
          - services
          - endpoints
          - persistentvolumeclaims
          - events
          - configmaps
          - secrets
          verbs:
          - '*'
        - apiGroups:
          - ""
          resources:
          - namespaces
          verbs:
          - get
        - apiGroups:
          - apps
          resources:
          - deployments
          - daemonsets
          - replicasets
          - statefulsets
          verbs:
          - '*'
        - apiGroups:
          - monitoring.coreos.com
          resources:
          - servicemonitors
          verbs:
          - get
          - create
        - apiGroups:
          - siddhi.io
          resources:
          - '*'
          verbs:
          - '*'
        - apiGroups:
          - nats.io
          resources:
          - natsclusters
          - natsserviceroles
          verbs:
          - '*'
        - apiGroups:
          - streaming.nats.io
          resources:
          - natsstreamingclusters
          verbs:
          - '*'
        - apiGroups:
          - extensions
          - ""
          resources:
          - ingresses
          - ingresses/status
          verbs:
          - get
          - update
          - create
          - list
          - patch
          - delete
          - watch
        serviceAccountName: siddhi-operator
    strategy: deployment
  installModes:
  - supported: true
    type: OwnNamespace
  - supported: true
    type: SingleNamespace
  - supported: false
    type: MultiNamespace
  - supported: true
    type: AllNamespaces
  provider: {name: Siddhi}
  keywords: 
  - siddhi
  - streaming
  - streamprocessing
  customresourcedefinitions:
    owned:
      - name: siddhiprocesses.siddhi.io
        displayName: SiddhiProcess
        kind: SiddhiProcess
        version: v1alpha2
        description: >-
          SiddhiProcess is the central custom resource definition used by the Siddhi operator to deploy Siddhi apps.
        resources:
          - version: v1
            kind: Deployment
          - version: v1
            kind: Service
          - version: v1beta1
            kind: Ingress
          - version: v1
            kind: Pod
          - version: v1
            kind: Secret
          - version: v1
            kind: ConfigMap
          - version: v1
            kind: PersistentVolumeClaim
        specDescriptors: []
        statusDescriptors: []
