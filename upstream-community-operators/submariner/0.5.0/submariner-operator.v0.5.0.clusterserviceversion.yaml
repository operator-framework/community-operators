apiVersion: operators.coreos.com/v1alpha1
kind: ClusterServiceVersion
metadata:
  annotations:
    alm-examples: |-
      [
        {
          "apiVersion": "submariner.io/v1alpha1",
          "kind": "ServiceDiscovery",
          "metadata": {
            "name": "example-servicediscovery"
          },
          "spec": {
            "namespace": "submariner_ns",
            "clusterID": "east",
            "debug": false,
            "globalnetEnabled": true,
            "brokerK8sApiServer": "192.168.67.110:8443",
            "brokerK8sApiServerToken": "MIIDADCCAeigAw",
            "brokerK8sRemoteNamespace": "submariner-broker",
            "brokerK8sCA": "client.crt",
            "repository": "quay.io/submariner",
            "version": "0.5.0"
          }
        },
        {
          "apiVersion": "submariner.io/v1alpha1",
          "kind": "Submariner",
          "metadata": {
            "name": "example-submariner"
          },
          "spec": {
            "namespace": "submariner_ns",
            "serviceCIDR": "192.168.66.0/24",
            "clusterCIDR": "192.168.67.0/24",
            "globalCIDR": "169.254.0.0/16",
            "clusterID": "east",
            "colorCodes": "blue",
            "debug": false,
            "natEnabled": true,
            "serviceDiscoveryEnabled": true,
            "broker": "k8s",
            "brokerK8sApiServer": "192.168.67.110:8443",
            "brokerK8sApiServerToken": "MIIDADCCAeigAw",
            "brokerK8sRemoteNamespace": "submariner-broker",
            "brokerK8sCA": "client.crt",
            "cableDriver": "libreswan",
            "ceIPSecPSK": "DJaA2kVW72w8kjQCEpzkDhwZuniDwgePKFE7FaxVNMWqbpmT2qvp68XW52MO70ho",
            "ceIPSecDebug": false,
            "ceIPSecIKEPort": 500,
            "ceIPSecNATTPort": 4500,
            "repository": "quay.io/submariner",
            "version": "0.5.0"
          }
        },
        {
          "apiVersion": "lighthouse.submariner.io/v2alpha1",
          "kind": "MultiClusterService",
          "metadata": {
            "name": "example-multiclusterservice"
          },
          "spec": {
            "clusterServiceInfo": {
              "clusterDomain": "submariner.io",
              "clusterID": "east",
              "port": 8443,
              "serviceIP": "192.168.67.110"
            }
          }
        },
        {
          "apiVersion": "lighthouse.submariner.io/v2alpha1",
          "kind": "ServiceImport",
          "metadata": {
            "name": "example-serviceimport"
          },
          "spec": {}
        },
        {
          "apiVersion": "lighthouse.submariner.io/v2alpha1",
          "kind": "ServiceExport",
          "metadata": {
            "name": "example-serviceexport"
          },
          "spec": {}
        }
      ]
    capabilities: Basic Install
    categories: Networking
    certified: 'false'
    containerImage: quay.io/submariner/submariner-operator:0.5.0
    description: Operator that creates and manages Submariner engines and route agents.
    repository: https://github.com/submariner-io/submariner
    support: Submariner
    createdAt: 2020-07-20 07:00:00
    operators.operatorframework.io/builder: operator-sdk-v0.19.0
    operators.operatorframework.io/project_layout: go
  name: submariner-operator.v0.5.0
  namespace: placeholder
spec:
  apiservicedefinitions: {}
  customresourcedefinitions:
    owned:
    - kind: MultiClusterService
      name: multiclusterservices.lighthouse.submariner.io
      version: v2alpha1
    - description: ServiceDiscovery is the Schema for the servicediscoveries API
      displayName: Lighthouse
      kind: ServiceDiscovery
      name: servicediscoveries.submariner.io
      version: v1alpha1
    - kind: ServiceExport
      name: serviceexports.lighthouse.submariner.io
      version: v2alpha1
    - kind: ServiceImport
      name: serviceimports.lighthouse.submariner.io
      version: v2alpha1
    - description: Submariner is the Schema for the submariners API
      displayName: Submariner
      kind: Submariner
      name: submariners.submariner.io
      version: v1alpha1
  description: |
    [Submariner](https://submariner-io) enables direct networking between Pods and Services in different Kubernetes clusters, either on premise or in the cloud.

    As Kubernetes gains adoption, teams are finding they must deploy and manage multiple clusters to facilitate features like geo-redundancy, scale, and fault isolation for their applications. With Submariner, your applications and services can span multiple cloud providers, data centers, and regions.

    A central broker is used to facilitate exchange of information and sync CRDs between clusters. The two primary Submariner components within connected clusters are:
    * the Submariner engine (deployment)
    * the Submariner  route agent (daemonset)

    Submariner pods run on gateway nodes and perform  leader election to elect an active IPSec endpoint. This also updates the broker with local cluster information which is then shared to other clusters.
    The Submariner route agent configures routes to enable full connectivity among all nodes between the clusters. This operator uses a single CRD to control deployment  of all Submariner-related resources.

    Submariner is completely open source, and designed to be network plugin (CNI) agnostic.

    ---

    ## Prerequisites

    * At least **2 Kubernetes** clusters, one of which is designated to serve as the central broker that is  accessible by all of your connected clusters; this can be one of your connected clusters, but comes with the limitation that the cluster is required  to be up in order to facilitate interconnectivity/negotiation.
    * **Non-overlapping** Service and Pod CIDRs between clusters. This is to prevent routing conflicts. For cases where addresses **do overlap**, GlobalNet can be set up.
    * **IP reachability between the gateway nodes**. When connecting two clusters, at least one of the clusters should have a publicly routable IP address designated to the gateway node. This is needed for creating the IPsec tunnel between the clusters. The default ports used by IPsec are 4500/UDP and 500/UDP. For clusters behind corporate firewalls that block the default ports, Submariner also supports NAT Traversal (NAT-T) with the option to set custom non-standard ports like 4501/UDP and 501/UDP.
    * We use port 4800/UDP to encapsulate traffic from the worker nodes to the gateway nodes and ensuring that Pod IP addresses are preserved. Ensure that firewall configuration allows 4800/UDP across all the worker nodes.
    * Knowledge of each clusterâ€™s network configuration.
    * Worker node IPs on all connected clusters must be outside of the Pods/Service CIDR ranges.

    ---

    ## Deployment

    The available methods for deployments are:
    * [subctl](https://github.com/submariner-io/submariner-operator/releases)
    * helm charts

    The community recommends the use of **subctl**, because it simplifies most of the manual steps required for deployment, as well as verification of connectivity between the clusters.

    ### Deploying the broker
    #### subctl
    install the tool:
    ```bash
    curl -Ls https://raw.githubusercontent.com/submariner-io/submariner-operator/master/scripts/subctl/getsubctl.sh | bash
    export PATH=$PATH:~/.local/bin
    echo export PATH=\$PATH:~/.local/bin >> ~/.profile
    ```
    deploy the broker:
    ```bash
    subctl deploy-broker --kubeconfig <PATH-TO-KUBECONFIG-BROKER>
    ```

    #### Helm
    This currently requires Helm and  Tiller. On the cluster which will host the broker:
    ```bash
    helm repo add submariner-latest https://releases.rancher.com/submariner-charts/latest

    helm repo update

    helm install submariner-latest/submariner-k8s-broker --name submariner-k8s-broker --namespace submariner-k8s-broker
    ```
    Three values must be retrieved from the  broker; they will be used in the CR for the operator:
    * the broker URL:
      ```bash
      kubectl -n default get endpoints kubernetes -o jsonpath= "{.subsets[0].addresses[0].ip}:{.subsets[0].ports[?(@.name=='https')].port}"
      ```
    * the broker CA:
      ```bash
      kubectl -n submariner-k8s-broker get secrets  -o jsonpath= "{.items[?(@.metadata.annotations['kubernetes.io/service-account.name']=='submariner-k8s-broker-client')].data['ca.crt']"
      ```
    * the broker token:
      ```bash
      kubectl -n submariner-k8s-broker get secrets -o jsonpath= " {.items[?(@.metadata.annotations['kubernetes.io/service-account.name']=='submariner-k8s-broker-client')].data.token}" | base64 --decode
      ```

    [The detailed broker installation instructions](https://github.com/submariner-io/submariner/blob/master/README.md#broker-installationsetup) provide more information.

    Once the broker is deployed it creates:
    * The `submariner-k8s-broker` namespace.
    * The `Endpoint` and `Cluster` CRDs in the cluster.
    * A Service Account (SA) in the namespace for subsequent subctl access.

    ### Deploying Submariner
    #### subctl
    For each cluster you want to join, issue the following command:
    ```bash
    subctl join --kubeconfig <PATH-TO-JOINING-CLUSTER> broker-info.subm --clusterid <ID>
    ```
    More information can be found [here](https://submariner.io/deployment/subctl)

    #### Helm

    For each cluster label your gateway nodes:
    ```bash
    kubectl label node <DESIRED_NODE> "submariner.io/gateway=true"
    ```
    Install submariner:
    ```bash
    helm install submariner-latest/submariner \
    --name submariner \
    --namespace submariner \
    --set ipsec.psk="${SUBMARINER_PSK}" \
    --set broker.server="${SUBMARINER_BROKER_URL}" \
    --set broker.token="${SUBMARINER_BROKER_TOKEN}" \
    --set broker.namespace="${SUBMARINER_BROKER_NS}" \
    --set broker.ca="${SUBMARINER_BROKER_CA}" \
    \
    --set submariner.clusterId="<CLUSTER_ID>" \
    --set submariner.clusterCidr="<CLUSTER_CIDR>" \
    --set submariner.serviceCidr="<SERVICE_CIDR>" \
    --set submariner.natEnabled="<NAT_ENABLED>"
    ```
    Submariner is deployed using the Submariner CR. The following values can be specified:
    * **namespace**:  the namespace to install in;
    * **serviceCIDR**: the service CIDR;
    * **clusterCIDR**:  the cluster CIDR;
    * **token**: the Submariner token
        to retrieve the token run the following command on the broker  cluster, assuming the broker is running in the `submariner` namespace replace the two `submariner` instances as appropriate
        ```bash
        kubectl -n submariner get secrets -o jsonpath= "{.items[?(@.metadata.annotations['kubernetes.io/service-account.name']=='submariner-client')].data.token}" | base64 --decode
        ```
    * **clusterID**:  the Submariner cluster ID;
    * **colorCodes**: the Submariner color code(s) for  this cluster;
    * **debug**: `'true'` to enable logging debugging information;
    * **natEnabled**: `'true'` to enable NAT, for use in clusters with 1:1 NAT between  instances (such as    AWS VPC);
    * **broker**: this must be `k8s` currently;
    * **brokerK8sApiServer**: the broker API server URL
        to retrieve it run the following command on the broker cluster
        ```bash
        kubectl -n default get endpoints kubernetes -o jsonpath= "{.subsets[0].addresses[0].ip}:{.subsets[0].ports[?(@.name=='https')].port} "
        ```
    * **brokerK8sApiServerToken**: the broker API server token (same as `submariner_token`);
    * `brokerK8sRemoteNamespace`:  the broker namespace;
    * **brokerK8sCA**: the broker certificate authority
        to retrieve the broker CA run the following command on the broker cluster, assuming the broker is running in the `submariner` namespace replace the two `submariner` instances as appropriate
        ```bash
        kubectl -n submariner get secrets -o jsonpath= "{.items[?(@.metadata.annotations['kubernetes.io/service-account.name']=='submariner-client')].data['ca.crt']}"
        ```
    * **ceIPSecPSK**: the IPsec PSK (which must be identical in all route agents  across the cluster);
    * **ceIPSecDebug**: `'true'` to enable logging IPsec debugging  information (from the IPsec daemon);
    * **ceIPSecIKEPort**: the IPsec IKE port  (500 usually);
    * **ceIPSecNATTPort**: the IPsec NAT traversal port (4500 usually);
    * **repository**: the container repository to use.
    * **version**: the container  version to use.

  displayName: Submariner Operator
  icon:
  - base64data: PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+CjxzdmcKICAgeG1sbnM6ZGM9Imh0dHA6Ly9wdXJsLm9yZy9kYy9lbGVtZW50cy8xLjEvIgogICB4bWxuczpjYz0iaHR0cDovL2NyZWF0aXZlY29tbW9ucy5vcmcvbnMjIgogICB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiCiAgIHhtbG5zOnN2Zz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciCiAgIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIKICAgeG1sbnM6c29kaXBvZGk9Imh0dHA6Ly9zb2RpcG9kaS5zb3VyY2Vmb3JnZS5uZXQvRFREL3NvZGlwb2RpLTAuZHRkIgogICB4bWxuczppbmtzY2FwZT0iaHR0cDovL3d3dy5pbmtzY2FwZS5vcmcvbmFtZXNwYWNlcy9pbmtzY2FwZSIKICAgdmlld0JveD0iMCAwIDE4NS40OTg5NiAxODUuNDk4OTQiCiAgIHZlcnNpb249IjEuMSIKICAgaWQ9InN2ZzQ2NTYiCiAgIHNvZGlwb2RpOmRvY25hbWU9ImxvZ28uc3ZnIgogICB3aWR0aD0iMTg1LjQ5ODk2IgogICBoZWlnaHQ9IjE4NS40OTg5NSIKICAgaW5rc2NhcGU6dmVyc2lvbj0iMC45Mi40ICh1bmtub3duKSI+CiAgPG1ldGFkYXRhCiAgICAgaWQ9Im1ldGFkYXRhNDY2MCI+CiAgICA8cmRmOlJERj4KICAgICAgPGNjOldvcmsKICAgICAgICAgcmRmOmFib3V0PSIiPgogICAgICAgIDxkYzpmb3JtYXQ+aW1hZ2Uvc3ZnK3htbDwvZGM6Zm9ybWF0PgogICAgICAgIDxkYzp0eXBlCiAgICAgICAgICAgcmRmOnJlc291cmNlPSJodHRwOi8vcHVybC5vcmcvZGMvZGNtaXR5cGUvU3RpbGxJbWFnZSIgLz4KICAgICAgICA8ZGM6dGl0bGU+bG9nbzwvZGM6dGl0bGU+CiAgICAgIDwvY2M6V29yaz4KICAgIDwvcmRmOlJERj4KICA8L21ldGFkYXRhPgogIDxzb2RpcG9kaTpuYW1lZHZpZXcKICAgICBwYWdlY29sb3I9IiNmZmZmZmYiCiAgICAgYm9yZGVyY29sb3I9IiM2NjY2NjYiCiAgICAgYm9yZGVyb3BhY2l0eT0iMSIKICAgICBvYmplY3R0b2xlcmFuY2U9IjEwIgogICAgIGdyaWR0b2xlcmFuY2U9IjEwIgogICAgIGd1aWRldG9sZXJhbmNlPSIxMCIKICAgICBpbmtzY2FwZTpwYWdlb3BhY2l0eT0iMCIKICAgICBpbmtzY2FwZTpwYWdlc2hhZG93PSIyIgogICAgIGlua3NjYXBlOndpbmRvdy13aWR0aD0iMTkyMCIKICAgICBpbmtzY2FwZTp3aW5kb3ctaGVpZ2h0PSIxMDE2IgogICAgIGlkPSJuYW1lZHZpZXc0NjU4IgogICAgIHNob3dncmlkPSJmYWxzZSIKICAgICBmaXQtbWFyZ2luLXRvcD0iMCIKICAgICBmaXQtbWFyZ2luLWxlZnQ9IjAiCiAgICAgZml0LW1hcmdpbi1yaWdodD0iMCIKICAgICBmaXQtbWFyZ2luLWJvdHRvbT0iMCIKICAgICBpbmtzY2FwZTp6b29tPSIxLjM2OTIwODQiCiAgICAgaW5rc2NhcGU6Y3g9IjQ4Mi43NjA3MSIKICAgICBpbmtzY2FwZTpjeT0iOTIuNzQ5NDY5IgogICAgIGlua3NjYXBlOndpbmRvdy14PSIwIgogICAgIGlua3NjYXBlOndpbmRvdy15PSIyNyIKICAgICBpbmtzY2FwZTp3aW5kb3ctbWF4aW1pemVkPSIxIgogICAgIGlua3NjYXBlOmN1cnJlbnQtbGF5ZXI9IkxheWVyXzEiIC8+CiAgPGRlZnMKICAgICBpZD0iZGVmczQ2MTEiPgogICAgPHN0eWxlCiAgICAgICBpZD0ic3R5bGU0NjA5Ij4uY2xzLTF7ZmlsbDojMmFkZmMzO30uY2xzLTJ7ZmlsbDojMjg3ZWZiO30uY2xzLTN7ZmlsbDojMzg0NzQ1O308L3N0eWxlPgogIDwvZGVmcz4KICA8dGl0bGUKICAgICBpZD0idGl0bGU0NjEzIj5sb2dvPC90aXRsZT4KICA8ZwogICAgIGlkPSJMYXllcl8xIgogICAgIGRhdGEtbmFtZT0iTGF5ZXIgMSI+CiAgICA8cGF0aAogICAgICAgY2xhc3M9ImNscy0xIgogICAgICAgZD0iTSAxNzYuNjM0NDQsOC44NjQ1MyBWIDE3Ni42MzQ0MSBIIDguODY0NTMgViA4Ljg2NDUzIGggMTY3Ljc2OTkxIG0gMCwtOC44NjQ1MyBIIDguODY0NTMgQSA4Ljg2NDU2LDguODY0NTYgMCAwIDAgMCw4Ljg2NDUzIHYgMTY3Ljc2OTg4IGEgOC44NjQ1Niw4Ljg2NDU2IDAgMCAwIDguODY0NTMsOC44NjQ1MyBoIDE2Ny43Njk5MSBhIDguODY0NTUsOC44NjQ1NSAwIDAgMCA4Ljg2NDUzLC04Ljg2NDUzIFYgOC44NjQ1MyBBIDguODY0NTUsOC44NjQ1NSAwIDAgMCAxNzYuNjM0NDQsMCBaIgogICAgICAgaWQ9InBhdGg0NjE1IgogICAgICAgaW5rc2NhcGU6Y29ubmVjdG9yLWN1cnZhdHVyZT0iMCIKICAgICAgIHN0eWxlPSJmaWxsOiMyYWRmYzMiIC8+CiAgICA8cGF0aAogICAgICAgY2xhc3M9ImNscy0yIgogICAgICAgZD0ibSAxMDUuNjc1NTcsMTMxLjM0NDUxIGggLTgyLjAzNyBWIDEyMi40OCBoIDgwLjIwNzU0IGwgMjMuMjkzNjMsLTIzLjE3ODIgYSA0LjQzMTgzLDQuNDMxODMgMCAwIDEgMy4xMjYyNSwtMS4yOTA0NCBoIDMxLjU5NDMxIHYgOC44NjQ1MyBoIC0yOS43NjQ4NSBsIC0yMy4yOTM2MywyMy4xNzgyMSBhIDQuNDMyMzcsNC40MzIzNyAwIDAgMSAtMy4xMjYyNSwxLjI5MDQxIHoiCiAgICAgICBpZD0icGF0aDQ2MTciCiAgICAgICBpbmtzY2FwZTpjb25uZWN0b3ItY3VydmF0dXJlPSIwIgogICAgICAgc3R5bGU9ImZpbGw6IzI4N2VmYiIgLz4KICAgIDxwYXRoCiAgICAgICBjbGFzcz0iY2xzLTIiCiAgICAgICBkPSJNIDExNy44NzIzOCwxNjAuODkyOTQgSCAyMy42Mzg1NyB2IC04Ljg2NDUzIGggOTIuNDA0MzUgbCAyMy4yOTM2MywtMjMuMTc4MiBhIDQuNDMxODMsNC40MzE4MyAwIDAgMSAzLjEyNjI0LC0xLjI5MDQ0IGggMTkuMzk3NTEgdiA4Ljg2NDUzIGggLTE3LjU2OCBsIC0yMy4yOTM2MywyMy4xNzgyMSBhIDQuNDMxODcsNC40MzE4NyAwIDAgMSAtMy4xMjYyOSwxLjI5MDQzIHoiCiAgICAgICBpZD0icGF0aDQ2MTkiCiAgICAgICBpbmtzY2FwZTpjb25uZWN0b3ItY3VydmF0dXJlPSIwIgogICAgICAgc3R5bGU9ImZpbGw6IzI4N2VmYiIgLz4KICAgIDxwYXRoCiAgICAgICBjbGFzcz0iY2xzLTIiCiAgICAgICBkPSJNIDQ5LjEzNDE5LDcyLjcxMjggSCAyMy42Mzg1NyB2IC04Ljg2NDUzIGggMjMuNjY2MTUgbCAyMy4yOTQyMSwtMjMuMTc4MiBhIDQuNDMyMzgsNC40MzIzOCAwIDAgMSAzLjEyNjI1LC0xLjI5MDQ0IGggODguMTM1MTIgdiA4Ljg2NDUzIEggNzUuNTU0NjQgTCA1Mi4yNjA0Myw3MS40MjIzNyBhIDQuNDMyMzUsNC40MzIzNSAwIDAgMSAtMy4xMjYyNCwxLjI5MDQzIHoiCiAgICAgICBpZD0icGF0aDQ2MjEiCiAgICAgICBpbmtzY2FwZTpjb25uZWN0b3ItY3VydmF0dXJlPSIwIgogICAgICAgc3R5bGU9ImZpbGw6IzI4N2VmYiIgLz4KICAgIDxwYXRoCiAgICAgICBjbGFzcz0iY2xzLTEiCiAgICAgICBkPSJtIDE2MS44NjAzLDEwNi44NzU4NyBoIC0xOS42NDIyIGEgNC40MzIzNCw0LjQzMjM0IDAgMCAxIC0zLjEyNjI1LC0xLjI5MDQ0IEwgMTE1Ljc5ODIyLDgyLjQwNzIzIEggODAuMDY4MjggQSA0LjQzMjM0LDQuNDMyMzQgMCAwIDEgNzYuOTQyLDgxLjExNjc5IEwgNTMuNjQ3OCw1Ny45Mzg1OSBIIDIzLjYzODU3IHYgLTguODY0NTMgaCAzMS44Mzg3MiBhIDQuNDMyMzksNC40MzIzOSAwIDAgMSAzLjEyNjI1LDEuMjkwNDMgbCAyMy4yOTQyLDIzLjE3ODIxIGggMzUuNzI5OTQgYSA0LjQzMTg3LDQuNDMxODcgMCAwIDEgMy4xMjYyNSwxLjI5MDQzIGwgMjMuMjkzNjMsMjMuMTc4MjEgaCAxNy44MTI3NCB6IgogICAgICAgaWQ9InBhdGg0NjIzIgogICAgICAgaW5rc2NhcGU6Y29ubmVjdG9yLWN1cnZhdHVyZT0iMCIKICAgICAgIHN0eWxlPSJmaWxsOiMyYWRmYzMiIC8+CiAgICA8cGF0aAogICAgICAgY2xhc3M9ImNscy0xIgogICAgICAgZD0ibSAxNjEuODYwMywxMzYuNDI0MyBoIC0zMS44MzkgYSA0LjQzMTg3LDQuNDMxODcgMCAwIDEgLTMuMTI2MjUsLTEuMjkwNDMgTCAxMDMuNjAxNDIsMTExLjk1NTY2IEggNjcuODcyMDUgQSA0LjQzMjM3LDQuNDMyMzcgMCAwIDEgNjQuNzQ1OCwxMTAuNjY1MjMgTCA0MS40NTE1OSw4Ny40ODcgaCAtMTcuODEzIHYgLTguODY0NTEgaCAxOS42NDI0NyBhIDQuNDMyMzYsNC40MzIzNiAwIDAgMSAzLjEyNjI1LDEuMjkwNDQgbCAyMy4yOTQyLDIzLjE3ODIgaCAzNS43MjkzNiBhIDQuNDMyMzQsNC40MzIzNCAwIDAgMSAzLjEyNjI1LDEuMjkwNDQgbCAyMy4yOTM2MywyMy4xNzgyIGggMzAuMDA5NTUgeiIKICAgICAgIGlkPSJwYXRoNDYyNSIKICAgICAgIGlua3NjYXBlOmNvbm5lY3Rvci1jdXJ2YXR1cmU9IjAiCiAgICAgICBzdHlsZT0iZmlsbDojMmFkZmMzIiAvPgogICAgPHBhdGgKICAgICAgIGNsYXNzPSJjbHMtMSIKICAgICAgIGQ9Ik0gMTYxLjg2MDMsMTIxLjY1MDA5IEggMTM2LjEyIGEgNC40MzI0LDQuNDMyNCAwIDAgMSAtMy4xMjYyNSwtMS4yOTA0NCBMIDEwOS42OTk1NSw5Ny4xODE0NCBIIDczLjk2OTg3IEEgNC40MzIzNyw0LjQzMjM3IDAgMCAxIDcwLjg0MzYzLDk1Ljg5MSBMIDQ3LjU0OTQyLDcyLjcxMjggSCAyMy42Mzg1NyB2IC04Ljg2NDUzIGggMjUuNzQwMzEgYSA0LjQzMjM4LDQuNDMyMzggMCAwIDEgMy4xMjYyNSwxLjI5MDQ0IEwgNzUuNzk5MzQsODguMzE2OTIgSCAxMTEuNTI5IGEgNC40MzE4OCw0LjQzMTg4IDAgMCAxIDMuMTI2MjUsMS4yOTA0MyBsIDIzLjI5NDIsMjMuMTc4MjEgaCAyMy45MTA4NSB6IgogICAgICAgaWQ9InBhdGg0NjI3IgogICAgICAgaW5rc2NhcGU6Y29ubmVjdG9yLWN1cnZhdHVyZT0iMCIKICAgICAgIHN0eWxlPSJmaWxsOiMyYWRmYzMiIC8+CiAgICA8cGF0aAogICAgICAgY2xhc3M9ImNscy0yIgogICAgICAgZD0iTSAxMTEuNzczNjksMTQ2LjExODczIEggMjMuNjM4NTcgdiAtOC44NjQ1MyBoIDg2LjMwNTY1IGwgMjMuMjk0MjEsLTIzLjE3ODIgYSA0LjQzMjM3LDQuNDMyMzcgMCAwIDEgMy4xMjYyNSwtMS4yOTA0MyBoIDI1LjQ5NTYyIHYgOC44NjQ1MyBoIC0yMy42NjYxNiBsIC0yMy4yOTQyLDIzLjE3ODIgYSA0LjQzMjQsNC40MzI0IDAgMCAxIC0zLjEyNjI1LDEuMjkwNDMgeiIKICAgICAgIGlkPSJwYXRoNDYyOSIKICAgICAgIGlua3NjYXBlOmNvbm5lY3Rvci1jdXJ2YXR1cmU9IjAiCiAgICAgICBzdHlsZT0iZmlsbDojMjg3ZWZiIiAvPgogICAgPHBhdGgKICAgICAgIGNsYXNzPSJjbHMtMiIKICAgICAgIGQ9Ik0gNDMuMDM2MzYsNTcuOTM4NTkgSCAyMy42Mzg1NyBWIDQ5LjA3NDA2IEggNDEuMjA2OSBMIDY0LjUwMTEsMjUuODk2NDMgQSA0LjQzMjQsNC40MzI0IDAgMCAxIDY3LjYyNzM1LDI0LjYwNiBoIDk0LjIzMjk1IHYgOC44NjQ1MyBIIDY5LjQ1NjgxIGwgLTIzLjI5NDIsMjMuMTc3NjIgYSA0LjQzMjM2LDQuNDMyMzYgMCAwIDEgLTMuMTI2MjUsMS4yOTA0NCB6IgogICAgICAgaWQ9InBhdGg0NjMxIgogICAgICAgaW5rc2NhcGU6Y29ubmVjdG9yLWN1cnZhdHVyZT0iMCIKICAgICAgIHN0eWxlPSJmaWxsOiMyODdlZmIiIC8+CiAgICA8cGF0aAogICAgICAgY2xhc3M9ImNscy0yIgogICAgICAgZD0iTSA1NS4yMzIsODcuNDg3IEggMjMuNjM4NTcgdiAtOC44NjQ1MSBoIDI5Ljc2NCBMIDc2LjY5Njc2LDU1LjQ0NDg2IEEgNC40MzIzNSw0LjQzMjM1IDAgMCAxIDc5LjgyMyw1NC4xNTQ0MyBoIDgyLjAzNzMgViA2My4wMTkgSCA4MS42NTI0NyBMIDU4LjM1ODI2LDg2LjE5NjU4IEEgNC40MzIzNCw0LjQzMjM0IDAgMCAxIDU1LjIzMiw4Ny40ODcgWiIKICAgICAgIGlkPSJwYXRoNDYzMyIKICAgICAgIGlua3NjYXBlOmNvbm5lY3Rvci1jdXJ2YXR1cmU9IjAiCiAgICAgICBzdHlsZT0iZmlsbDojMjg3ZWZiIiAvPgogIDwvZz4KPC9zdmc+Cg==
    mediatype: image/svg+xml
  install:
    spec:
      clusterPermissions:
      - rules:
        - apiGroups:
          - ""
          resources:
          - configmaps
          verbs:
          - get
          - list
          - watch
          - update
        - apiGroups:
          - ""
          resources:
          - pods
          - services
          verbs:
          - get
          - list
          - watch
        - apiGroups:
          - operator.openshift.io
          resources:
          - dnses
          verbs:
          - get
          - list
          - watch
          - update
        - apiGroups:
          - network.openshift.io
          resources:
          - clusternetworks
          verbs:
          - get
          - list
        serviceAccountName: submariner-operator
      - rules:
        - apiGroups:
          - ""
          resources:
          - services
          - namespaces
          verbs:
          - get
          - list
          - watch
          - update
        - apiGroups:
          - lighthouse.submariner.io
          resources:
          - '*'
          verbs:
          - create
          - get
          - list
          - watch
          - update
          - delete
        - apiGroups:
          - submariner.io
          resources:
          - gateways
          verbs:
          - get
          - list
          - watch
        serviceAccountName: submariner-lighthouse
      - rules:
        - apiGroups:
          - ""
          resources:
          - pods
          - services
          - namespaces
          - nodes
          verbs:
          - get
          - list
          - watch
          - update
        - apiGroups:
          - submariner.io
          resources:
          - endpoints
          - clusters
          verbs:
          - get
          - list
          - watch
        - apiGroups:
          - lighthouse.submariner.io
          resources:
          - serviceexports
          verbs:
          - get
          - list
          - watch
        serviceAccountName: submariner-operator-globalnet
      deployments:
      - name: submariner-operator
        spec:
          replicas: 1
          selector:
            matchLabels:
              name: submariner-operator
          strategy: {}
          template:
            metadata:
              labels:
                name: submariner-operator
            spec:
              containers:
              - command:
                - submariner-operator
                env:
                - name: WATCH_NAMESPACE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.annotations['olm.targetNamespaces']
                - name: POD_NAME
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.name
                - name: OPERATOR_NAME
                  value: submariner-operator
                image: quay.io/submariner/submariner-operator:0.5.0
                imagePullPolicy: Always
                name: submariner-operator
                resources: {}
              serviceAccountName: submariner-operator
      permissions:
      - rules:
        - apiGroups:
          - ""
          resources:
          - pods
          - services
          - services/finalizers
          - endpoints
          - persistentvolumeclaims
          - events
          - configmaps
          - secrets
          verbs:
          - '*'
        - apiGroups:
          - apps
          resources:
          - deployments
          - daemonsets
          - replicasets
          - statefulsets
          verbs:
          - '*'
        - apiGroups:
          - monitoring.coreos.com
          resources:
          - servicemonitors
          verbs:
          - get
          - create
        - apiGroups:
          - apps
          resourceNames:
          - submariner-operator
          resources:
          - deployments/finalizers
          verbs:
          - update
        - apiGroups:
          - ""
          resources:
          - pods
          verbs:
          - get
        - apiGroups:
          - apps
          resources:
          - replicasets
          verbs:
          - get
        - apiGroups:
          - submariner.io
          resources:
          - '*'
          - servicediscoveries
          verbs:
          - '*'
        serviceAccountName: submariner-operator
    strategy: deployment
  installModes:
  - supported: true
    type: OwnNamespace
  - supported: true
    type: SingleNamespace
  - supported: false
    type: MultiNamespace
  - supported: true
    type: AllNamespaces
  keywords:
  - multi-cluster
  - ipsec
  - tunnel
  - submariner-operator
  labels:
    name: submariner-operator
  links:
  - name: Submariner Homepage
    url: https://submariner.io
  maintainers:
  - email: submariner-dev@googlegroups.com
    name: Submariner development discussion
  - email: submariner-users@googlegroups.com
    name: Submariner user support
  maturity: alpha
  #minKubeVersion: 1.15.7
  provider:
    name: submariner-io
  replaces: ''
  selector:
    matchLabels:
      name: submariner-operator
  version: 0.5.0
