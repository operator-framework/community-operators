# Generated by https://github.com/upbound/olm-bundle
apiVersion: v1alpha1
kind: ClusterServiceVersion
metadata:
  annotations:
    alm-examples: |-
      [
        {
           "apiVersion": "pkg.crossplane.io/v1",
           "kind": "Configuration",
           "metadata": {
              "name": "xp-getting-started-with-aws"
           },
           "spec": {
              "package": "registry.upbound.io/xp/getting-started-with-aws:v1.3.0"
           }
        }
      ]
    capabilities: Seamless Upgrades
    categories: Application Runtime, Cloud Provider, Database, Integration & Delivery, Networking, Storage
    containerImage: upbound/uxp-bootstrapper
    createdAt: 2021-05-18T00:00:00+0000
    description: Upbound Universal Crossplane (UXP) is Upbound's official enterprise-grade distribution of Crossplane.
    operatorframework.io/initialization-resource: |
      apiVersion: v1
      kind: Secret
      metadata:
        name: upbound-control-plane-token
        namespace: upbound-system
      type: Opaque
      data:
        token: "Output of `up cloud controlplane attach | base64` command"
    operatorframework.io/suggested-namespace: upbound-system
    operators.operatorframework.io.bundle.channel.default.v1: stable
    operators.operatorframework.io.bundle.channels.v1: stable
    operators.operatorframework.io.bundle.manifests.v1: manifests/
    operators.operatorframework.io.bundle.mediatype.v1: registry+v1
    operators.operatorframework.io.bundle.metadata.v1: metadata/
    operators.operatorframework.io.bundle.package.v1: universal-crossplane
    operators.operatorframework.io/internal-objects: '["locks.pkg.crossplane.io"]'
    repository: https://github.com/upbound/universal-crossplane
    support: Upbound Inc.
  creationTimestamp: null
  name: universal-crossplane.1.2.1-up.3
spec:
  apiservicedefinitions: {}
  cleanup:
    enabled: false
  customresourcedefinitions:
    owned:
    - displayName: CompositeResourceDefinition
      kind: CompositeResourceDefinition
      name: compositeresourcedefinitions.apiextensions.crossplane.io
      version: v1
    - displayName: Composition
      kind: Composition
      name: compositions.apiextensions.crossplane.io
      version: v1
    - displayName: ConfigurationRevision
      kind: ConfigurationRevision
      name: configurationrevisions.pkg.crossplane.io
      version: v1
    - displayName: Configuration
      kind: Configuration
      name: configurations.pkg.crossplane.io
      version: v1
    - displayName: ControllerConfig
      kind: ControllerConfig
      name: controllerconfigs.pkg.crossplane.io
      version: v1alpha1
    - displayName: ProviderRevision
      kind: ProviderRevision
      name: providerrevisions.pkg.crossplane.io
      version: v1
    - displayName: Provider
      kind: Provider
      name: providers.pkg.crossplane.io
      version: v1
  description: |
    Upbound Universal Crossplane (UXP) is Upbound's official enterprise-grade
    distribution of Crossplane. It's fully compatible with upstream Crossplane,
    open source, capable of connecting to Upbound Cloud for real-time dashboard
    visibility, and maintained by Upbound. It's the easiest way for both
    individual community members and enterprises to build their production control
    planes.
  displayName: Upbound Universal Crossplane (UXP)
  icon:
  - base64data: 
    mediatype: image/png
  install:
    spec:
      deployments:
      - name: upbound-bootstrapper
        spec:
          replicas: 1
          selector:
            matchLabels:
              app.kubernetes.io/component: bootstrapper
              app.kubernetes.io/instance: universal-crossplane
              app.kubernetes.io/name: crossplane
          strategy: {}
          template:
            metadata:
              creationTimestamp: null
              labels:
                app.kubernetes.io/component: bootstrapper
                app.kubernetes.io/instance: universal-crossplane
                app.kubernetes.io/name: crossplane
            spec:
              containers:
              - args:
                - start
                - --namespace
                - upbound-system
                - --upbound-api-url
                - https://api.upbound.io
                - --controller
                - tls-secrets
                image: upbound/uxp-bootstrapper:v1.2.1-up.3
                imagePullPolicy: IfNotPresent
                name: bootstrapper
                resources: {}
              imagePullSecrets:
              - name: dockerhub
              serviceAccountName: upbound-bootstrapper
      - name: crossplane
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: crossplane
              release: universal-crossplane
          strategy:
            type: RollingUpdate
          template:
            metadata:
              creationTimestamp: null
              labels:
                app: crossplane
                release: universal-crossplane
            spec:
              containers:
              - args:
                - core
                - start
                env:
                - name: POD_NAMESPACE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.namespace
                - name: LEADER_ELECTION
                  value: "true"
                image: crossplane/crossplane:v1.2.1
                imagePullPolicy: IfNotPresent
                name: universal-crossplane
                resources:
                  limits:
                    cpu: 100m
                    memory: 512Mi
                  requests:
                    cpu: 100m
                    memory: 256Mi
                securityContext:
                  allowPrivilegeEscalation: false
                  readOnlyRootFilesystem: true
                  runAsGroup: 2000
                  runAsUser: 2000
                volumeMounts:
                - mountPath: /cache
                  name: package-cache
              initContainers:
              - args:
                - core
                - init
                image: crossplane/crossplane:v1.2.1
                imagePullPolicy: IfNotPresent
                name: universal-crossplane-init
                resources:
                  limits:
                    cpu: 100m
                    memory: 512Mi
                  requests:
                    cpu: 100m
                    memory: 256Mi
                securityContext:
                  allowPrivilegeEscalation: false
                  readOnlyRootFilesystem: true
                  runAsGroup: 2000
                  runAsUser: 2000
              serviceAccountName: crossplane
              volumes:
              - emptyDir:
                  sizeLimit: 5Mi
                name: package-cache
      - name: crossplane-rbac-manager
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: crossplane-rbac-manager
              release: universal-crossplane
          strategy:
            type: RollingUpdate
          template:
            metadata:
              creationTimestamp: null
              labels:
                app: crossplane-rbac-manager
                release: universal-crossplane
            spec:
              containers:
              - args:
                - rbac
                - start
                - --manage=Basic
                - --provider-clusterrole=crossplane:allowed-provider-permissions
                env:
                - name: LEADER_ELECTION
                  value: "true"
                image: crossplane/crossplane:v1.2.1
                imagePullPolicy: IfNotPresent
                name: universal-crossplane
                resources:
                  limits:
                    cpu: 100m
                    memory: 512Mi
                  requests:
                    cpu: 100m
                    memory: 256Mi
                securityContext:
                  allowPrivilegeEscalation: false
                  readOnlyRootFilesystem: true
              initContainers:
              - args:
                - rbac
                - init
                image: crossplane/crossplane:v1.2.1
                imagePullPolicy: IfNotPresent
                name: universal-crossplane-init
                resources:
                  limits:
                    cpu: 100m
                    memory: 512Mi
                  requests:
                    cpu: 100m
                    memory: 256Mi
                securityContext:
                  allowPrivilegeEscalation: false
                  readOnlyRootFilesystem: true
              serviceAccountName: rbac-manager
      - name: upbound-agent
        spec:
          replicas: 1
          selector:
            matchLabels:
              app.kubernetes.io/component: agent
              app.kubernetes.io/instance: universal-crossplane
              app.kubernetes.io/name: crossplane
          strategy: {}
          template:
            metadata:
              creationTimestamp: null
              labels:
                app.kubernetes.io/component: agent
                app.kubernetes.io/instance: universal-crossplane
                app.kubernetes.io/name: crossplane
            spec:
              containers:
              - args:
                - agent
                - --tls-cert-file
                - /etc/certs/upbound-agent/tls.crt
                - --tls-key-file
                - /etc/certs/upbound-agent/tls.key
                - --xgql-ca-bundle-file
                - /etc/certs/upbound-agent/ca.crt
                - --nats-endpoint
                - nats://connect.upbound.io:443
                - --upbound-api-endpoint
                - https://api.upbound.io
                - --pod-name
                - $(POD_NAME)
                - --control-plane-token-path
                - /etc/tokens/control-plane/token
                env:
                - name: POD_NAME
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.name
                image: upbound/upbound-agent:v1.2.1-up.3
                imagePullPolicy: IfNotPresent
                name: agent
                ports:
                - containerPort: 6443
                  name: agent
                  protocol: TCP
                resources: {}
                volumeMounts:
                - mountPath: /etc/certs/upbound-agent
                  name: certs
                  readOnly: true
                - mountPath: /etc/tokens/control-plane
                  name: upbound-control-plane-token
                  readOnly: true
              imagePullSecrets:
              - name: dockerhub
              serviceAccountName: upbound-agent
              volumes:
              - name: certs
                secret:
                  defaultMode: 420
                  secretName: upbound-agent-tls
              - name: upbound-control-plane-token
                secret:
                  defaultMode: 420
                  items:
                  - key: token
                    path: token
                  optional: true
                  secretName: upbound-control-plane-token
      - name: xgql
        spec:
          selector:
            matchLabels:
              app.kubernetes.io/component: xgql
              app.kubernetes.io/instance: universal-crossplane
              app.kubernetes.io/name: crossplane
          strategy: {}
          template:
            metadata:
              creationTimestamp: null
              labels:
                app.kubernetes.io/component: xgql
                app.kubernetes.io/instance: universal-crossplane
                app.kubernetes.io/name: crossplane
            spec:
              containers:
              - args:
                - --tls-key=/etc/certs/xgql/tls.key
                - --tls-cert=/etc/certs/xgql/tls.crt
                env:
                - name: POD_NAMESPACE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.namespace
                image: upbound/xgql:v0.1.2
                imagePullPolicy: IfNotPresent
                name: xgql
                ports:
                - containerPort: 8443
                  name: https
                  protocol: TCP
                resources: {}
                volumeMounts:
                - mountPath: /etc/certs/xgql
                  name: certs
                  readOnly: true
              imagePullSecrets:
              - name: dockerhub
              serviceAccountName: xgql
              volumes:
              - name: certs
                secret:
                  defaultMode: 420
                  secretName: xgql-tls
    strategy: deployment
  installModes:
  - supported: false
    type: OwnNamespace
  - supported: false
    type: SingleNamespace
  - supported: false
    type: MultiNamespace
  - supported: true
    type: AllNamespaces
  keywords:
  - cloud
  - infrastructure
  - services
  - application
  - database
  - cache
  - bucket
  - infra
  - app
  - ops
  - oam
  - gcp
  - azure
  - aws
  - alibaba
  - cloudsql
  - rds
  - s3
  - azuredatabase
  - asparadb
  - gke
  - aks
  - eks
  links:
  - name: GitHub
    url: https://github.com/upbound/universal-crossplane
  - name: Website
    url: https://upbound.io
  - name: Twitter
    url: https://twitter.com/upbound_io
  - name: Slack
    url: https://slack.crossplane.io/
  maintainers:
  - email: info@upbound.io
    name: Upbound Inc.
  maturity: stable
  minKubeVersion: 1.16.0
  provider:
    name: Upbound Inc.
    url: https://upbound.io
  version: 1.2.1-up.3
status:
  cleanup: {}
