apiVersion: operators.coreos.com/v1alpha1
kind: ClusterServiceVersion
metadata:
  annotations:
    alm-examples: "[\n  {\n    \"apiVersion\": \"wildfly.org/v1alpha1\",\n    \"kind\"\
      : \"WildFlyServer\",\n    \"metadata\": {\n      \"name\": \"quickstart\"\n\
      \    },\n    \"spec\": {\n      \"applicationImage\": \"quay.io/wildfly-quickstarts/wildfly-operator-quickstart:18.0\"\
      ,\n      \"replicas\": 1\n    }\n  }\n]\n"
    capabilities: Seamless Upgrades
    categories: Application Runtime
    certified: 'false'
    containerImage: quay.io/wildfly/wildfly-operator:0.4.1
    createdAt: '2020-09-18T08:00:00Z'
    description: Operator that deploys and manages Java applications running on WildFly.
    repository: https://github.com/wildfly/wildfly-operator
    support: WildFlyServer
  name: wildfly-operator.v0.4.1
  namespace: placeholder
spec:
  customresourcedefinitions:
    owned:
    - description: An application running on WildFly application runtime.
      displayName: WildFlyServer
      kind: WildFlyServer
      name: wildflyservers.wildfly.org
      resources:
      - kind: Service
        version: v1
      - kind: Pod
        version: v1
      - kind: StatefulSet
        version: v1beta2
      specDescriptors:
      - description: Number of instances for a WildFlyServer resource.
        displayName: Replicas
        path: replicas
      - description: Name of the application image to be deployed.
        displayName: Application Image
        path: applicationImage
      - description: spec to specify how standalone configuration can be read from
          a ConfigMap.
        displayName: Standalone ConfigMap
        path: standaloneConfigMap
      - description: Storage spec to specify how storage should be used.
        displayName: Storage
        path: storage
      version: v1alpha1
  description: >
    WildFly is a flexible, lightweight, managed application runtime that helps you build amazing applications. Fly Fast, and Free!
    
    ## Save Time With Faster Development

    WildFly supports the latest standards for REST based data access, including JAX-RS 2, and JSON-P. Building on Jakarta EE provides rich enterprise capabilities in easy to consume frameworks that eliminate boilerplate and reduce technical burden.

    The quick boot of WildFly combined with the easy-to-use Arquillian framework allows for test driven development using the real environment your code will be running in. Your test code is separate and simply deployed along side your application where it has full access to server resources.

    ## Save Resources With Efficient Management

    WildFly takes an aggressive approach to memory management and is based on pluggable subsystems that can be added or removed as needed.


    The quick boot of WildFly combined with the easy-to-use Arquillian framework allows for test driven development using the real environment your code will be running in. Your test code is separate and simply deployed along side your application where it has full access to server resources.

    Configuration in WildFly is centralized, simple and user-focused. The configuration file is organized by subsystems that you can easily comprehend and no internal server wiring is exposed. Subsystems use intelligent defaults, but can still be customized to best fit your needs. If you are running in domain mode, the configuration for all servers participating in the domain is specified in a well-organized manner within the same file.

    ## Save Money With Open Source

    WildFly is an open source community project sponsored by Red Hat(TM) and is available for use and distribution under the LGPL v2.1 license meaning that it is available for you to download and use at no cost. This allows organizations like yours to develop amazing new technologies and federates the tech world to allow successful startups to come from anywhere.

    ## Basic Install (Phase I)

    The features and capabilities of Basic Install (Phase I) deals with the provisioning, installation and configuration of a Java application managed by the WildFly Operator.

    ### Specify the Docker Application Image

    The `applicationImage` specifies the Docker application image that contains the Java application. The image must have been built [WildFly S2I](https://github.com/wildfly/wildfly-s2i).

       spec:
          applicationImage: "quay.io/wildfly-quickstarts/wildfly-operator-quickstart:18.0"

    The `applicationImage` accepts different references to Docker image:

      * the name of the image: `quay.io/wildfly-quickstarts/wildfly-operator-quickstart`
      * a tag: `quay.io/wildfly-quickstarts/wildfly-operator-quickstart:18.0`
      * a digest: `quay.io/wildfly-quickstarts/wildfly-operator-quickstart@sha256:0af38bc38be93116b6a1d86a9c78bd14cd527121970899d719baf78e5dc7bfd2`
      * an image stream tag: `my-app:latest`

    ### Specify the Size of the Application

    The `replicas` specifies the size of the application, i.e. the number of pods that runs the application image.

       spec:
          replicas:2

    ### Specify the Storage Requirements for the Server Data Directory

    The `storage` defines the storage requirements for the application data. The application may require persistent storage for some data (e.g. transaction or messaging logs) that must persist across Pod restarts.

    If the `storage` spec is empty, an `EmptyDir` volume will be used by each pod of the application (but this volume will not persist after its corresponding pod is stopped).

        spec:
          storage:
            volumeClaimTemplate:
              spec:
                resources:
                  requests:
                    storage: 3Gi

    The persistent volume that meets this storage requirement is mounted on the `/wildfly/standalone/data` directory (corresponding to WildFly's `jboss.server.data.dir` path).

    ### Configure the Application Environment

    Environment can be configured using the `env spec. Environment variables can come directly from values (such as the `POSTGRESQL_SERVICE_HOST` example below) or from secrets (e.g. the `POSTGRESQL_USER example below).

        spec:
          env:
          - name: POSTGRESQL_SERVICE_HOST
            value: postgresql
          - name: POSTGRESQL_SERVICE_PORT
            value: '5432'
          - name: POSTGRESQL_DATABASE
            valueFrom:
              secretKeyRef:
                key: database-name
                name: postgresql
          - name: POSTGRESQL_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: postgresql
          - name: POSTGRESQL_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: postgresql

    ### Configure Secrets

    Secrets can be mounted as volumes to be accessed from the application.

    The secrets must be created *before* the WildFly Operator deploys the application. For example we can create a secret named `my-secret` with a command such as:

        $ kubectl create secret generic my-secret --from-literal=my-key=devuser --from-literal=my-password='my-very-secure-pasword'

    Once the secret has been created, we can specify its name in the WildFlyServer Spec to have it mounted as a volume in the pods running the application:

    Once the secret has been created, we can specify its name in the WildFlyServer Spec to have it mounted as a volume in the pods running the application:

        spec:
          secrets:
            - my-secret

    The secrets will then be mounted under `/etc/secrets/<secret name>` and each key/value will be stored in a file (whose name is the key and the content is the value).

        $ ls /etc/secrets/my-secret/
        my-key  my-password
        $ cat /etc/secrets/my-secret/my-key
        devuser
        $ cat /etc/secrets/my-secret/my-password
        my-very-secure-pasword

    ### Configure ConfigMaps

    ConfigMaps can be mounted as volumes to be accessed from the application.

    The config maps must be created *before* the WildFly Operator deploys the application. For example we can create a config map named `my-config` with a command such as:

        $ kubectl create configmap my-config --from-literal=key1=value1 --from-literal=key2=value2
        configmap/my-config created

    Once the config map has been created, we can specify its name in the WildFlyServer Spec to have it mounted as a volume in the pods running the application:

        spec:
          configMaps:
          - my-config

    The config maps will then be mounted under `/etc/configmaps/<config map name>` and each key/value will be stored in a file (whose name is the key and the content is the value).

        $ ls /etc/configmaps/my-config/
        key1 key2
        $ cat /etc/configmaps/my-config/key1
        value1
        $ cat /etc/configmaps/my-config/key2
        value2

    ### Bring Your Own Standalone XML Configuation

    It is possible to directly provide WildFly standalone configuration instead of the one in the application image (that comes from WildFly S2I).

    The standalone XML file must be put in a ConfigMap that is accessible by the operator. The `standaloneConfigMap` must provide the name of this ConfigMap as well as the key corresponding to the name of standalone XML file.

        spec:
          standaloneConfigMap:
            name: clusterbench-config-map
            key: standalone-openshift.xml

    In this example, the `clusterbench-config-map` must be created before the WildFly Operator deploys the application.

        $ kubectl create configmap clusterbench-config-map --from-file examples/clustering/config/standalone-openshift.xml
        configmap/clusterbench-config-map created

    ## OpenShift Features

    Some Operator features are only available when running on OpenShift if Kubernetes does not provide the required resources to activate these features.

    ### Seamless Upgrades (Phase II)

    When the `applicationImage` corresponds to an ImageStream Tag of an ImageStream in the same namespace, the WildFly operator will detect any changes to the application image and triggers a new deployment of the application.

    ### Creation of an HTTP Route

    By default, when the Operator runs on OpenShift, it creates an external route to the HTTP port of the Java application.

    This route creation can be disabled by setting `disableHTTPRoute` to `true` if you do not wish to create an external route to the Java application.

        spec:
          disableHTTPRoute: true

    ## Full Lifecycle (Phase III)
   
    ### Transaction recovery during scaledown

    As the application deployed in the WildFly application server
    may use JTA transactions there and the question emerges: what does happen when the cluster is scaled down?
    When the number of active WildFly replicas is decreased, still there may be some in-doubt transactions in the transaction log.
    When the pod is removed then all the in-progress transactions are stopped and rolled back.
    A more troublesome situation occurs when XA transactions are used.
    When the XA transaction declares it's prepared it's a promise to finish the transaction successfully.
    But the transaction manager which made this promise is running inside the WildFly server.
    Then simply shutting down such pod may lead to data inconsistencies or data locks.  


    It must be ensured that all transactions are finished before the number of replicas is really decreased.
    For that purpose, the WildFly Operator provides scale down functionality which verifies if all transactions were finished
    and only then marks the pod as clean for termination.  


    Full documentation of transaction recovery can be found at [WildFly Operator User Guide](https://github.com/wildfly/wildfly-operator/blob/master/doc/user-guide.adoc#scaledown-transaction-recovery).
  displayName: WildFly
  icon:
  - base64data: 
    mediatype: image/png
  install:
    spec:
      deployments:
      - name: wildfly-operator
        spec:
          replicas: 1
          selector:
            matchLabels:
              name: wildfly-operator
          strategy: {}
          template:
            metadata:
              labels:
                name: wildfly-operator
            spec:
              containers:
              - command:
                - wildfly-operator
                env:
                - name: WATCH_NAMESPACE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.annotations['olm.targetNamespaces']
                - name: POD_NAME
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.name
                - name: OPERATOR_NAME
                  value: wildfly-operator
                image: quay.io/wildfly/wildfly-operator:0.4.1
                imagePullPolicy: Always
                name: wildfly-operator
                resources: {}
              serviceAccountName: wildfly-operator
      permissions:
      - rules:
        - apiGroups:
          - ""
          resources:
          - pods
          - pods/exec
          - pods/log
          - services
          - endpoints
          - persistentvolumeclaims
          - events
          - configmaps
          - secrets
          verbs:
          - create
          - delete
          - get
          - list
          - patch
          - update
          - watch
        - apiGroups:
          - ""
          resources:
          - namespaces
          verbs:
          - get
        - apiGroups:
          - apps
          resources:
          - deployments
          - daemonsets
          - replicasets
          - statefulsets
          - deployments/finalizers
          verbs:
          - create
          - delete
          - get
          - list
          - patch
          - update
          - watch
        - apiGroups:
          - monitoring.coreos.com
          resources:
          - servicemonitors
          verbs:
          - get
          - create
        - apiGroups:
          - wildfly.org
          resources:
          - '*'
          verbs:
          - create
          - delete
          - get
          - list
          - patch
          - update
          - watch
        - apiGroups:
          - route.openshift.io
          resources:
          - routes
          verbs:
          - create
          - delete
          - get
          - list
          - patch
          - update
          - watch
        serviceAccountName: wildfly-operator
    strategy: deployment
  installModes:
  - supported: true
    type: OwnNamespace
  - supported: true
    type: SingleNamespace
  - supported: false
    type: MultiNamespace
  - supported: true
    type: AllNamespaces
  keywords:
  - wildfly
  - java
  - open source
  - application runtime
  labels:
    operated-by: wildfly-operator
  links:
  - name: WildFly Homepage
    url: https://wildfly.org/
  - name: Blog
    url: https://wildfly.org/news/
  - name: Documentation
    url: https://docs.wildfly.org
  - name: Quickstart
    url: https://github.com/wildfly/quickstart
  maintainers:
  - email: wildfly-dev@lists.jboss.org
    name: WildFly Community
  maturity: alpha
  minKubeVersion: 1.11.0
  provider:
    name: WildFly
  replaces: wildfly-operator.v0.4.0
  selector:
    matchLabels:
      operated-by: wildfly-operator
  version: 0.4.1
